<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBXE654F94E5A9943E6A47C1E0BFE0002DE">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">DataStoreEditorPlugin</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags">G35ob3Rzd2FwIw==</BinaryString>
		</Properties>
		<Item class="Folder" referent="RBX3FDD5AE14FA040318B877FE667B8AFC8">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Vendor</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXD38A5BFFD79849E5AE136A97825CF5AE">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Promise</string>
					<string name="ScriptGuid">{114C44F9-4F0C-4242-97ED-72B5694C89FE}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	An implementation of Promises similar to Promise/A+.
]]

local ERROR_NON_PROMISE_IN_LIST = "Non-promise value passed into %s at index %s"
local ERROR_NON_LIST = "Please pass a list of promises to %s"
local ERROR_NON_FUNCTION = "Please pass a handler function to %s!"
local MODE_KEY_METATABLE = {__mode = "k"}

--[[
	Creates an enum dictionary with some metamethods to prevent common mistakes.
]]
local function makeEnum(enumName, members)
	local enum = {}

	for _, memberName in ipairs(members) do
		enum[memberName] = memberName
	end

	return setmetatable(enum, {
		__index = function(_, k)
			error(string.format("%s is not in %s!", k, enumName), 2)
		end,
		__newindex = function()
			error(string.format("Creating new members in %s is not allowed!", enumName), 2)
		end,
	})
end

--[[
	An object to represent runtime errors that occur during execution.
	Promises that experience an error like this will be rejected with
	an instance of this object.
]]
local Error do
	Error = {
		Kind = makeEnum("Promise.Error.Kind", {
			"ExecutionError",
			"AlreadyCancelled",
			"NotResolvedInTime",
			"TimedOut",
		}),
	}
	Error.__index = Error

	function Error.new(options, parent)
		options = options or {}
		return setmetatable({
			error = tostring(options.error) or "[This error has no error text.]",
			trace = options.trace,
			context = options.context,
			kind = options.kind,
			parent = parent,
			createdTick = os.clock(),
			createdTrace = debug.traceback(),
		}, Error)
	end

	function Error.is(anything)
		if type(anything) == "table" then
			local metatable = getmetatable(anything)

			if type(metatable) == "table" then
				return rawget(anything, "error") ~= nil and type(rawget(metatable, "extend")) == "function"
			end
		end

		return false
	end

	function Error.isKind(anything, kind)
		assert(kind ~= nil, "Argument #2 to Promise.Error.isKind must not be nil")

		return Error.is(anything) and anything.kind == kind
	end

	function Error:extend(options)
		options = options or {}

		options.kind = options.kind or self.kind

		return Error.new(options, self)
	end

	function Error:getErrorChain()
		local runtimeErrors = { self }

		while runtimeErrors[#runtimeErrors].parent do
			table.insert(runtimeErrors, runtimeErrors[#runtimeErrors].parent)
		end

		return runtimeErrors
	end

	function Error:__tostring()
		local errorStrings = {
			string.format("-- Promise.Error(%s) --", self.kind or "?"),
		}

		for _, runtimeError in ipairs(self:getErrorChain()) do
			table.insert(errorStrings, table.concat({
				runtimeError.trace or runtimeError.error,
				runtimeError.context,
			}, "\n"))
		end

		return table.concat(errorStrings, "\n")
	end
end

--[[
	Packs a number of arguments into a table and returns its length.

	Used to cajole varargs without dropping sparse values.
]]
local function pack(...)
	return select("#", ...), { ... }
end

--[[
	Returns first value (success), and packs all following values.
]]
local function packResult(success, ...)
	return success, select("#", ...), { ... }
end

local function makeErrorHandler(traceback)
	assert(traceback ~= nil, "No traceback")

	return function(err)
		-- If the error object is already a table, forward it directly.
		-- Should we extend the error here and add our own trace?

		if type(err) == "table" then
			return err
		end

		return Error.new({
			error = err,
			kind = Error.Kind.ExecutionError,
			trace = debug.traceback(tostring(err), 2),
			context = "Promise created at:\n\n" .. traceback,
		})
	end
end

--[[
	Calls a Promise executor with error handling.
]]
local function runExecutor(traceback, callback, ...)
	return packResult(xpcall(callback, makeErrorHandler(traceback), ...))
end

--[[
	Creates a function that invokes a callback with correct error handling and
	resolution mechanisms.
]]
local function createAdvancer(traceback, callback, resolve, reject)
	return function(...)
		local ok, resultLength, result = runExecutor(traceback, callback, ...)

		if ok then
			resolve(unpack(result, 1, resultLength))
		else
			reject(result[1])
		end
	end
end

local function isEmpty(t)
	return next(t) == nil
end

local Promise = {
	Error = Error,
	Status = makeEnum("Promise.Status", {"Started", "Resolved", "Rejected", "Cancelled"}),
	_getTime = os.clock,
	_timeEvent = game:GetService("RunService").Heartbeat,
}
Promise.prototype = {}
Promise.__index = Promise.prototype

--[[
	Constructs a new Promise with the given initializing callback.

	This is generally only called when directly wrapping a non-promise API into
	a promise-based version.

	The callback will receive 'resolve' and 'reject' methods, used to start
	invoking the promise chain.

	Second parameter, parent, is used internally for tracking the "parent" in a
	promise chain. External code shouldn't need to worry about this.
]]
function Promise._new(traceback, callback, parent)
	if parent ~= nil and not Promise.is(parent) then
		error("Argument #2 to Promise.new must be a promise or nil", 2)
	end

	local self = {
		-- Used to locate where a promise was created
		_source = traceback,

		_status = Promise.Status.Started,

		-- A table containing a list of all results, whether success or failure.
		-- Only valid if _status is set to something besides Started
		_values = nil,

		-- Lua doesn't like sparse arrays very much, so we explicitly store the
		-- length of _values to handle middle nils.
		_valuesLength = -1,

		-- Tracks if this Promise has no error observers..
		_unhandledRejection = true,

		-- Queues representing functions we should invoke when we update!
		_queuedResolve = {},
		_queuedReject = {},
		_queuedFinally = {},

		-- The function to run when/if this promise is cancelled.
		_cancellationHook = nil,

		-- The "parent" of this promise in a promise chain. Required for
		-- cancellation propagation upstream.
		_parent = parent,

		-- Consumers are Promises that have chained onto this one.
		-- We track them for cancellation propagation downstream.
		_consumers = setmetatable({}, MODE_KEY_METATABLE),
	}

	if parent and parent._status == Promise.Status.Started then
		parent._consumers[self] = true
	end

	setmetatable(self, Promise)

	local function resolve(...)
		self:_resolve(...)
	end

	local function reject(...)
		self:_reject(...)
	end

	local function onCancel(cancellationHook)
		if cancellationHook then
			if self._status == Promise.Status.Cancelled then
				cancellationHook()
			else
				self._cancellationHook = cancellationHook
			end
		end

		return self._status == Promise.Status.Cancelled
	end

	coroutine.wrap(function()
		local ok, _, result = runExecutor(
			self._source,
			callback,
			resolve,
			reject,
			onCancel
		)

		if not ok then
			reject(result[1])
		end
	end)()

	return self
end

function Promise.new(executor)
	return Promise._new(debug.traceback(nil, 2), executor)
end

function Promise:__tostring()
	return string.format("Promise(%s)", self._status)
end

--[[
	Promise.new, except pcall on a new thread is automatic.
]]
function Promise.defer(callback)
	local traceback = debug.traceback(nil, 2)
	local promise
	promise = Promise._new(traceback, function(resolve, reject, onCancel)
		local connection
		connection = Promise._timeEvent:Connect(function()
			connection:Disconnect()
			local ok, _, result = runExecutor(traceback, callback, resolve, reject, onCancel)

			if not ok then
				reject(result[1])
			end
		end)
	end)

	return promise
end

-- Backwards compatibility
Promise.async = Promise.defer

--[[
	Create a promise that represents the immediately resolved value.
]]
function Promise.resolve(...)
	local length, values = pack(...)
	return Promise._new(debug.traceback(nil, 2), function(resolve)
		resolve(unpack(values, 1, length))
	end)
end

--[[
	Create a promise that represents the immediately rejected value.
]]
function Promise.reject(...)
	local length, values = pack(...)
	return Promise._new(debug.traceback(nil, 2), function(_, reject)
		reject(unpack(values, 1, length))
	end)
end

--[[
	Runs a non-promise-returning function as a Promise with the
  given arguments.
]]
function Promise._try(traceback, callback, ...)
	local valuesLength, values = pack(...)

	return Promise._new(traceback, function(resolve)
		resolve(callback(unpack(values, 1, valuesLength)))
	end)
end

--[[
	Begins a Promise chain, turning synchronous errors into rejections.
]]
function Promise.try(...)
	return Promise._try(debug.traceback(nil, 2), ...)
end

--[[
	Returns a new promise that:
		* is resolved when all input promises resolve
		* is rejected if ANY input promises reject
]]
function Promise._all(traceback, promises, amount)
	if type(promises) ~= "table" then
		error(string.format(ERROR_NON_LIST, "Promise.all"), 3)
	end

	-- We need to check that each value is a promise here so that we can produce
	-- a proper error rather than a rejected promise with our error.
	for i, promise in pairs(promises) do
		if not Promise.is(promise) then
			error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.all", tostring(i)), 3)
		end
	end

	-- If there are no values then return an already resolved promise.
	if #promises == 0 or amount == 0 then
		return Promise.resolve({})
	end

	return Promise._new(traceback, function(resolve, reject, onCancel)
		-- An array to contain our resolved values from the given promises.
		local resolvedValues = {}
		local newPromises = {}

		-- Keep a count of resolved promises because just checking the resolved
		-- values length wouldn't account for promises that resolve with nil.
		local resolvedCount = 0
		local rejectedCount = 0
		local done = false

		local function cancel()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end

		-- Called when a single value is resolved and resolves if all are done.
		local function resolveOne(i, ...)
			if done then
				return
			end

			resolvedCount = resolvedCount + 1

			if amount == nil then
				resolvedValues[i] = ...
			else
				resolvedValues[resolvedCount] = ...
			end

			if resolvedCount >= (amount or #promises) then
				done = true
				resolve(resolvedValues)
				cancel()
			end
		end

		onCancel(cancel)

		-- We can assume the values inside `promises` are all promises since we
		-- checked above.
		for i, promise in ipairs(promises) do
			newPromises[i] = promise:andThen(
				function(...)
					resolveOne(i, ...)
				end,
				function(...)
					rejectedCount = rejectedCount + 1

					if amount == nil or #promises - rejectedCount < amount then
						cancel()
						done = true

						reject(...)
					end
				end
			)
		end

		if done then
			cancel()
		end
	end)
end

function Promise.all(promises)
	return Promise._all(debug.traceback(nil, 2), promises)
end

function Promise.fold(list, callback, initialValue)
	assert(type(list) == "table", "Bad argument #1 to Promise.fold: must be a table")
	assert(type(callback) == "function", "Bad argument #2 to Promise.fold: must be a function")

	local accumulator = Promise.resolve(initialValue)
	return Promise.each(list, function(resolvedElement, i)
		accumulator = accumulator:andThen(function(previousValueResolved)
			return callback(previousValueResolved, resolvedElement, i)
		end)
	end):andThenReturn(accumulator)
end

function Promise.some(promises, amount)
	assert(type(amount) == "number", "Bad argument #2 to Promise.some: must be a number")

	return Promise._all(debug.traceback(nil, 2), promises, amount)
end

function Promise.any(promises)
	return Promise._all(debug.traceback(nil, 2), promises, 1):andThen(function(values)
		return values[1]
	end)
end

function Promise.allSettled(promises)
	if type(promises) ~= "table" then
		error(string.format(ERROR_NON_LIST, "Promise.allSettled"), 2)
	end

	-- We need to check that each value is a promise here so that we can produce
	-- a proper error rather than a rejected promise with our error.
	for i, promise in pairs(promises) do
		if not Promise.is(promise) then
			error(string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.allSettled", tostring(i)), 2)
		end
	end

	-- If there are no values then return an already resolved promise.
	if #promises == 0 then
		return Promise.resolve({})
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
		-- An array to contain our resolved values from the given promises.
		local fates = {}
		local newPromises = {}

		-- Keep a count of resolved promises because just checking the resolved
		-- values length wouldn't account for promises that resolve with nil.
		local finishedCount = 0

		-- Called when a single value is resolved and resolves if all are done.
		local function resolveOne(i, ...)
			finishedCount = finishedCount + 1

			fates[i] = ...

			if finishedCount >= #promises then
				resolve(fates)
			end
		end

		onCancel(function()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end)

		-- We can assume the values inside `promises` are all promises since we
		-- checked above.
		for i, promise in ipairs(promises) do
			newPromises[i] = promise:finally(
				function(...)
					resolveOne(i, ...)
				end
			)
		end
	end)
end

--[[
	Races a set of Promises and returns the first one that resolves,
	cancelling the others.
]]
function Promise.race(promises)
	assert(type(promises) == "table", string.format(ERROR_NON_LIST, "Promise.race"))

	for i, promise in pairs(promises) do
		assert(Promise.is(promise), string.format(ERROR_NON_PROMISE_IN_LIST, "Promise.race", tostring(i)))
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
		local newPromises = {}
		local finished = false

		local function cancel()
			for _, promise in ipairs(newPromises) do
				promise:cancel()
			end
		end

		local function finalize(callback)
			return function (...)
				cancel()
				finished = true
				return callback(...)
			end
		end

		if onCancel(finalize(reject)) then
			return
		end

		for i, promise in ipairs(promises) do
			newPromises[i] = promise:andThen(finalize(resolve), finalize(reject))
		end

		if finished then
			cancel()
		end
	end)
end

--[[
	Iterates serially over the given an array of values, calling the predicate callback on each before continuing.
	If the predicate returns a Promise, we wait for that Promise to resolve before continuing to the next item
	in the array. If the Promise the predicate returns rejects, the Promise from Promise.each is also rejected with
	the same value.

	Returns a Promise containing an array of the return values from the predicate for each item in the original list.
]]
function Promise.each(list, predicate)
	assert(type(list) == "table", string.format(ERROR_NON_LIST, "Promise.each"))
	assert(type(predicate) == "function", string.format(ERROR_NON_FUNCTION, "Promise.each"))

	return Promise._new(debug.traceback(nil, 2), function(resolve, reject, onCancel)
		local results = {}
		local promisesToCancel = {}

		local cancelled = false

		local function cancel()
			for _, promiseToCancel in ipairs(promisesToCancel) do
				promiseToCancel:cancel()
			end
		end

		onCancel(function()
			cancelled = true

			cancel()
		end)

		-- We need to preprocess the list of values and look for Promises.
		-- If we find some, we must register our andThen calls now, so that those Promises have a consumer
		-- from us registered. If we don't do this, those Promises might get cancelled by something else
		-- before we get to them in the series because it's not possible to tell that we plan to use it
		-- unless we indicate it here.

		local preprocessedList = {}

		for index, value in ipairs(list) do
			if Promise.is(value) then
				if value:getStatus() == Promise.Status.Cancelled then
					cancel()
					return reject(Error.new({
						error = "Promise is cancelled",
						kind = Error.Kind.AlreadyCancelled,
						context = string.format(
							"The Promise that was part of the array at index %d passed into Promise.each was already cancelled when Promise.each began.\n\nThat Promise was created at:\n\n%s",
							index,
							value._source
						),
					}))
				elseif value:getStatus() == Promise.Status.Rejected then
					cancel()
					return reject(select(2, value:await()))
				end

				-- Chain a new Promise from this one so we only cancel ours
				local ourPromise = value:andThen(function(...)
					return ...
				end)

				table.insert(promisesToCancel, ourPromise)
				preprocessedList[index] = ourPromise
			else
				preprocessedList[index] = value
			end
		end

		for index, value in ipairs(preprocessedList) do
			if Promise.is(value) then
				local success
				success, value = value:await()

				if not success then
					cancel()
					return reject(value)
				end
			end

			if cancelled then
				return
			end

			local predicatePromise = Promise.resolve(predicate(value, index))

			table.insert(promisesToCancel, predicatePromise)

			local success, result = predicatePromise:await()

			if not success then
				cancel()
				return reject(result)
			end

			results[index] = result
		end

		resolve(results)
	end)
end

--[[
	Is the given object a Promise instance?
]]
function Promise.is(object)
	if type(object) ~= "table" then
		return false
	end

	local objectMetatable = getmetatable(object)

	if objectMetatable == Promise then
		-- The Promise came from this library.
		return true
	elseif objectMetatable == nil then
		-- No metatable, but we should still chain onto tables with andThen methods
		return type(object.andThen) == "function"
	elseif
		type(objectMetatable) == "table"
		and type(rawget(objectMetatable, "__index")) == "table"
		and type(rawget(rawget(objectMetatable, "__index"), "andThen")) == "function"
	then
		-- Maybe this came from a different or older Promise library.
		return true
	end

	return false
end

--[[
	Converts a yielding function into a Promise-returning one.
]]
function Promise.promisify(callback)
	return function(...)
		return Promise._try(debug.traceback(nil, 2), callback, ...)
	end
end

--[[
	Creates a Promise that resolves after given number of seconds.
]]
do
	-- uses a sorted doubly linked list (queue) to achieve O(1) remove operations and O(n) for insert

	-- the initial node in the linked list
	local first
	local connection

	function Promise.delay(seconds)
		assert(type(seconds) == "number", "Bad argument #1 to Promise.delay, must be a number.")
		-- If seconds is -INF, INF, NaN, or less than 1 / 60, assume seconds is 1 / 60.
		-- This mirrors the behavior of wait()
		if not (seconds >= 1 / 60) or seconds == math.huge then
			seconds = 1 / 60
		end

		return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
			local startTime = Promise._getTime()
			local endTime = startTime + seconds

			local node = {
				resolve = resolve,
				startTime = startTime,
				endTime = endTime,
			}

			if connection == nil then -- first is nil when connection is nil
				first = node
				connection = Promise._timeEvent:Connect(function()
					local threadStart = Promise._getTime()

					while first ~= nil and first.endTime < threadStart do
						local current = first
						first = current.next

						if first == nil then
							connection:Disconnect()
							connection = nil
						else
							first.previous = nil
						end

						current.resolve(Promise._getTime() - current.startTime)
					end
				end)
			else -- first is non-nil
				if first.endTime < endTime then -- if `node` should be placed after `first`
					-- we will insert `node` between `current` and `next`
					-- (i.e. after `current` if `next` is nil)
					local current = first
					local next = current.next

					while next ~= nil and next.endTime < endTime do
						current = next
						next = current.next
					end

					-- `current` must be non-nil, but `next` could be `nil` (i.e. last item in list)
					current.next = node
					node.previous = current

					if next ~= nil then
						node.next = next
						next.previous = node
					end
				else
					-- set `node` to `first`
					node.next = first
					first.previous = node
					first = node
				end
			end

			onCancel(function()
				-- remove node from queue
				local next = node.next

				if first == node then
					if next == nil then -- if `node` is the first and last
						connection:Disconnect()
						connection = nil
					else -- if `node` is `first` and not the last
						next.previous = nil
					end
					first = next
				else
					local previous = node.previous
					-- since `node` is not `first`, then we know `previous` is non-nil
					previous.next = next

					if next ~= nil then
						next.previous = previous
					end
				end
			end)
		end)
	end
end

--[[
	Rejects the promise after `seconds` seconds.
]]
function Promise.prototype:timeout(seconds, rejectionValue)
	local traceback = debug.traceback(nil, 2)

	return Promise.race({
		Promise.delay(seconds):andThen(function()
			return Promise.reject(rejectionValue == nil and Error.new({
				kind = Error.Kind.TimedOut,
				error = "Timed out",
				context = string.format(
					"Timeout of %d seconds exceeded.\n:timeout() called at:\n\n%s",
					seconds,
					traceback
				),
			}) or rejectionValue)
		end),
		self,
	})
end

function Promise.prototype:getStatus()
	return self._status
end

--[[
	Creates a new promise that receives the result of this promise.

	The given callbacks are invoked depending on that result.
]]
function Promise.prototype:_andThen(traceback, successHandler, failureHandler)
	self._unhandledRejection = false

	-- Create a new promise to follow this part of the chain
	return Promise._new(traceback, function(resolve, reject)
		-- Our default callbacks just pass values onto the next promise.
		-- This lets success and failure cascade correctly!

		local successCallback = resolve
		if successHandler then
			successCallback = createAdvancer(
				traceback,
				successHandler,
				resolve,
				reject
			)
		end

		local failureCallback = reject
		if failureHandler then
			failureCallback = createAdvancer(
				traceback,
				failureHandler,
				resolve,
				reject
			)
		end

		if self._status == Promise.Status.Started then
			-- If we haven't resolved yet, put ourselves into the queue
			table.insert(self._queuedResolve, successCallback)
			table.insert(self._queuedReject, failureCallback)
		elseif self._status == Promise.Status.Resolved then
			-- This promise has already resolved! Trigger success immediately.
			successCallback(unpack(self._values, 1, self._valuesLength))
		elseif self._status == Promise.Status.Rejected then
			-- This promise died a terrible death! Trigger failure immediately.
			failureCallback(unpack(self._values, 1, self._valuesLength))
		elseif self._status == Promise.Status.Cancelled then
			-- We don't want to call the success handler or the failure handler,
			-- we just reject this promise outright.
			reject(Error.new({
				error = "Promise is cancelled",
				kind = Error.Kind.AlreadyCancelled,
				context = "Promise created at\n\n" .. traceback,
			}))
		end
	end, self)
end

function Promise.prototype:andThen(successHandler, failureHandler)
	assert(
		successHandler == nil or type(successHandler) == "function",
		string.format(ERROR_NON_FUNCTION, "Promise:andThen")
	)
	assert(
		failureHandler == nil or type(failureHandler) == "function",
		string.format(ERROR_NON_FUNCTION, "Promise:andThen")
	)

	return self:_andThen(debug.traceback(nil, 2), successHandler, failureHandler)
end

--[[
	Used to catch any errors that may have occurred in the promise.
]]
function Promise.prototype:catch(failureCallback)
	assert(
		failureCallback == nil or type(failureCallback) == "function",
		string.format(ERROR_NON_FUNCTION, "Promise:catch")
	)
	return self:_andThen(debug.traceback(nil, 2), nil, failureCallback)
end

--[[
	Like andThen, but the value passed into the handler is also the
	value returned from the handler.
]]
function Promise.prototype:tap(tapCallback)
	assert(type(tapCallback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:tap"))
	return self:_andThen(debug.traceback(nil, 2), function(...)
		local callbackReturn = tapCallback(...)

		if Promise.is(callbackReturn) then
			local length, values = pack(...)
			return callbackReturn:andThen(function()
				return unpack(values, 1, length)
			end)
		end

		return ...
	end)
end

--[[
	Calls a callback on `andThen` with specific arguments.
]]
function Promise.prototype:andThenCall(callback, ...)
	assert(type(callback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:andThenCall"))
	local length, values = pack(...)
	return self:_andThen(debug.traceback(nil, 2), function()
		return callback(unpack(values, 1, length))
	end)
end

--[[
	Shorthand for an andThen handler that returns the given value.
]]
function Promise.prototype:andThenReturn(...)
	local length, values = pack(...)
	return self:_andThen(debug.traceback(nil, 2), function()
		return unpack(values, 1, length)
	end)
end

--[[
	Cancels the promise, disallowing it from rejecting or resolving, and calls
	the cancellation hook if provided.
]]
function Promise.prototype:cancel()
	if self._status ~= Promise.Status.Started then
		return
	end

	self._status = Promise.Status.Cancelled

	if self._cancellationHook then
		self._cancellationHook()
	end

	if self._parent then
		self._parent:_consumerCancelled(self)
	end

	for child in pairs(self._consumers) do
		child:cancel()
	end

	self:_finalize()
end

--[[
	Used to decrease the number of consumers by 1, and if there are no more,
	cancel this promise.
]]
function Promise.prototype:_consumerCancelled(consumer)
	if self._status ~= Promise.Status.Started then
		return
	end

	self._consumers[consumer] = nil

	if next(self._consumers) == nil then
		self:cancel()
	end
end

--[[
	Used to set a handler for when the promise resolves, rejects, or is
	cancelled. Returns a new promise chained from this promise.
]]
function Promise.prototype:_finally(traceback, finallyHandler, onlyOk)
	if not onlyOk then
		self._unhandledRejection = false
	end

	-- Return a promise chained off of this promise
	return Promise._new(traceback, function(resolve, reject)
		local finallyCallback = resolve
		if finallyHandler then
			finallyCallback = createAdvancer(
				traceback,
				finallyHandler,
				resolve,
				reject
			)
		end

		if onlyOk then
			local callback = finallyCallback
			finallyCallback = function(...)
				if self._status == Promise.Status.Rejected then
					return resolve(self)
				end

				return callback(...)
			end
		end

		if self._status == Promise.Status.Started then
			-- The promise is not settled, so queue this.
			table.insert(self._queuedFinally, finallyCallback)
		else
			-- The promise already settled or was cancelled, run the callback now.
			finallyCallback(self._status)
		end
	end, self)
end

function Promise.prototype:finally(finallyHandler)
	assert(
		finallyHandler == nil or type(finallyHandler) == "function",
		string.format(ERROR_NON_FUNCTION, "Promise:finally")
	)
	return self:_finally(debug.traceback(nil, 2), finallyHandler)
end

--[[
	Calls a callback on `finally` with specific arguments.
]]
function Promise.prototype:finallyCall(callback, ...)
	assert(type(callback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:finallyCall"))
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return callback(unpack(values, 1, length))
	end)
end

--[[
	Shorthand for a finally handler that returns the given value.
]]
function Promise.prototype:finallyReturn(...)
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return unpack(values, 1, length)
	end)
end

--[[
	Similar to finally, except rejections are propagated through it.
]]
function Promise.prototype:done(finallyHandler)
	assert(
		finallyHandler == nil or type(finallyHandler) == "function",
		string.format(ERROR_NON_FUNCTION, "Promise:done")
	)
	return self:_finally(debug.traceback(nil, 2), finallyHandler, true)
end

--[[
	Calls a callback on `done` with specific arguments.
]]
function Promise.prototype:doneCall(callback, ...)
	assert(type(callback) == "function", string.format(ERROR_NON_FUNCTION, "Promise:doneCall"))
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return callback(unpack(values, 1, length))
	end, true)
end

--[[
	Shorthand for a done handler that returns the given value.
]]
function Promise.prototype:doneReturn(...)
	local length, values = pack(...)
	return self:_finally(debug.traceback(nil, 2), function()
		return unpack(values, 1, length)
	end, true)
end

--[[
	Yield until the promise is completed.

	This matches the execution model of normal Roblox functions.
]]
function Promise.prototype:awaitStatus()
	self._unhandledRejection = false

	if self._status == Promise.Status.Started then
		local bindable = Instance.new("BindableEvent")

		self:finally(function()
			bindable:Fire()
		end)

		bindable.Event:Wait()
		bindable:Destroy()
	end

	if self._status == Promise.Status.Resolved then
		return self._status, unpack(self._values, 1, self._valuesLength)
	elseif self._status == Promise.Status.Rejected then
		return self._status, unpack(self._values, 1, self._valuesLength)
	end

	return self._status
end

local function awaitHelper(status, ...)
	return status == Promise.Status.Resolved, ...
end

--[[
	Calls awaitStatus internally, returns (isResolved, values...)
]]
function Promise.prototype:await()
	return awaitHelper(self:awaitStatus())
end

local function expectHelper(status, ...)
	if status ~= Promise.Status.Resolved then
		error((...) == nil and "Expected Promise rejected with no value." or (...), 3)
	end

	return ...
end

--[[
	Calls await and only returns if the Promise resolves.
	Throws if the Promise rejects or gets cancelled.
]]
function Promise.prototype:expect()
	return expectHelper(self:awaitStatus())
end

-- Backwards compatibility
Promise.prototype.awaitValue = Promise.prototype.expect

--[[
	Intended for use in tests.

	Similar to await(), but instead of yielding if the promise is unresolved,
	_unwrap will throw. This indicates an assumption that a promise has
	resolved.
]]
function Promise.prototype:_unwrap()
	if self._status == Promise.Status.Started then
		error("Promise has not resolved or rejected.", 2)
	end

	local success = self._status == Promise.Status.Resolved

	return success, unpack(self._values, 1, self._valuesLength)
end

function Promise.prototype:_resolve(...)
	if self._status ~= Promise.Status.Started then
		if Promise.is((...)) then
			(...):_consumerCancelled(self)
		end
		return
	end

	-- If the resolved value was a Promise, we chain onto it!
	if Promise.is((...)) then
		-- Without this warning, arguments sometimes mysteriously disappear
		if select("#", ...) > 1 then
			local message = string.format(
				"When returning a Promise from andThen, extra arguments are " ..
				"discarded! See:\n\n%s",
				self._source
			)
			warn(message)
		end

		local chainedPromise = ...

		local promise = chainedPromise:andThen(
			function(...)
				self:_resolve(...)
			end,
			function(...)
				local maybeRuntimeError = chainedPromise._values[1]

				-- Backwards compatibility < v2
				if chainedPromise._error then
					maybeRuntimeError = Error.new({
						error = chainedPromise._error,
						kind = Error.Kind.ExecutionError,
						context = "[No stack trace available as this Promise originated from an older version of the Promise library (< v2)]",
					})
				end

				if Error.isKind(maybeRuntimeError, Error.Kind.ExecutionError) then
					return self:_reject(maybeRuntimeError:extend({
						error = "This Promise was chained to a Promise that errored.",
						trace = "",
						context = string.format(
							"The Promise at:\n\n%s\n...Rejected because it was chained to the following Promise, which encountered an error:\n",
							self._source
						),
					}))
				end

				self:_reject(...)
			end
		)

		if promise._status == Promise.Status.Cancelled then
			self:cancel()
		elseif promise._status == Promise.Status.Started then
			-- Adopt ourselves into promise for cancellation propagation.
			self._parent = promise
			promise._consumers[self] = true
		end

		return
	end

	self._status = Promise.Status.Resolved
	self._valuesLength, self._values = pack(...)

	-- We assume that these callbacks will not throw errors.
	for _, callback in ipairs(self._queuedResolve) do
		coroutine.wrap(callback)(...)
	end

	self:_finalize()
end

function Promise.prototype:_reject(...)
	if self._status ~= Promise.Status.Started then
		return
	end

	self._status = Promise.Status.Rejected
	self._valuesLength, self._values = pack(...)

	-- If there are any rejection handlers, call those!
	if not isEmpty(self._queuedReject) then
		-- We assume that these callbacks will not throw errors.
		for _, callback in ipairs(self._queuedReject) do
			coroutine.wrap(callback)(...)
		end
	else
		-- At this point, no one was able to observe the error.
		-- An error handler might still be attached if the error occurred
		-- synchronously. We'll wait one tick, and if there are still no
		-- observers, then we should put a message in the console.

		local err = tostring((...))

		coroutine.wrap(function()
			Promise._timeEvent:Wait()

			-- Someone observed the error, hooray!
			if not self._unhandledRejection then
				return
			end

			-- Build a reasonable message
			local message = string.format(
				"Unhandled Promise rejection:\n\n%s\n\n%s",
				err,
				self._source
			)

			if Promise.TEST then
				-- Don't spam output when we're running tests.
				return
			end

			warn(message)
		end)()
	end

	self:_finalize()
end

--[[
	Calls any :finally handlers. We need this to be a separate method and
	queue because we must call all of the finally callbacks upon a success,
	failure, *and* cancellation.
]]
function Promise.prototype:_finalize()
	for _, callback in ipairs(self._queuedFinally) do
		-- Purposefully not passing values to callbacks here, as it could be the
		-- resolved values, or rejected errors. If the developer needs the values,
		-- they should use :andThen or :catch explicitly.
		coroutine.wrap(callback)(self._status)
	end

	self._queuedFinally = nil
	self._queuedReject = nil
	self._queuedResolve = nil

	-- Clear references to other Promises to allow gc
	if not Promise.TEST then
		self._parent = nil
		self._consumers = nil
	end
end

--[[
	Chains a Promise from this one that is resolved if this Promise is
	resolved, and rejected if it is not resolved.
]]
function Promise.prototype:now(rejectionValue)
	local traceback = debug.traceback(nil, 2)
	if self._status == Promise.Status.Resolved then
		return self:_andThen(traceback, function(...)
			return ...
		end)
	else
		return Promise.reject(rejectionValue == nil and Error.new({
			kind = Error.Kind.NotResolvedInTime,
			error = "This Promise was not resolved in time for :now()",
			context = ":now() was called at:\n\n" .. traceback,
		}) or rejectionValue)
	end
end

--[[
	Retries a Promise-returning callback N times until it succeeds.
]]
function Promise.retry(callback, times, ...)
	assert(type(callback) == "function", "Parameter #1 to Promise.retry must be a function")
	assert(type(times) == "number", "Parameter #2 to Promise.retry must be a number")

	local args, length = {...}, select("#", ...)

	return Promise.resolve(callback(...)):catch(function(...)
		if times > 0 then
			return Promise.retry(callback, times - 1, unpack(args, 1, length))
		else
			return Promise.reject(...)
		end
	end)
end

--[[
	Converts an event into a Promise with an optional predicate
]]
function Promise.fromEvent(event, predicate)
	predicate = predicate or function()
		return true
	end

	return Promise._new(debug.traceback(nil, 2), function(resolve, _, onCancel)
		local connection
		local shouldDisconnect = false

		local function disconnect()
			connection:Disconnect()
			connection = nil
		end

		-- We use shouldDisconnect because if the callback given to Connect is called before
		-- Connect returns, connection will still be nil. This happens with events that queue up
		-- events when there's nothing connected, such as RemoteEvents

		connection = event:Connect(function(...)
			local callbackValue = predicate(...)

			if callbackValue == true then
				resolve(...)

				if connection then
					disconnect()
				else
					shouldDisconnect = true
				end
			elseif type(callbackValue) ~= "boolean" then
				error("Promise.fromEvent predicate should always return a boolean")
			end
		end)

		if shouldDisconnect and connection then
			return disconnect()
		end

		onCancel(disconnect)
	end)
end

return Promise
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBX82C61BD5DB51481CB8D735781E8F0C66">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Knit</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX440F578238FA439D9E0A633FE24096C6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Signal</string>
						<string name="ScriptGuid">{ECC086DB-C62F-48D9-8A06-B2A07A34A65B}</string>
						<ProtectedString name="Source"><![CDATA[--------------------------------------------------------------------------------
--               Batched Yield-Safe Signal Implementation                     --
-- This is a Signal class which has effectively identical behavior to a       --
-- normal RBXScriptSignal, with the only difference being a couple extra      --
-- stack frames at the bottom of the stack trace when an error is thrown.     --
-- This implementation caches runner coroutines, so the ability to yield in   --
-- the signal handlers comes at minimal extra cost over a naive signal        --
-- implementation that either always or never spawns a thread.                --
--                                                                            --
-- API:                                                                       --
--   local Signal = require(THIS MODULE)                                      --
--   local sig = Signal.new()                                                 --
--   local connection = sig:Connect(function(arg1, arg2, ...) ... end)        --
--   sig:Fire(arg1, arg2, ...)                                                --
--   connection:Disconnect()                                                  --
--   sig:DisconnectAll()                                                      --
--   local arg1, arg2, ... = sig:Wait()                                       --
--                                                                            --
-- Licence:                                                                   --
--   Licenced under the MIT licence.                                          --
--                                                                            --
-- Authors:                                                                   --
--   stravant - July 31st, 2021 - Created the file.                           --
--   sleitnick - August 3rd, 2021 - Modified for Knit.                        --
--------------------------------------------------------------------------------

-- The currently idle thread to run the next handler on
local freeRunnerThread = nil

-- Function which acquires the currently idle handler runner thread, runs the
-- function fn on it, and then releases the thread, returning it to being the
-- currently idle one.
-- If there was a currently idle runner thread already, that's okay, that old
-- one will just get thrown and eventually GCed.
local function acquireRunnerThreadAndCallEventHandler(fn, ...)
	local acquiredRunnerThread = freeRunnerThread
	freeRunnerThread = nil
	fn(...)
	-- The handler finished running, this runner thread is free again.
	freeRunnerThread = acquiredRunnerThread
end

-- Coroutine runner that we create coroutines of. The coroutine can be 
-- repeatedly resumed with functions to run followed by the argument to run
-- them with.
local function runEventHandlerInFreeThread(...)
	acquireRunnerThreadAndCallEventHandler(...)
	while true do
		acquireRunnerThreadAndCallEventHandler(coroutine.yield())
	end
end


-- Connection class
local Connection = {}
Connection.__index = Connection


function Connection.new(signal, fn)
	return setmetatable({
		_connected = true,
		_signal = signal,
		_fn = fn,
		_next = false,
	}, Connection)
end


function Connection:Disconnect()
	if not self._connected then return end
	self._connected = false

	-- Unhook the node, but DON'T clear it. That way any fire calls that are
	-- currently sitting on this node will be able to iterate forwards off of
	-- it, but any subsequent fire calls will not hit it, and it will be GCed
	-- when no more fire calls are sitting on it.
	if self._signal._handlerListHead == self then
		self._signal._handlerListHead = self._next
	else
		local prev = self._signal._handlerListHead
		while prev and prev._next ~= self do
			prev = prev._next
		end
		if prev then
			prev._next = self._next
		end
	end
end

Connection.Destroy = Connection.Disconnect

-- Make Connection strict
setmetatable(Connection, {
	__index = function(_tb, key)
		error(("Attempt to get Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end,
	__newindex = function(_tb, key, _value)
		error(("Attempt to set Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end
})


-- Signal class
local Signal = {}
Signal.__index = Signal


function Signal.new(janitor)
	local self = setmetatable({
		_handlerListHead = false,
		_proxyHandler = nil,
	}, Signal)
	if janitor then
		janitor:Add(self)
	end
	return self
end


function Signal.Wrap(rbxScriptSignal, janitor)
	assert(typeof(rbxScriptSignal) == "RBXScriptSignal", "Argument #1 to Signal.Wrap must be a RBXScriptSignal; got " .. typeof(rbxScriptSignal))
	local signal = Signal.new(janitor)
	signal._proxyHandler = rbxScriptSignal:Connect(function(...)
		signal:Fire(...)
	end)
	return signal
end


function Signal.Is(obj)
	return type(obj) == "table" and getmetatable(obj) == Signal
end


function Signal:Connect(fn)
	local connection = Connection.new(self, fn)
	if self._handlerListHead then
		connection._next = self._handlerListHead
		self._handlerListHead = connection
	else
		self._handlerListHead = connection
	end
	return connection
end


function Signal:GetConnections()
	local items = {}
	local item = self._handlerListHead
	while item do
		table.insert(items, item)
		item = item._next
	end
	return items
end


-- Disconnect all handlers. Since we use a linked list it suffices to clear the
-- reference to the head handler.
function Signal:DisconnectAll()
	self._handlerListHead = false
end


-- Signal:Fire(...) implemented by running the handler functions on the
-- coRunnerThread, and any time the resulting thread yielded without returning
-- to us, that means that it yielded to the Roblox scheduler and has been taken
-- over by Roblox scheduling, meaning we have to make a new coroutine runner.
function Signal:Fire(...)
	local item = self._handlerListHead
	while item do
		if item._connected then
			if not freeRunnerThread then
				freeRunnerThread = coroutine.create(runEventHandlerInFreeThread)
			end
			task.spawn(freeRunnerThread, item._fn, ...)
		end
		item = item._next
	end
end


-- Similar to Signal:Fire(...), but uses deferred. It does not reuse the
-- same coroutine like Fire.
function Signal:FireDeferred(...)
	local item = self._handlerListHead
	while item do
		task.defer(item._fn, ...)
		item = item._next
	end
end


-- Implement Signal:Wait() in terms of a temporary connection using
-- a Signal:Connect() which disconnects itself.
function Signal:Wait()
	local waitingCoroutine = coroutine.running()
	local cn
	cn = self:Connect(function(...)
		cn:Disconnect()
		task.spawn(waitingCoroutine, ...)
	end)
	return coroutine.yield()
end


function Signal:Destroy()
	self:DisconnectAll()
	local proxyHandler = rawget(self, "_proxyHandler")
	if proxyHandler then
		proxyHandler:Disconnect()
	end
end


-- Make signal strict
setmetatable(Signal, {
	__index = function(_tb, key)
		error(("Attempt to get Signal::%s (not a valid member)"):format(tostring(key)), 2)
	end,
	__newindex = function(_tb, key, _value)
		error(("Attempt to set Signal::%s (not a valid member)"):format(tostring(key)), 2)
	end
})

return Signal
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX7C3C6A19ABEC4DD2841A92D2191E5178">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Roact</string>
					<string name="ScriptGuid">{4FC8D24C-A345-4145-8EE6-213DF3125F36}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Packages up the internals of Roact and exposes a public API for it.
]]

local GlobalConfig = require(script.GlobalConfig)
local createReconciler = require(script.createReconciler)
local createReconcilerCompat = require(script.createReconcilerCompat)
local RobloxRenderer = require(script.RobloxRenderer)
local strict = require(script.strict)
local Binding = require(script.Binding)

local robloxReconciler = createReconciler(RobloxRenderer)
local reconcilerCompat = createReconcilerCompat(robloxReconciler)

local Roact = strict {
	Component = require(script.Component),
	createElement = require(script.createElement),
	createFragment = require(script.createFragment),
	oneChild = require(script.oneChild),
	PureComponent = require(script.PureComponent),
	None = require(script.None),
	Portal = require(script.Portal),
	createRef = require(script.createRef),
	forwardRef = require(script.forwardRef),
	createBinding = Binding.create,
	joinBindings = Binding.join,
	createContext = require(script.createContext),

	Change = require(script.PropMarkers.Change),
	Children = require(script.PropMarkers.Children),
	Event = require(script.PropMarkers.Event),
	Ref = require(script.PropMarkers.Ref),

	mount = robloxReconciler.mountVirtualTree,
	unmount = robloxReconciler.unmountVirtualTree,
	update = robloxReconciler.updateVirtualTree,

	reify = reconcilerCompat.reify,
	teardown = reconcilerCompat.teardown,
	reconcile = reconcilerCompat.reconcile,

	setGlobalConfig = GlobalConfig.set,

	-- APIs that may change in the future without warning
	UNSTABLE = {
	},
}

return Roact]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXA399EB38FE204AE5A891A94DC4C1DCAC">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">strict.spec</string>
						<string name="ScriptGuid">{27F2F0E0-74D6-4185-AAB5-95990B5DB8C4}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local strict = require(script.Parent.strict)

	it("should error when getting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			return t.c
		end).to.throw()
	end)

	it("should error when setting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			t.c = 3
		end).to.throw()
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXFC766512472945529CC193FF0B45912C">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">strict</string>
						<string name="ScriptGuid">{E8B0C856-6774-46B0-8027-FB79283C674C}</string>
						<ProtectedString name="Source"><![CDATA[local function strict(t, name)
	name = name or tostring(t)

	return setmetatable(t, {
		__index = function(self, key)
			local message = ("%q (%s) is not a valid member of %s"):format(
				tostring(key),
				typeof(key),
				name
			)

			error(message, 2)
		end,

		__newindex = function(self, key, value)
			local message = ("%q (%s) is not a valid member of %s"):format(
				tostring(key),
				typeof(key),
				name
			)

			error(message, 2)
		end,
	})
end

return strict]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX689D0B5E8BBE45DABBD964431AC8B206">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">oneChild.spec</string>
						<string name="ScriptGuid">{EFC9E60A-075D-4252-B1A3-4E2B9FD97C1C}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)

	local oneChild = require(script.Parent.oneChild)

	it("should get zero children from a table", function()
		local children = {}

		expect(oneChild(children)).to.equal(nil)
	end)

	it("should get exactly one child", function()
		local child = createElement("Frame")
		local children = {
			foo = child,
		}

		expect(oneChild(children)).to.equal(child)
	end)

	it("should error with more than one child", function()
		local children = {
			a = createElement("Frame"),
			b = createElement("Frame"),
		}

		expect(function()
			oneChild(children)
		end).to.throw()
	end)

	it("should handle being passed nil", function()
		expect(oneChild(nil)).to.equal(nil)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX13F88C3E4A2F4A0CAE5E576282ABB3EA">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">oneChild</string>
						<string name="ScriptGuid">{74342F1A-76F7-4A4D-82E3-27D99E4A2D3A}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Retrieves at most one child from the children passed to a component.

	If passed nil or an empty table, will return nil.

	Throws an error if passed more than one child.
]]
local function oneChild(children)
	if not children then
		return nil
	end

	local key, child = next(children)

	if not child then
		return nil
	end

	local after = next(children, key)

	if after then
		error("Expected at most child, had more than one child.", 2)
	end

	return child
end

return oneChild]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXA2113C26338746EAA7CB7F82F371BE98">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">invalidSetStateMessages</string>
						<string name="ScriptGuid">{6DD69769-FDD0-4D3D-BD17-629615D9F39C}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	These messages are used by Component to help users diagnose when they're
	calling setState in inappropriate places.

	The indentation may seem odd, but it's necessary to avoid introducing extra
	whitespace into the error messages themselves.
]]
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)

local invalidSetStateMessages = {}

invalidSetStateMessages[ComponentLifecyclePhase.WillUpdate] = [[
setState cannot be used in the willUpdate lifecycle method.
Consider using the didUpdate method instead, or using getDerivedStateFromProps.

Check the definition of willUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.WillUnmount] = [[
setState cannot be used in the willUnmount lifecycle method.
A component that is being unmounted cannot be updated!

Check the definition of willUnmount in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.ShouldUpdate] = [[
setState cannot be used in the shouldUpdate lifecycle method.
shouldUpdate must be a pure function that only depends on props and state.

Check the definition of shouldUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.Render] = [[
setState cannot be used in the render method.
render must be a pure function that only depends on props and state.

Check the definition of render in the component %q.]]

invalidSetStateMessages["default"] = [[
setState can not be used in the current situation, because Roact doesn't know
which part of the lifecycle this component is in.

This is a bug in Roact.
It was triggered by the component %q.
]]

return invalidSetStateMessages]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX2170A6F65647421B93E3F8FD3A1DBBA8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">internalAssert</string>
						<string name="ScriptGuid">{69903713-62F7-45EE-A798-F5486E6DE3EC}</string>
						<ProtectedString name="Source"><![CDATA[local function internalAssert(condition, message)
	if not condition then
		error(message .. " (This is probably a bug in Roact!)", 3)
	end
end

return internalAssert]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8D113D5483404E4A9FCD68C375416888">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">init.spec</string>
						<string name="ScriptGuid">{4F161F38-725C-4FDD-B76F-96EDD4B7CD37}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Roact = require(script.Parent)

	it("should load with all public APIs", function()
		local publicApi = {
			createElement = "function",
			createFragment = "function",
			createRef = "function",
			forwardRef = "function",
			createBinding = "function",
			joinBindings = "function",
			mount = "function",
			unmount = "function",
			update = "function",
			oneChild = "function",
			setGlobalConfig = "function",
			createContext = "function",

			-- These functions are deprecated and throw warnings!
			reify = "function",
			teardown = "function",
			reconcile = "function",

			Component = true,
			PureComponent = true,
			Portal = true,
			Children = true,
			Event = true,
			Change = true,
			Ref = true,
			None = true,
			UNSTABLE = true,
		}

		expect(Roact).to.be.ok()

		for key, valueType in pairs(publicApi) do
			local success
			if typeof(valueType) == "string" then
				success = typeof(Roact[key]) == valueType
			else
				success = Roact[key] ~= nil
			end

			if not success then
				local existence = typeof(valueType) == "boolean" and "present" or "of type " .. valueType
				local message = (
					"Expected public API member %q to be %s, but instead it was of type %s"
				):format(tostring(key), existence, typeof(Roact[key]))

				error(message)
			end
		end

		for key in pairs(Roact) do
			if publicApi[key] == nil then
				local message = (
					"Found unknown public API key %q!"
				):format(tostring(key))

				error(message)
			end
		end
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX71EE0ED17E8244709135A479DC7B9D05">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">getDefaultInstanceProperty.spec</string>
						<string name="ScriptGuid">{14B86550-BA5A-46C4-813A-534A2AC3528F}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)

	it("should get default name string values", function()
		local _, defaultName = getDefaultInstanceProperty("StringValue", "Name")

		expect(defaultName).to.equal("Value")
	end)

	it("should get default empty string values", function()
		local _, defaultValue = getDefaultInstanceProperty("StringValue", "Value")

		expect(defaultValue).to.equal("")
	end)

	it("should get default number values", function()
		local _, defaultValue = getDefaultInstanceProperty("IntValue", "Value")

		expect(defaultValue).to.equal(0)
	end)

	it("should get nil default values", function()
		local _, defaultValue = getDefaultInstanceProperty("ObjectValue", "Value")

		expect(defaultValue).to.equal(nil)
	end)

	it("should get bool default values", function()
		local _, defaultValue = getDefaultInstanceProperty("BoolValue", "Value")

		expect(defaultValue).to.equal(false)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8C6F211D4F9641CD96848FB7775D5776">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">getDefaultInstanceProperty</string>
						<string name="ScriptGuid">{EC214F12-636E-47C9-9131-9EB14EB5D247}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Attempts to get the default value of a given property on a Roblox instance.

	This is used by the reconciler in cases where a prop was previously set on a
	primitive component, but is no longer present in a component's new props.

	Eventually, Roblox might provide a nicer API to query the default property
	of an object without constructing an instance of it.
]]

local Symbol = require(script.Parent.Symbol)

local Nil = Symbol.named("Nil")
local _cachedPropertyValues = {}

local function getDefaultInstanceProperty(className, propertyName)
	local classCache = _cachedPropertyValues[className]

	if classCache then
		local propValue = classCache[propertyName]

		-- We have to use a marker here, because Lua doesn't distinguish
		-- between 'nil' and 'not in a table'
		if propValue == Nil then
			return true, nil
		end

		if propValue ~= nil then
			return true, propValue
		end
	else
		classCache = {}
		_cachedPropertyValues[className] = classCache
	end

	local created = Instance.new(className)
	local ok, defaultValue = pcall(function()
		return created[propertyName]
	end)

	created:Destroy()

	if ok then
		if defaultValue == nil then
			classCache[propertyName] = Nil
		else
			classCache[propertyName] = defaultValue
		end
	end

	return ok, defaultValue
end

return getDefaultInstanceProperty]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX1D5C508FCEE741A1A8C1AC334610E3E9">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">forwardRef.spec</string>
						<string name="ScriptGuid">{5AC89A2B-D1D4-4F18-A792-35209B0D935F}</string>
						<ProtectedString name="Source"><![CDATA[-- Tests loosely adapted from those found at:
-- * https://github.com/facebook/react/blob/v17.0.1/packages/react/src/__tests__/forwardRef-test.js
-- * https://github.com/facebook/react/blob/v17.0.1/packages/react/src/__tests__/forwardRef-test.internal.js
return function()
	local assign = require(script.Parent.assign)
	local createElement = require(script.Parent.createElement)
	local createRef = require(script.Parent.createRef)
	local forwardRef = require(script.Parent.forwardRef)
	local createReconciler = require(script.Parent.createReconciler)
	local Component = require(script.Parent.Component)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Ref = require(script.Parent.PropMarkers.Ref)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)

	local reconciler = createReconciler(RobloxRenderer)

	it("should update refs when switching between children", function()
		local function FunctionComponent(props)
			local forwardedRef = props.forwardedRef
			local setRefOnDiv = props.setRefOnDiv
			-- deviation: clearer to express this way, since we don't have real
			-- ternaries
			local firstRef, secondRef
			if setRefOnDiv then
				firstRef = forwardedRef
			else
				secondRef = forwardedRef
			end
			return createElement("Frame", nil, {
				First = createElement("Frame", {
					[Ref] = firstRef
				}, {
					Child = createElement("TextLabel", {
						Text = "First"
					})
				}),
				Second = createElement("ScrollingFrame", {
					[Ref] = secondRef
				}, {
					Child = createElement("TextLabel", {
						Text = "Second"
					})
				})
			})
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(FunctionComponent, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			setRefOnDiv = true,
		})
		local tree = reconciler.mountVirtualTree(element, nil, "switch refs")
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)

		element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			setRefOnDiv = false,
		})
		tree = reconciler.mountVirtualTree(element, nil, "switch refs")
		expect(ref.current.ClassName).to.equal("ScrollingFrame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should support rendering nil", function()
		local RefForwardingComponent = forwardRef(function(props, ref)
			return nil
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, { [Ref] = ref })
		local tree = reconciler.mountVirtualTree(element, nil, "nil ref")
		expect(ref.current).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)

	it("should support rendering nil for multiple children", function()
		local RefForwardingComponent = forwardRef(function(props, ref)
			return nil
		end)

		local ref = createRef()

		local element = createElement("Frame", nil, {
			NoRef1 = createElement("Frame"),
			WithRef = createElement(RefForwardingComponent, { [Ref] = ref }),
			NoRef2 = createElement("Frame"),
		})
		local tree = reconciler.mountVirtualTree(element, nil, "multiple children nil ref")
		expect(ref.current).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)

	-- We could support this by having forwardRef return a stateful component,
	-- but it's likely not necessary
	itSKIP("should support defaultProps", function()
		local function FunctionComponent(props)
			local forwardedRef = props.forwardedRef
			local optional = props.optional
			local required = props.required
			return createElement("Frame", {
				[Ref] = forwardedRef,
			}, {
				OptionalChild = optional,
				RequiredChild = required,
			})
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(FunctionComponent, assign({}, props, {
				forwardedRef = ref
			 }))
		end)
		RefForwardingComponent.defaultProps = {
			optional = createElement("TextLabel"),
		}

		local ref = createRef()

		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			optional = createElement("Frame"),
			required = createElement("ScrollingFrame"),
		})

		local tree = reconciler.mountVirtualTree(element, nil, "with optional")

		expect(ref.current:FindFirstChild("OptionalChild").ClassName).to.equal("Frame")
		expect(ref.current:FindFirstChild("RequiredChild").ClassName).to.equal("ScrollingFrame")

		reconciler.unmountVirtualTree(tree)
		element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			required = createElement("ScrollingFrame"),
		})
		tree = reconciler.mountVirtualTree(element, nil, "with default")

		expect(ref.current:FindFirstChild("OptionalChild").ClassName).to.equal("TextLabel")
		expect(ref.current:FindFirstChild("RequiredChild").ClassName).to.equal("ScrollingFrame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should error if not provided a callback when type checking is enabled", function()
		GlobalConfig.scoped({
			typeChecks = true,
		}, function()
			expect(function()
				forwardRef(nil)
			end).to.throw()
		end)

		GlobalConfig.scoped({
			typeChecks = true,
		}, function()
			expect(function()
				forwardRef("foo")
			end).to.throw()
		end)
	end)

	it("should work without a ref to be forwarded", function()
		local function Child()
			return nil
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local element = createElement(RefForwardingComponent, { value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "nil ref")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should forward a ref for a single child", function()
		local value
		local function Child(props)
			value = props.value
			return createElement("Frame", {
				[Ref] = props[Ref]
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, { [Ref] = ref, value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "single child ref")
		expect(value).to.equal(123)
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should forward a ref for multiple children", function()
		local function Child(props)
			return createElement("Frame", {
				[Ref] = props[Ref]
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement("Frame", nil, {
			NoRef1 = createElement("Frame"),
			WithRef = createElement(RefForwardingComponent, { [Ref] = ref }),
			NoRef2 = createElement("Frame"),
		})
		local tree = reconciler.mountVirtualTree(element, nil, "multi child ref")
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should maintain child instance and ref through updates", function()
		local value
		local function Child(props)
			value = props.value
			return createElement("Frame", {
				[Ref] = props[Ref]
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local setRefCount = 0
		local refValue

		local setRef = function(r)
			setRefCount = setRefCount + 1
			refValue = r
		end

		local element = createElement(RefForwardingComponent, { [Ref] = setRef, value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "maintains instance")

		expect(value).to.equal(123)
		expect(refValue.ClassName).to.equal("Frame")
		expect(setRefCount).to.equal(1)

		element = createElement(RefForwardingComponent, { [Ref] = setRef, value = 456 })
		tree = reconciler.updateVirtualTree(tree, element)

		expect(value).to.equal(456)
		expect(setRefCount).to.equal(1)
		reconciler.unmountVirtualTree(tree)
	end)

	it("should not re-run the render callback on a deep setState", function()
		local inst
		local renders = {}

		local Inner = Component:extend("Inner")
		function Inner:render()
			table.insert(renders, "Inner")
			inst = self
			return createElement("Frame", { [Ref] = self.props.forwardedRef })
		end

		local function Middle(props)
			table.insert(renders, "Middle")
			return createElement(Inner, props)
		end

		local Forward = forwardRef(function(props, ref)
			table.insert(renders, "Forward")
			return createElement(Middle, assign({}, props, { forwardedRef = ref }))
		end)

		local function App()
			table.insert(renders, "App")
			return createElement(Forward)
		end

		local tree = reconciler.mountVirtualTree(createElement(App), nil, "deep setState")
		expect(#renders).to.equal(4)
		expect(renders[1]).to.equal("App")
		expect(renders[2]).to.equal("Forward")
		expect(renders[3]).to.equal("Middle")
		expect(renders[4]).to.equal("Inner")

		renders = {}
		inst:setState({})
		expect(#renders).to.equal(1)
		expect(renders[1]).to.equal("Inner")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should not include the ref in the forwarded props", function()
		local capturedProps
		local function CaptureProps(props)
			capturedProps = props
			return createElement("Frame", { [Ref] = props.forwardedRef })
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(CaptureProps, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()
		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
		})

		local tree = reconciler.mountVirtualTree(element, nil, "no ref in props")
		expect(capturedProps).to.be.ok()
		expect(capturedProps.forwardedRef).to.equal(ref)
		expect(capturedProps[Ref]).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX2B947D5A485441C4A2B984A45A385897">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">forwardRef</string>
						<string name="ScriptGuid">{02BFE9E3-AA5B-44B2-96D8-726074C3FBCD}</string>
						<ProtectedString name="Source"><![CDATA[local assign = require(script.Parent.assign)
local None = require(script.Parent.None)
local Ref = require(script.Parent.PropMarkers.Ref)

local config = require(script.Parent.GlobalConfig).get()

local excludeRef = {
	[Ref] = None,
}

--[[
	Allows forwarding of refs to underlying host components. Accepts a render
	callback which accepts props and a ref, and returns an element.
]]
local function forwardRef(render)
	if config.typeChecks then
		assert(typeof(render) == "function", "Expected arg #1 to be a function")
	end

	return function(props)
		local ref = props[Ref]
		local propsWithoutRef = assign({}, props, excludeRef)

		return render(propsWithoutRef, ref)
	end
end

return forwardRef]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX690CF5FBC86B4C70B39FA45C3DD92029">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createSpy.spec</string>
						<string name="ScriptGuid">{46F2E824-32C7-4C92-8F8D-AD779A457388}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createSpy = require(script.Parent.createSpy)

	describe("createSpy", function()
		it("should create spies", function()
			local spy = createSpy(function() end)

			expect(spy).to.be.ok()
		end)

		it("should throw if spies are indexed by an invalid key", function()
			local spy = createSpy(function() end)

			expect(function()
				return spy.test
			end).to.throw()
		end)
	end)

	describe("value", function()
		it("should increment callCount when called", function()
			local spy = createSpy(function() end)
			spy.value()

			expect(spy.callCount).to.equal(1)
		end)

		it("should store all values passed", function()
			local spy = createSpy(function() end)
			spy.value(1, true, "3")

			expect(spy.valuesLength).to.equal(3)
			expect(spy.values[1]).to.equal(1)
			expect(spy.values[2]).to.equal(true)
			expect(spy.values[3]).to.equal("3")
		end)

		it("should return the value of the inner function", function()
			local spy = createSpy(function()
				return true
			end)

			expect(spy.value()).to.equal(true)
		end)
	end)

	describe("assertCalledWith", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1)
			end).to.throw()
		end)

		it("should throw if any value differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1, 3)
			end).to.throw()

			expect(function()
				spy:assertCalledWith(2, 3)
			end).to.throw()
		end)
	end)

	describe("captureValues", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:captureValues("a")
			end).to.throw()
		end)

		it("should capture all values in a table", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			local captured = spy:captureValues("a", "b")
			expect(captured.a).to.equal(1)
			expect(captured.b).to.equal(2)
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX5C6076262C434ACF87D7CF98954BA244">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createSpy</string>
						<string name="ScriptGuid">{24281056-6891-4CAB-9F03-5D64A038CDEB}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A utility used to create a function spy that can be used to robustly test
	that functions are invoked the correct number of times and with the correct
	number of arguments.

	This should only be used in tests.
]]

local assertDeepEqual = require(script.Parent.assertDeepEqual)

local function createSpy(inner)
	local self = {
		callCount = 0,
		values = {},
		valuesLength = 0,
	}

	self.value = function(...)
		self.callCount = self.callCount + 1
		self.values = {...}
		self.valuesLength = select("#", ...)

		if inner ~= nil then
			return inner(...)
		end
	end

	self.assertCalledWith = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(
				self.valuesLength,
				len
			), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assert(self.values[i] == expected, "value differs")
		end
	end

	self.assertCalledWithDeepEqual = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(
				self.valuesLength,
				len
			), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assertDeepEqual(self.values[i], expected)
		end
	end

	self.captureValues = function(_, ...)
		local len = select("#", ...)
		local result = {}

		assert(self.valuesLength == len, "length of expected values differs from stored values")

		for i = 1, len do
			local key = select(i, ...)
			result[key] = self.values[i]
		end

		return result
	end

	setmetatable(self, {
		__index = function(_, key)
			error(("%q is not a valid member of spy"):format(key))
		end,
	})

	return self
end

return createSpy]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXA72BA5B29B444FA9A98B2B3D65077965">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createSignal.spec</string>
						<string name="ScriptGuid">{DF9F162E-900F-405B-AFA7-0327A15DD8A7}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createSignal = require(script.Parent.createSignal)

	local createSpy = require(script.Parent.createSpy)

	it("should fire subscribers and disconnect them", function()
		local signal = createSignal()

		local spy = createSpy()
		local disconnect = signal:subscribe(spy.value)

		expect(spy.callCount).to.equal(0)

		local a = 1
		local b = {}
		local c = "hello"
		signal:fire(a, b, c)

		expect(spy.callCount).to.equal(1)
		spy:assertCalledWith(a, b, c)

		disconnect()

		signal:fire()

		expect(spy.callCount).to.equal(1)
	end)

	it("should handle multiple subscribers", function()
		local signal = createSignal()

		local spyA = createSpy()
		local spyB = createSpy()

		local disconnectA = signal:subscribe(spyA.value)
		local disconnectB = signal:subscribe(spyB.value)

		expect(spyA.callCount).to.equal(0)
		expect(spyB.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(a, b)

		expect(spyB.callCount).to.equal(1)
		spyB:assertCalledWith(a, b)

		disconnectA()

		signal:fire(b, a)

		expect(spyA.callCount).to.equal(1)

		expect(spyB.callCount).to.equal(2)
		spyB:assertCalledWith(b, a)

		disconnectB()
	end)

	it("should stop firing a connection if disconnected mid-fire", function()
		local signal = createSignal()

		-- In this test, we'll connect two listeners that each try to disconnect
		-- the other. Because the order of listeners firing isn't defined, we
		-- have to be careful to handle either case.

		local disconnectA
		local disconnectB

		local spyA = createSpy(function()
			disconnectB()
		end)

		local spyB = createSpy(function()
			disconnectA()
		end)

		disconnectA = signal:subscribe(spyA.value)
		disconnectB = signal:subscribe(spyB.value)

		signal:fire()

		-- Exactly once listener should have been called.
		expect(spyA.callCount + spyB.callCount).to.equal(1)
	end)

	it("should allow adding listener in the middle of firing", function()
		local signal = createSignal()

		local disconnectA
		local spyA = createSpy()
		local listener = function(a, b)
			disconnectA = signal:subscribe(spyA.value)
		end

		local disconnectListener = signal:subscribe(listener)

		expect(spyA.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(0)

		-- The new listener should be picked up in next fire.
		signal:fire(b, a)
		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(b, a)

		disconnectA()
		disconnectListener()

		signal:fire(a)

		expect(spyA.callCount).to.equal(1)
	end)

	it("should have one connection instance when add the same listener multiple times", function()
		local signal = createSignal()

		local spyA = createSpy()
		local disconnect1 = signal:subscribe(spyA.value)

		expect(spyA.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(a, b)

		local disconnect2 = signal:subscribe(spyA.value)

		signal:fire(b, a)
		expect(spyA.callCount).to.equal(2)
		spyA:assertCalledWith(b, a)

		disconnect2()

		signal:fire(a)

		expect(spyA.callCount).to.equal(2)

		-- should have no effect.
		disconnect1()
		signal:fire(a)
		expect(spyA.callCount).to.equal(2)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX3DE28A391E8E49EAAC05197B583B0E87">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createSignal</string>
						<string name="ScriptGuid">{F54ABC5B-2192-4A71-9070-5FEC99CE1868}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	This is a simple signal implementation that has a dead-simple API.

		local signal = createSignal()

		local disconnect = signal:subscribe(function(foo)
			print("Cool foo:", foo)
		end)

		signal:fire("something")

		disconnect()
]]

local function createSignal()
	local connections = {}
	local suspendedConnections = {}
	local firing = false

	local function subscribe(self, callback)
		assert(typeof(callback) == "function", "Can only subscribe to signals with a function.")

		local connection = {
			callback = callback,
			disconnected = false,
		}

		-- If the callback is already registered, don't add to the suspendedConnection. Otherwise, this will disable
		-- the existing one.
		if firing and not connections[callback] then
			suspendedConnections[callback] = connection
		end

		connections[callback] = connection

		local function disconnect()
			assert(not connection.disconnected, "Listeners can only be disconnected once.")

			connection.disconnected = true
			connections[callback] = nil
			suspendedConnections[callback] = nil
		end

		return disconnect
	end

	local function fire(self, ...)
		firing = true
		for callback, connection in pairs(connections) do
			if not connection.disconnected and not suspendedConnections[callback] then
				callback(...)
			end
		end

		firing = false

		for callback, _ in pairs(suspendedConnections) do
			suspendedConnections[callback] = nil
		end
	end

	return {
		subscribe = subscribe,
		fire = fire,
	}
end

return createSignal
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX6A86A11EBC5F4E51A4791AEE9FCB73E9">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createRef.spec</string>
						<string name="ScriptGuid">{8E3AF7EF-4935-4AB3-9816-85CD34582104}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Binding = require(script.Parent.Binding)
	local Type = require(script.Parent.Type)

	local createRef = require(script.Parent.createRef)

	it("should create refs, which are specialized bindings", function()
		local ref = createRef()

		expect(Type.of(ref)).to.equal(Type.Binding)
		expect(ref.current).to.equal(nil)
	end)

	it("should have a 'current' field that is the same as the internal binding's value", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 10)
		expect(ref.current).to.equal(10)
	end)

	it("should support tostring on refs", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)
		expect(tostring(ref)).to.equal("RoactRef(nil)")

		Binding.update(ref, 10)
		expect(tostring(ref)).to.equal("RoactRef(10)")
	end)

	it("should not allow assignments to the 'current' field", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 99)
		expect(ref.current).to.equal(99)

		expect(function()
			ref.current = 77
		end).to.throw()

		expect(ref.current).to.equal(99)
	end)

	it("should return the same thing from getValue as its current field", function()
		local ref = createRef()
		Binding.update(ref, 10)

		expect(ref:getValue()).to.equal(10)
		expect(ref:getValue()).to.equal(ref.current)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXE526FFF54B6F441BA28256ECF19CEA0D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createRef</string>
						<string name="ScriptGuid">{CC63F694-DD4F-4D40-B592-3DB86DFF8773}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A ref is nothing more than a binding with a special field 'current'
	that maps to the getValue method of the binding
]]
local Binding = require(script.Parent.Binding)

local function createRef()
	local binding, _ = Binding.create(nil)

	local ref = {}

	--[[
		A ref is just redirected to a binding via its metatable
	]]
	setmetatable(ref, {
		__index = function(self, key)
			if key == "current" then
				return binding:getValue()
			else
				return binding[key]
			end
		end,
		__newindex = function(self, key, value)
			if key == "current" then
				error("Cannot assign to the 'current' property of refs", 2)
			end

			binding[key] = value
		end,
		__tostring = function(self)
			return ("RoactRef(%s)"):format(tostring(binding:getValue()))
		end,
	})

	return ref
end

return createRef]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX2828856524C6421CB46A032D20C2F392">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createReconcilerCompat.spec</string>
						<string name="ScriptGuid">{9E4AA70E-D764-4430-9E19-B0F8862F663C}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)
	local createReconciler = require(script.Parent.createReconciler)
	local Logging = require(script.Parent.Logging)
	local NoopRenderer = require(script.Parent.NoopRenderer)

	local createReconcilerCompat = require(script.Parent.createReconcilerCompat)

	local noopReconciler = createReconciler(NoopRenderer)
	local compatReconciler = createReconcilerCompat(noopReconciler)

	it("reify should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = compatReconciler.reify(createElement("StringValue"))
				noopReconciler.unmountVirtualTree(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = compatReconciler.reify(createElement("StringValue"))
			noopReconciler.unmountVirtualTree(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()
	end)

	it("teardown should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
				compatReconciler.teardown(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
			compatReconciler.teardown(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()
	end)

	it("update should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
				compatReconciler.reconcile(handle, createElement("StringValue"))
				noopReconciler.unmountVirtualTree(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
			compatReconciler.reconcile(handle, createElement("StringValue"))
			noopReconciler.unmountVirtualTree(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX67DD190C07F5407BBBF95C86B31B852C">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createReconcilerCompat</string>
						<string name="ScriptGuid">{31253AB8-48F8-4F15-A29B-60BA41FDD153}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Contains deprecated methods from Reconciler. Broken out so that removing
	this shim is easy -- just delete this file and remove it from init.
]]

local Logging = require(script.Parent.Logging)

local reifyMessage = [[
Roact.reify has been renamed to Roact.mount and will be removed in a future release.
Check the call to Roact.reify at:
]]

local teardownMessage = [[
Roact.teardown has been renamed to Roact.unmount and will be removed in a future release.
Check the call to Roact.teardown at:
]]

local reconcileMessage = [[
Roact.reconcile has been renamed to Roact.update and will be removed in a future release.
Check the call to Roact.reconcile at:
]]

local function createReconcilerCompat(reconciler)
	local compat = {}

	function compat.reify(...)
		Logging.warnOnce(reifyMessage)

		return reconciler.mountVirtualTree(...)
	end

	function compat.teardown(...)
		Logging.warnOnce(teardownMessage)

		return reconciler.unmountVirtualTree(...)
	end

	function compat.reconcile(...)
		Logging.warnOnce(reconcileMessage)

		return reconciler.updateVirtualTree(...)
	end

	return compat
end

return createReconcilerCompat]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXCDFBCBE467DD454D9937E39F767ED0EE">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createReconciler.spec</string>
						<string name="ScriptGuid">{FE963C04-B76C-484A-8F83-1CD2BDCE77D6}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assign = require(script.Parent.assign)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createSpy = require(script.Parent.createSpy)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local Type = require(script.Parent.Type)
	local ElementKind = require(script.Parent.ElementKind)

	local createReconciler = require(script.Parent.createReconciler)

	local noopReconciler = createReconciler(NoopRenderer)

	describe("tree operations", function()
		it("should mount and unmount", function()
			local tree = noopReconciler.mountVirtualTree(createElement("StringValue"))

			expect(tree).to.be.ok()

			noopReconciler.unmountVirtualTree(tree)
		end)

		it("should mount, update, and unmount", function()
			local tree = noopReconciler.mountVirtualTree(createElement("StringValue"))

			expect(tree).to.be.ok()

			noopReconciler.updateVirtualTree(tree, createElement("StringValue"))

			noopReconciler.unmountVirtualTree(tree)
		end)
	end)

	describe("booleans", function()
		it("should mount booleans as nil", function()
			local node = noopReconciler.mountVirtualNode(false, nil, "test")
			expect(node).to.equal(nil)
		end)

		it("should unmount nodes if they are updated to a boolean value", function()
			local node = noopReconciler.mountVirtualNode(createElement("StringValue"), nil, "test")

			expect(node).to.be.ok()

			node = noopReconciler.updateVirtualNode(node, true)

			expect(node).to.equal(nil)
		end)
	end)

	describe("invalid elements", function()
		it("should throw errors when attempting to mount invalid elements", function()
			-- These function components return values with incorrect types
			local returnsString = function()
				return "Hello"
			end
			local returnsNumber = function()
				return 1
			end
			local returnsFunction = function()
				return function() end
			end
			local returnsTable = function()
				return {}
			end

			local hostParent = nil
			local key = "Some Key"

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsString), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsNumber), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsFunction), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsTable), hostParent, key)
			end).to.throw()
		end)
	end)

	describe("Host components", function()
		it("should invoke the renderer to mount host nodes", function()
			local mountHostNode = createSpy(NoopRenderer.mountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = mountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(mountHostNode.callCount).to.equal(1)

			local values = mountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)

		it("should invoke the renderer to update host nodes", function()
			local updateHostNode = createSpy(NoopRenderer.updateHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				updateHostNode = updateHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			local newElement = createElement("StringValue")
			local newNode = reconciler.updateVirtualNode(node, newElement)

			expect(newNode).to.equal(node)

			expect(updateHostNode.callCount).to.equal(1)

			local values = updateHostNode:captureValues("reconciler", "node", "newElement")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
			expect(values.newElement).to.equal(newElement)
		end)

		it("should invoke the renderer to unmount host nodes", function()
			local unmountHostNode = createSpy(NoopRenderer.unmountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				unmountHostNode = unmountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			reconciler.unmountVirtualNode(node)

			expect(unmountHostNode.callCount).to.equal(1)

			local values = unmountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)
	end)

	describe("Function components", function()
		it("should mount and unmount function components", function()
			local componentSpy = createSpy(function(props)
				return nil
			end)

			local element = createElement(componentSpy.value, {
				someValue = 5,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(componentSpy.callCount).to.equal(1)

			local calledWith = componentSpy:captureValues("props")

			expect(calledWith.props).to.be.a("table")
			expect(calledWith.props.someValue).to.equal(5)

			noopReconciler.unmountVirtualNode(node)

			expect(componentSpy.callCount).to.equal(1)
		end)

		it("should mount single children of function components", function()
			local childComponentSpy = createSpy(function(props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createElement(childComponentSpy.value, {
					value = props.value + 1,
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 13,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childCalledWith = childComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(13)

			expect(childCalledWith.props).to.be.a("table")
			expect(childCalledWith.props.value).to.equal(14)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)
		end)

		it("should mount fragments returned by function components", function()
			local childAComponentSpy = createSpy(function(props)
				return nil
			end)

			local childBComponentSpy = createSpy(function(props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createFragment({
					A = createElement(childAComponentSpy.value, {
						value = props.value + 1,
					}),
					B = createElement(childBComponentSpy.value, {
						value = props.value + 5,
					}),
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 17,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childACalledWith = childAComponentSpy:captureValues("props")
			local childBCalledWith = childBComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(17)

			expect(childACalledWith.props).to.be.a("table")
			expect(childACalledWith.props.value).to.equal(18)

			expect(childBCalledWith.props).to.be.a("table")
			expect(childBCalledWith.props.value).to.equal(22)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)
		end)
	end)

	describe("Fragments", function()
		it("should mount fragments", function()
			local fragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(fragment, nil, "test")

			expect(node).to.be.ok()
			expect(ElementKind.of(node.currentElement)).to.equal(ElementKind.Fragment)
		end)

		it("should mount an empty fragment", function()
			local emptyFragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(emptyFragment, nil, "test")

			expect(node).to.be.ok()
			expect(next(node.children)).to.never.be.ok()
		end)

		it("should mount all fragment's children", function()
			local childComponentSpy = createSpy(function(props)
				return nil
			end)
			local elements = {}
			local totalElements = 5

			for i=1, totalElements do
				elements["key"..tostring(i)] = createElement(childComponentSpy.value, {})
			end

			local fragments = createFragment(elements)
			local node = noopReconciler.mountVirtualNode(fragments, nil, "test")

			expect(node).to.be.ok()
			expect(childComponentSpy.callCount).to.equal(totalElements)
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXB3D807E3282549CC9CC0D03B9E884613">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createReconciler</string>
						<string name="ScriptGuid">{F73D4511-E1D0-4487-88B9-4BB80B31836A}</string>
						<ProtectedString name="Source"><![CDATA[local Type = require(script.Parent.Type)
local ElementKind = require(script.Parent.ElementKind)
local ElementUtils = require(script.Parent.ElementUtils)
local Children = require(script.Parent.PropMarkers.Children)
local Symbol = require(script.Parent.Symbol)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local InternalData = Symbol.named("InternalData")

--[[
	The reconciler is the mechanism in Roact that constructs the virtual tree
	that later gets turned into concrete objects by the renderer.

	Roact's reconciler is constructed with the renderer as an argument, which
	enables switching to different renderers for different platforms or
	scenarios.

	When testing the reconciler itself, it's common to use `NoopRenderer` with
	spies replacing some methods. The default (and only) reconciler interface
	exposed by Roact right now uses `RobloxRenderer`.
]]
local function createReconciler(renderer)
	local reconciler
	local mountVirtualNode
	local updateVirtualNode
	local unmountVirtualNode

	--[[
		Unmount the given virtualNode, replacing it with a new node described by
		the given element.

		Preserves host properties, depth, and legacyContext from parent.
	]]
	local function replaceVirtualNode(virtualNode, newElement)
		local hostParent = virtualNode.hostParent
		local hostKey = virtualNode.hostKey
		local depth = virtualNode.depth
		local parent = virtualNode.parent

		-- If the node that is being replaced has modified context, we need to
		-- use the original *unmodified* context for the new node
		-- The `originalContext` field will be nil if the context was unchanged
		local context = virtualNode.originalContext or virtualNode.context
		local parentLegacyContext = virtualNode.parentLegacyContext

		if config.tempFixUpdateChildrenReEntrancy then
			-- If updating this node has caused a component higher up the tree to re-render
			-- and updateChildren to be re-entered then this node could already have been
			-- unmounted in the previous updateChildren pass.
			if not virtualNode.wasUnmounted then
				unmountVirtualNode(virtualNode)
			end
		else
			unmountVirtualNode(virtualNode)
		end
		local newNode = mountVirtualNode(newElement, hostParent, hostKey, context, parentLegacyContext)

		-- mountVirtualNode can return nil if the element is a boolean
		if newNode ~= nil then
			newNode.depth = depth
			newNode.parent = parent
		end

		return newNode
	end

	--[[
		Utility to update the children of a virtual node based on zero or more
		updated children given as elements.
	]]
	local function updateChildren(virtualNode, hostParent, newChildElements)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.updateChildrenCount = virtualNode.updateChildrenCount + 1

		local currentUpdateChildrenCount = virtualNode.updateChildrenCount

		local removeKeys = {}

		-- Changed or removed children
		for childKey, childNode in pairs(virtualNode.children) do
			local newElement = ElementUtils.getElementByKey(newChildElements, childKey)
			local newNode = updateVirtualNode(childNode, newElement)

			-- If updating this node has caused a component higher up the tree to re-render
			-- and updateChildren to be re-entered for this virtualNode then
			-- this result is invalid and needs to be disgarded.
			if config.tempFixUpdateChildrenReEntrancy then
				if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
					if newNode and newNode ~= virtualNode.children[childKey] then
						unmountVirtualNode(newNode)
					end
					return
				end
			end

			if newNode ~= nil then
				virtualNode.children[childKey] = newNode
			else
				removeKeys[childKey] = true
			end
		end

		for childKey in pairs(removeKeys) do
			virtualNode.children[childKey] = nil
		end

		-- Added children
		for childKey, newElement in ElementUtils.iterateElements(newChildElements) do
			local concreteKey = childKey
			if childKey == ElementUtils.UseParentKey then
				concreteKey = virtualNode.hostKey
			end

			if virtualNode.children[childKey] == nil then
				local childNode = mountVirtualNode(
					newElement,
					hostParent,
					concreteKey,
					virtualNode.context,
					virtualNode.legacyContext
				)

				-- If updating this node has caused a component higher up the tree to re-render
				-- and updateChildren to be re-entered for this virtualNode then
				-- this result is invalid and needs to be discarded.
				if config.tempFixUpdateChildrenReEntrancy then
					if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
						if childNode then
							unmountVirtualNode(childNode)
						end
						return
					end
				end

				-- mountVirtualNode can return nil if the element is a boolean
				if childNode ~= nil then
					childNode.depth = virtualNode.depth + 1
					childNode.parent = virtualNode
					virtualNode.children[childKey] = childNode
				end
			end
		end
	end

	local function updateVirtualNodeWithChildren(virtualNode, hostParent, newChildElements)
		updateChildren(virtualNode, hostParent, newChildElements)
	end

	local function updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)
		if Type.of(renderResult) == Type.Element
			or renderResult == nil
			or typeof(renderResult) == "boolean"
		then
			updateChildren(virtualNode, hostParent, renderResult)
		else
			error(("%s\n%s"):format(
				"Component returned invalid children:",
				virtualNode.currentElement.source or "<enable element tracebacks>"
			), 0)
		end
	end

	--[[
		Unmounts the given virtual node and releases any held resources.
	]]
	function unmountVirtualNode(virtualNode)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.wasUnmounted = true

		local kind = ElementKind.of(virtualNode.currentElement)

		if kind == ElementKind.Host then
			renderer.unmountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Stateful then
			virtualNode.instance:__unmount()
		elseif kind == ElementKind.Portal then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Fragment then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end
	end

	local function updateFunctionVirtualNode(virtualNode, newElement)
		local children = newElement.component(newElement.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)

		return virtualNode
	end

	local function updatePortalVirtualNode(virtualNode, newElement)
		local oldElement = virtualNode.currentElement
		local oldTargetHostParent = oldElement.props.target

		local targetHostParent = newElement.props.target

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		if targetHostParent ~= oldTargetHostParent then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local children = newElement.props[Children]

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)

		return virtualNode
	end

	local function updateFragmentVirtualNode(virtualNode, newElement)
		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, newElement.elements)

		return virtualNode
	end

	--[[
		Update the given virtual node using a new element describing what it
		should transform into.

		`updateVirtualNode` will return a new virtual node that should replace
		the passed in virtual node. This is because a virtual node can be
		updated with an element referencing a different component!

		In that case, `updateVirtualNode` will unmount the input virtual node,
		mount a new virtual node, and return it in this case, while also issuing
		a warning to the user.
	]]
	function updateVirtualNode(virtualNode, newElement, newState)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end
		if config.typeChecks then
			assert(
				Type.of(newElement) == Type.Element or typeof(newElement) == "boolean" or newElement == nil,
				"Expected arg #2 to be of type Element, boolean, or nil"
			)
		end

		-- If nothing changed, we can skip this update
		if virtualNode.currentElement == newElement and newState == nil then
			return virtualNode
		end

		if typeof(newElement) == "boolean" or newElement == nil then
			unmountVirtualNode(virtualNode)
			return nil
		end

		if virtualNode.currentElement.component ~= newElement.component then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local kind = ElementKind.of(newElement)

		local shouldContinueUpdate = true

		if kind == ElementKind.Host then
			virtualNode = renderer.updateHostNode(reconciler, virtualNode, newElement)
		elseif kind == ElementKind.Function then
			virtualNode = updateFunctionVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Stateful then
			shouldContinueUpdate = virtualNode.instance:__update(newElement, newState)
		elseif kind == ElementKind.Portal then
			virtualNode = updatePortalVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Fragment then
			virtualNode = updateFragmentVirtualNode(virtualNode, newElement)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		-- Stateful components can abort updates via shouldUpdate. If that
		-- happens, we should stop doing stuff at this point.
		if not shouldContinueUpdate then
			return virtualNode
		end

		virtualNode.currentElement = newElement

		return virtualNode
	end

	--[[
		Constructs a new virtual node but not does mount it.
	]]
	local function createVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
			internalAssert(typeof(context) == "table" or context == nil, "Expected arg #4 to be of type table or nil")
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		return {
			[Type] = Type.VirtualNode,
			currentElement = element,
			depth = 1,
			parent = nil,
			children = {},
			hostParent = hostParent,
			hostKey = hostKey,
			updateChildrenCount = 0,
			wasUnmounted = false,

			-- Legacy Context API
			-- A table of context values inherited from the parent node
			legacyContext = legacyContext,

			-- A saved copy of the parent context, used when replacing a node
			parentLegacyContext = legacyContext,

			-- Context API
			-- A table of context values inherited from the parent node
			context = context or {},

			-- A saved copy of the unmodified context; this will be updated when
			-- a component adds new context and used when a node is replaced
			originalContext = nil,
		}
	end

	local function mountFunctionVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local children = element.component(element.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)
	end

	local function mountPortalVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local targetHostParent = element.props.target
		local children = element.props[Children]

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)
	end

	local function mountFragmentVirtualNode(virtualNode)
		local element = virtualNode.currentElement
		local children = element.elements

		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, children)
	end

	--[[
		Constructs a new virtual node and mounts it, but does not place it into
		the tree.
	]]
	function mountVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		-- Boolean values render as nil to enable terse conditional rendering.
		if typeof(element) == "boolean" then
			return nil
		end

		local kind = ElementKind.of(element)

		local virtualNode = createVirtualNode(element, hostParent, hostKey, context, legacyContext)

		if kind == ElementKind.Host then
			renderer.mountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			mountFunctionVirtualNode(virtualNode)
		elseif kind == ElementKind.Stateful then
			element.component:__mount(reconciler, virtualNode)
		elseif kind == ElementKind.Portal then
			mountPortalVirtualNode(virtualNode)
		elseif kind == ElementKind.Fragment then
			mountFragmentVirtualNode(virtualNode)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		return virtualNode
	end

	--[[
		Constructs a new Roact virtual tree, constructs a root node for
		it, and mounts it.
	]]
	local function mountVirtualTree(element, hostParent, hostKey)
		if config.typeChecks then
			assert(Type.of(element) == Type.Element, "Expected arg #1 to be of type Element")
			assert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
		end

		if hostKey == nil then
			hostKey = "RoactTree"
		end

		local tree = {
			[Type] = Type.VirtualTree,
			[InternalData] = {
				-- The root node of the tree, which starts into the hierarchy of
				-- Roact component instances.
				rootNode = nil,
				mounted = true,
			},
		}

		tree[InternalData].rootNode = mountVirtualNode(element, hostParent, hostKey)

		return tree
	end

	--[[
		Unmounts the virtual tree, freeing all of its resources.

		No further operations should be done on the tree after it's been
		unmounted, as indicated by its the `mounted` field.
	]]
	local function unmountVirtualTree(tree)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(internalData.mounted, "Cannot unmounted a Roact tree that has already been unmounted")
		end

		internalData.mounted = false

		if internalData.rootNode ~= nil then
			unmountVirtualNode(internalData.rootNode)
		end
	end

	--[[
		Utility method for updating the root node of a virtual tree given a new
		element.
	]]
	local function updateVirtualTree(tree, newElement)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(Type.of(newElement) == Type.Element, "Expected arg #2 to be a Roact Element")
		end

		internalData.rootNode = updateVirtualNode(internalData.rootNode, newElement)

		return tree
	end

	reconciler = {
		mountVirtualTree = mountVirtualTree,
		unmountVirtualTree = unmountVirtualTree,
		updateVirtualTree = updateVirtualTree,

		createVirtualNode = createVirtualNode,
		mountVirtualNode = mountVirtualNode,
		unmountVirtualNode = unmountVirtualNode,
		updateVirtualNode = updateVirtualNode,
		updateVirtualNodeWithChildren = updateVirtualNodeWithChildren,
		updateVirtualNodeWithRenderResult = updateVirtualNodeWithRenderResult,
	}

	return reconciler
end

return createReconciler
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX612BA379767440408F13A26574D678DB">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createFragment.spec</string>
						<string name="ScriptGuid">{7421731B-D9EC-4BD9-A84B-818E252C651A}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local ElementKind = require(script.Parent.ElementKind)
	local Type = require(script.Parent.Type)

	local createFragment = require(script.Parent.createFragment)

	it("should create new primitive elements", function()
		local fragment = createFragment({})

		expect(fragment).to.be.ok()
		expect(Type.of(fragment)).to.equal(Type.Element)
		expect(ElementKind.of(fragment)).to.equal(ElementKind.Fragment)
	end)

	it("should accept children", function()
		local subFragment = createFragment({})
		local fragment = createFragment({key = subFragment})

		expect(fragment.elements.key).to.equal(subFragment)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXB0079C5FAED1444A9F566D5923135321">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createFragment</string>
						<string name="ScriptGuid">{87B9AF91-F1FD-4DFB-BF52-749ED910F933}</string>
						<ProtectedString name="Source"><![CDATA[local ElementKind = require(script.Parent.ElementKind)
local Type = require(script.Parent.Type)

local function createFragment(elements)
	return {
		[Type] = Type.Element,
		[ElementKind] = ElementKind.Fragment,
		elements = elements,
	}
end

return createFragment]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXFBACF6D60C03455E921E457386FACE53">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createElement.spec</string>
						<string name="ScriptGuid">{6CC1DB49-28B9-4593-832D-5DE95928DC1B}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Component = require(script.Parent.Component)
	local ElementKind = require(script.Parent.ElementKind)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Logging = require(script.Parent.Logging)
	local Type = require(script.Parent.Type)
	local Portal = require(script.Parent.Portal)
	local Children = require(script.Parent.PropMarkers.Children)

	local createElement = require(script.Parent.createElement)

	it("should create new primitive elements", function()
		local element = createElement("Frame")

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Host)
	end)

	it("should create new functional elements", function()
		local element = createElement(function()
		end)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Function)
	end)

	it("should create new stateful components", function()
		local Foo = Component:extend("Foo")

		local element = createElement(Foo)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Stateful)
	end)

	it("should create new portal elements", function()
		local element = createElement(Portal)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Portal)
	end)

	it("should accept props", function()
		local element = createElement("StringValue", {
			Value = "Foo",
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
	end)

	it("should accept props and children", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", {
			Value = "Foo",
		}, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should accept children with without props", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", nil, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should warn once if children is specified in two different ways", function()
		local logInfo = Logging.capture(function()
			-- Using a loop here to ensure that multiple occurences of the same
			-- warning only cause output once.
			for _ = 1, 2 do
				createElement("Frame", {
					[Children] = {},
				}, {})
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("createElement")).to.be.ok()
		expect(logInfo.warnings[1]:find("Children")).to.be.ok()
	end)

	it("should have a `source` member if elementTracing is set", function()
		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement("StringValue")

			expect(element.source).to.be.a("string")
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX1ADE7DF17D0840F58580455D114439EA">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createElement</string>
						<string name="ScriptGuid">{3B811732-328B-43B6-84B2-EB839709A3AE}</string>
						<ProtectedString name="Source"><![CDATA[local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local Logging = require(script.Parent.Logging)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local multipleChildrenMessage = [[
The prop `Roact.Children` was defined but was overriden by the third parameter to createElement!
This can happen when a component passes props through to a child element but also uses the `children` argument:

	Roact.createElement("Frame", passedProps, {
		child = ...
	})

Instead, consider using a utility function to merge tables of children together:

	local children = mergeTables(passedProps[Roact.Children], {
		child = ...
	})

	local fullProps = mergeTables(passedProps, {
		[Roact.Children] = children
	})

	Roact.createElement("Frame", fullProps)]]

--[[
	Creates a new element representing the given component.

	Elements are lightweight representations of what a component instance should
	look like.

	Children is a shorthand for specifying `Roact.Children` as a key inside
	props. If specified, the passed `props` table is mutated!
]]
local function createElement(component, props, children)
	if config.typeChecks then
		assert(component ~= nil, "`component` is required")
		assert(typeof(props) == "table" or props == nil, "`props` must be a table or nil")
		assert(typeof(children) == "table" or children == nil, "`children` must be a table or nil")
	end

	if props == nil then
		props = {}
	end

	if children ~= nil then
		if props[Children] ~= nil then
			Logging.warnOnce(multipleChildrenMessage)
		end

		props[Children] = children
	end

	local elementKind = ElementKind.fromComponent(component)

	local element = {
		[Type] = Type.Element,
		[ElementKind] = elementKind,
		component = component,
		props = props,
	}

	if config.elementTracing then
		-- We trim out the leading newline since there's no way to specify the
		-- trace level without also specifying a message.
		element.source = debug.traceback("", 2):sub(2)
	end

	return element
end

return createElement]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXCCF3260D57BD4EF7A70F48154289D3AF">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createContext.spec</string>
						<string name="ScriptGuid">{4744BD5D-31CC-4B0F-B85F-8B1AAAF65361}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Component = require(script.Parent.Component)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local Children = require(script.Parent.PropMarkers.Children)
	local createContext = require(script.Parent.createContext)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createReconciler = require(script.Parent.createReconciler)
	local createSpy = require(script.Parent.createSpy)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should return a table", function()
		local context = createContext("Test")
		expect(context).to.be.ok()
		expect(type(context)).to.equal("table")
	end)

	it("should contain a Provider and a Consumer", function()
		local context = createContext("Test")
		expect(context.Provider).to.be.ok()
		expect(context.Consumer).to.be.ok()
	end)

	describe("Provider", function()
		it("should render its children", function()
			local context = createContext("Test")

			local Listener = createSpy(function()
				return nil
			end)

			local element = createElement(context.Provider, {
				value = "Test",
			}, {
				Listener = createElement(Listener.value),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			expect(Listener.callCount).to.equal(1)
		end)
	end)

	describe("Consumer", function()
		it("should expect a render function", function()
			local context = createContext("Test")
			local element = createElement(context.Consumer)

			expect(function()
				noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			end).to.throw()
		end)

		it("should return the default value if there is no Provider", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local element = createElement(context.Consumer, {
				render = valueSpy.value,
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			valueSpy:assertCalledWith("Test")
		end)

		it("should pass the value to the render function", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Listener = createElement(Listener),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			valueSpy:assertCalledWith("NewTest")
		end)

		it("should update when the value updates", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Listener = createElement(Listener),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")

			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith("NewTest")

			noopReconciler.updateVirtualTree(tree, createElement(context.Provider, {
				value = "ThirdTest",
			}, {
				Listener = createElement(Listener),
			}))

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith("ThirdTest")

			noopReconciler.unmountVirtualTree(tree)
		end)

		--[[
			This test is the same as the one above, but with a component that
			always blocks updates in the middle. We expect behavior to be the
			same.
		]]
		it("should update when the value updates through an update blocking component", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local UpdateBlocker = Component:extend("UpdateBlocker")

			function UpdateBlocker:render()
				return createFragment(self.props[Children])
			end

			function UpdateBlocker:shouldUpdate()
				return false
			end

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Blocker = createElement(UpdateBlocker, nil, {
					Listener = createElement(Listener),
				}),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")

			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith("NewTest")

			noopReconciler.updateVirtualTree(tree, createElement(context.Provider, {
				value = "ThirdTest",
			}, {
				Blocker = createElement(UpdateBlocker, nil, {
					Listener = createElement(Listener),
				}),
			}))

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith("ThirdTest")

			noopReconciler.unmountVirtualTree(tree)
		end)

		it("should behave correctly when the default value is nil", function()
			local context = createContext(nil)

			local valueSpy = createSpy()
			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local tree = noopReconciler.mountVirtualTree(createElement(Listener), nil, "Provide Tree")
			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith(nil)

			tree = noopReconciler.updateVirtualTree(tree, createElement(Listener))
			noopReconciler.unmountVirtualTree(tree)

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith(nil)
		end)
	end)

	describe("Update order", function()
		--[[
			This test ensures that there is no scenario where we can observe
			'update tearing' when props and context are updated at the same
			time.

			Update tearing is scenario where a single update is partially
			applied in multiple steps instead of atomically. This is observable
			by components and can lead to strange bugs or errors.

			This instance of update tearing happens when updating a prop and a
			context value in the same update. Image we represent our tree's
			state as the current prop and context versions. Our initial state
			is:

			(prop_1, context_1)

			The next state we would like to update to is:

			(prop_2, context_2)

			Under the bug reported in issue 259, Roact reaches three different
			states in sequence:

			1: (prop_1, context_1) - the initial state
			2: (prop_2, context_1) - woops!
			3: (prop_2, context_2) - correct end state

			In state 2, a user component was added that tried to access the
			current context value, which was not set at the time. This raised an
			error, because this state is not valid!

			The first proposed solution was to move the context update to happen
			before the props update. It is easy to show that this will still
			result in update tearing:

			1: (prop_1, context_1)
			2: (prop_1, context_2)
			3: (prop_2, context_2)

			Although the initial concern about newly added components observing
			old context values is fixed, there is still a state
			desynchronization between props and state.

			We would instead like the following update sequence:

			1: (prop_1, context_1)
			2: (prop_2, context_2)

			This test tries to ensure that is the case.

			The initial bug report is here:
			https://github.com/Roblox/roact/issues/259
		]]
		it("should update context at the same time as props", function()
			-- These values are used to make sure we reach both the first and
			-- second state combinations we want to visit.
			local observedA = false
			local observedB = false
			local updateCount = 0

			local context = createContext("default")

			local function Listener(props)
				return createElement(context.Consumer, {
					render = function(value)
						updateCount = updateCount + 1

						if value == "context_1" then
							expect(props.someProp).to.equal("prop_1")
							observedA = true
						elseif value == "context_2" then
							expect(props.someProp).to.equal("prop_2")
							observedB = true
						else
							error("Unexpected context value")
						end
					end,
				})
			end

			local element1 = createElement(context.Provider, {
				value = "context_1",
			}, {
				Child = createElement(Listener, {
					someProp = "prop_1",
				}),
			})

			local element2 = createElement(context.Provider, {
				value = "context_2",
			}, {
				Child = createElement(Listener, {
					someProp = "prop_2",
				}),
			})

			local tree = noopReconciler.mountVirtualTree(element1, nil, "UpdateObservationIsFun")
			noopReconciler.updateVirtualTree(tree, element2)

			expect(updateCount).to.equal(2)
			expect(observedA).to.equal(true)
			expect(observedB).to.equal(true)
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX26117E6D654649E69AE4996C7D39587A">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createContext</string>
						<string name="ScriptGuid">{5BEAE967-6DE4-45B5-A2DA-644CDD17BE86}</string>
						<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)
local createFragment = require(script.Parent.createFragment)
local createSignal = require(script.Parent.createSignal)
local Children = require(script.Parent.PropMarkers.Children)
local Component = require(script.Parent.Component)

--[[
	Construct the value that is assigned to Roact's context storage.
]]
local function createContextEntry(currentValue)
	return {
		value = currentValue,
		onUpdate = createSignal(),
	}
end

local function createProvider(context)
	local Provider = Component:extend("Provider")

	function Provider:init(props)
		self.contextEntry = createContextEntry(props.value)
		self:__addContext(context.key, self.contextEntry)
	end

	function Provider:willUpdate(nextProps)
		-- If the provided value changed, immediately update the context entry.
		--
		-- During this update, any components that are reachable will receive
		-- this updated value at the same time as any props and state updates
		-- that are being applied.
		if nextProps.value ~= self.props.value then
			self.contextEntry.value = nextProps.value
		end
	end

	function Provider:didUpdate(prevProps)
		-- If the provided value changed, after we've updated every reachable
		-- component, fire a signal to update the rest.
		--
		-- This signal will notify all context consumers. It's expected that
		-- they will compare the last context value they updated with and only
		-- trigger an update on themselves if this value is different.
		--
		-- This codepath will generally only update consumer components that has
		-- a component implementing shouldUpdate between them and the provider.
		if prevProps.value ~= self.props.value then
			self.contextEntry.onUpdate:fire(self.props.value)
		end
	end

	function Provider:render()
		return createFragment(self.props[Children])
	end

	return Provider
end

local function createConsumer(context)
	local Consumer = Component:extend("Consumer")

	function Consumer.validateProps(props)
		if type(props.render) ~= "function" then
			return false, "Consumer expects a `render` function"
		else
			return true
		end
	end

	function Consumer:init(props)
		-- This value may be nil, which indicates that our consumer is not a
		-- descendant of a provider for this context item.
		self.contextEntry = self:__getContext(context.key)
	end

	function Consumer:render()
		-- Render using the latest available for this context item.
		--
		-- We don't store this value in state in order to have more fine-grained
		-- control over our update behavior.
		local value
		if self.contextEntry ~= nil then
			value = self.contextEntry.value
		else
			value = context.defaultValue
		end

		return self.props.render(value)
	end

	function Consumer:didUpdate()
		-- Store the value that we most recently updated with.
		--
		-- This value is compared in the contextEntry onUpdate hook below.
		if self.contextEntry ~= nil then
			self.lastValue = self.contextEntry.value
		end
	end

	function Consumer:didMount()
		if self.contextEntry ~= nil then
			-- When onUpdate is fired, a new value has been made available in
			-- this context entry, but we may have already updated in the same
			-- update cycle.
			--
			-- To avoid sending a redundant update, we compare the new value
			-- with the last value that we updated with (set in didUpdate) and
			-- only update if they differ. This may happen when an update from a
			-- provider was blocked by an intermediate component that returned
			-- false from shouldUpdate.
			self.disconnect = self.contextEntry.onUpdate:subscribe(function(newValue)
				if newValue ~= self.lastValue then
					-- Trigger a dummy state update.
					self:setState({})
				end
			end)
		end
	end

	function Consumer:willUnmount()
		if self.disconnect ~= nil then
			self.disconnect()
		end
	end

	return Consumer
end

local Context = {}
Context.__index = Context

function Context.new(defaultValue)
	return setmetatable({
		defaultValue = defaultValue,
		key = Symbol.named("ContextKey"),
	}, Context)
end

function Context:__tostring()
	return "RoactContext"
end

local function createContext(defaultValue)
	local context = Context.new(defaultValue)

	return {
		Provider = createProvider(context),
		Consumer = createConsumer(context),
	}
end

return createContext
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXEC1F52A4F083477E8C24D3ABBB590EFE">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">assign.spec</string>
						<string name="ScriptGuid">{18D720C5-9D3C-49E2-A1AE-70BA430B5C42}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local None = require(script.Parent.None)

	local assign = require(script.Parent.assign)

	it("should accept zero additional tables", function()
		local input = {}
		local result = assign(input)

		expect(input).to.equal(result)
	end)

	it("should merge multiple tables onto the given target table", function()
		local target = {
			a = 5,
			b = 6,
		}

		local source1 = {
			b = 7,
			c = 8,
		}

		local source2 = {
			b = 8,
		}

		assign(target, source1, source2)

		expect(target.a).to.equal(5)
		expect(target.b).to.equal(source2.b)
		expect(target.c).to.equal(source1.c)
	end)

	it("should remove keys if specified as None", function()
		local target = {
			foo = 2,
			bar = 3,
		}

		local source = {
			foo = None,
		}

		assign(target, source)

		expect(target.foo).to.equal(nil)
		expect(target.bar).to.equal(3)
	end)

	it("should re-add keys if specified after None", function()
		local target = {
			foo = 2,
		}

		local source1 = {
			foo = None,
		}

		local source2 = {
			foo = 3,
		}

		assign(target, source1, source2)

		expect(target.foo).to.equal(source2.foo)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX7548408E727F4E00BD3F2B47546EB431">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">assign</string>
						<string name="ScriptGuid">{6E0A1E30-6336-445C-9BAE-D0F3CFAA39DC}</string>
						<ProtectedString name="Source"><![CDATA[local None = require(script.Parent.None)

--[[
	Merges values from zero or more tables onto a target table. If a value is
	set to None, it will instead be removed from the table.

	This function is identical in functionality to JavaScript's Object.assign.
]]
local function assign(target, ...)
	for index = 1, select("#", ...) do
		local source = select(index, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				if value == None then
					target[key] = nil
				else
					target[key] = value
				end
			end
		end
	end

	return target
end

return assign]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXB86EA5A69BB246E885B15843C79B66B4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">assertDeepEqual.spec</string>
						<string name="ScriptGuid">{CA51F611-1015-4E50-9D4F-E38504C80FF3}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)

	it("should fail with a message when args are not equal", function()
		local success, message = pcall(assertDeepEqual, 1, 2)

		expect(success).to.equal(false)
		expect(message:find("first ~= second")).to.be.ok()

		success, message = pcall(assertDeepEqual, {
			foo = 1,
		}, {
			foo = 2,
		})

		expect(success).to.equal(false)
		expect(message:find("first%[foo%] ~= second%[foo%]")).to.be.ok()
	end)

	it("should compare non-table values using standard '==' equality", function()
		assertDeepEqual(1, 1)
		assertDeepEqual("hello", "hello")
		assertDeepEqual(nil, nil)

		local someFunction = function() end
		local theSameFunction = someFunction

		assertDeepEqual(someFunction, theSameFunction)

		local A = {
			foo = someFunction
		}
		local B = {
			foo = theSameFunction
		}

		assertDeepEqual(A, B)
	end)

	it("should fail when types differ", function()
		local success, message = pcall(assertDeepEqual, 1, "1")

		expect(success).to.equal(false)
		expect(message:find("first is of type number, but second is of type string")).to.be.ok()
	end)

	it("should compare (and report about) nested tables", function()
		local A = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			}
		}
		local B = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			}
		}

		assertDeepEqual(A, B)

		local C = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 3,
			}
		}

		local success, message = pcall(assertDeepEqual, A, C)

		expect(success).to.equal(false)
		expect(message:find("first%[nested%]%[bar%] ~= second%[nested%]%[bar%]")).to.be.ok()
	end)

	it("should be commutative", function()
		local equalArgsA = {
			foo = "bar",
			hello = "world",
		}
		local equalArgsB = {
			foo = "bar",
			hello = "world",
		}

		assertDeepEqual(equalArgsA, equalArgsB)
		assertDeepEqual(equalArgsB, equalArgsA)

		local nonEqualArgs = {
			foo = "bar",
		}

		expect(function() assertDeepEqual(equalArgsA, nonEqualArgs) end).to.throw()
		expect(function() assertDeepEqual(nonEqualArgs, equalArgsA) end).to.throw()
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXAC5C5551CE6347928A7622933C1766C9">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">assertDeepEqual</string>
						<string name="ScriptGuid">{C631BE95-22E7-4BA3-8E38-1DAE57766EE5}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A utility used to assert that two objects are value-equal recursively. It
	outputs fairly nicely formatted messages to help diagnose why two objects
	would be different.

	This should only be used in tests.
]]

local function deepEqual(a, b)
	if typeof(a) ~= typeof(b) then
		local message = ("{1} is of type %s, but {2} is of type %s"):format(
			typeof(a),
			typeof(b)
		)
		return false, message
	end

	if typeof(a) == "table" then
		local visitedKeys = {}

		for key, value in pairs(a) do
			visitedKeys[key] = true

			local success, innerMessage = deepEqual(value, b[key])
			if not success then
				local message = innerMessage
					:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
					:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

				return false, message
			end
		end

		for key, value in pairs(b) do
			if not visitedKeys[key] then
				local success, innerMessage = deepEqual(value, a[key])

				if not success then
					local message = innerMessage
						:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
						:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

					return false, message
				end
			end
		end

		return true
	end

	if a == b then
		return true
	end

	local message = "{1} ~= {2}"
	return false, message
end

local function assertDeepEqual(a, b)
	local success, innerMessageTemplate = deepEqual(a, b)

	if not success then
		local innerMessage = innerMessageTemplate
			:gsub("{1}", "first")
			:gsub("{2}", "second")

		local message = ("Values were not deep-equal.\n%s"):format(innerMessage)

		error(message, 2)
	end
end

return assertDeepEqual]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX59F1842E006D4FC68DF42E87CFF33081">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Type.spec</string>
						<string name="ScriptGuid">{BB671810-B8A9-4E85-9CF5-CE0CEDA2FE53}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Type)

	describe("of", function()
		it("should return nil if the value is not a table", function()
			expect(Type.of(1)).to.equal(nil)
			expect(Type.of(true)).to.equal(nil)
			expect(Type.of("test")).to.equal(nil)
			expect(Type.of(print)).to.equal(nil)
		end)

		it("should return nil if the table has no type", function()
			expect(Type.of({})).to.equal(nil)
		end)

		it("should return the assigned type", function()
			local test = {
				[Type] = Type.Element
			}

			expect(Type.of(test)).to.equal(Type.Element)
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX7D7093CA526C40BF9A8CA8B35F98BA69">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Type</string>
						<string name="ScriptGuid">{5D21298A-93A3-4037-B14D-09A1E02AB2D4}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Contains markers for annotating objects with types.

	To set the type of an object, use `Type` as a key and the actual marker as
	the value:

		local foo = {
			[Type] = Type.Foo,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local Type = newproxy(true)

local TypeInternal = {}

local function addType(name)
	TypeInternal[name] = Symbol.named("Roact" .. name)
end

addType("Binding")
addType("Element")
addType("HostChangeEvent")
addType("HostEvent")
addType("StatefulComponentClass")
addType("StatefulComponentInstance")
addType("VirtualNode")
addType("VirtualTree")

function TypeInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[Type]
end

getmetatable(Type).__index = TypeInternal

getmetatable(Type).__tostring = function()
	return "RoactType"
end

strict(TypeInternal, "Type")

return Type]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXEB8A13D64700401E9C2D40DBED5E91D2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Symbol.spec</string>
						<string name="ScriptGuid">{A841B3EE-0468-480F-8800-522D80AADCD6}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Symbol = require(script.Parent.Symbol)

	describe("named", function()
		it("should give an opaque object", function()
			local symbol = Symbol.named("foo")

			expect(symbol).to.be.a("userdata")
		end)

		it("should coerce to the given name", function()
			local symbol = Symbol.named("foo")

			expect(tostring(symbol):find("foo")).to.be.ok()
		end)

		it("should be unique when constructed", function()
			local symbolA = Symbol.named("abc")
			local symbolB = Symbol.named("abc")

			expect(symbolA).never.to.equal(symbolB)
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX201FBF2BC3A64551931A140BDD481E67">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Symbol</string>
						<string name="ScriptGuid">{FE4C0581-A864-4883-B218-E64FC467AB61}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A 'Symbol' is an opaque marker type.

	Symbols have the type 'userdata', but when printed to the console, the name
	of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

return Symbol]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXAE327E41A3484DBEA6A34FC476C58154">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">SingleEventManager.spec</string>
						<string name="ScriptGuid">{B71BFE2F-7228-43B6-BAFF-CC2ED822E9C1}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.createSpy)
	local Logging = require(script.Parent.Logging)

	local SingleEventManager = require(script.Parent.SingleEventManager)

	describe("new", function()
		it("should create a SingleEventManager", function()
			local manager = SingleEventManager.new()

			expect(manager).to.be.ok()
		end)
	end)

	describe("connectEvent", function()
		it("should connect to events", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")

			manager:connectEvent("Event", nil)

			instance:Fire("baz")
			expect(eventSpy.callCount).to.equal(2)
		end)

		it("should drop events until resumed initially", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(0)

			manager:resume()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke suspended events when resumed", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			manager:suspend()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)

			manager:resume()
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke events triggered during resumption in the correct order", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			local recordedValues = {}
			local eventSpy = createSpy(function(_, value)
				table.insert(recordedValues, value)

				if value == 2 then
					instance:Fire(3)
				elseif value == 3 then
					instance:Fire(4)
				end
			end)

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)
			instance:Fire(2)

			manager:resume()
			expect(eventSpy.callCount).to.equal(4)
			assertDeepEqual(recordedValues, {1, 2, 3, 4})
		end)

		it("should not invoke events fired during suspension but disconnected before resumption", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)

			manager:connectEvent("Event", nil)

			manager:resume()
			expect(eventSpy.callCount).to.equal(0)
		end)

		it("should not yield events through the SingleEventManager when resuming", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				coroutine.yield()
			end)

			manager:resume()

			local co = coroutine.create(function()
				instance:Fire(5)
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")

			manager:suspend()
			instance:Fire(5)

			co = coroutine.create(function()
				manager:resume()
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")
		end)

		it("should not throw errors through SingleEventManager when resuming", function()
			local errorText = "Error from SingleEventManager test"

			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				error(errorText)
			end)

			manager:resume()

			-- If we call instance:Fire() here, the error message will leak to
			-- the console since the thread's resumption will be handled by
			-- Roblox's scheduler.

			manager:suspend()
			instance:Fire(5)

			local logInfo = Logging.capture(function()
				manager:resume()
			end)

			expect(#logInfo.errors).to.equal(0)
			expect(#logInfo.warnings).to.equal(1)
			expect(#logInfo.infos).to.equal(0)

			expect(logInfo.warnings[1]:find(errorText)).to.be.ok()
		end)

		it("should not overflow with events if manager:resume() is invoked when resuming a suspended event", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			-- This connection emulates what happens if reconciliation is
			-- triggered again in response to reconciliation. Without
			-- appropriate guards, the inner resume() call will process the
			-- Fire(1) event again, causing a nasty stack overflow.
			local eventSpy = createSpy(function(_, value)
				if value == 1 then
					manager:suspend()
					instance:Fire(2)
					manager:resume()
				end
			end)

			manager:connectEvent("Event", eventSpy.value)

			manager:suspend()
			instance:Fire(1)
			manager:resume()

			expect(eventSpy.callCount).to.equal(2)
		end)
	end)

	describe("connectPropertyChange", function()
		-- Since property changes utilize the same mechanisms as other events,
		-- the tests here are slimmed down to reduce redundancy.

		it("should connect to property changes", function()
			local instance = Instance.new("Folder")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectPropertyChange("Name", eventSpy.value)
			manager:resume()

			instance.Name = "foo"
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance)

			instance.Name = "bar"
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance)

			manager:connectPropertyChange("Name")

			instance.Name = "baz"
			expect(eventSpy.callCount).to.equal(2)
		end)

		it("should throw an error if the property is invalid", function()
			local instance = Instance.new("Folder")
			local manager = SingleEventManager.new(instance)

			expect(function()
				manager:connectPropertyChange("foo", function() end)
			end).to.throw()
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX831F9B237A3E476E9F2AD16A9A9919D3">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">SingleEventManager</string>
						<string name="ScriptGuid">{98005343-0466-47E8-8882-178FAD4B7047}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A manager for a single host virtual node's connected events.
]]

local Logging = require(script.Parent.Logging)

local CHANGE_PREFIX = "Change."

local EventStatus = {
	-- No events are processed at all; they're silently discarded
	Disabled = "Disabled",

	-- Events are stored in a queue; listeners are invoked when the manager is resumed
	Suspended = "Suspended",

	-- Event listeners are invoked as the events fire
	Enabled = "Enabled",
}

local SingleEventManager = {}
SingleEventManager.__index = SingleEventManager

function SingleEventManager.new(instance)
	local self = setmetatable({
		-- The queue of suspended events
		_suspendedEventQueue = {},

		-- All the event connections being managed
		-- Events are indexed by a string key
		_connections = {},

		-- All the listeners being managed
		-- These are stored distinctly from the connections
		-- Connections can have their listeners replaced at runtime
		_listeners = {},

		-- The suspension status of the manager
		-- Managers start disabled and are "resumed" after the initial render
		_status = EventStatus.Disabled,

		-- If true, the manager is processing queued events right now.
		_isResuming = false,

		-- The Roblox instance the manager is managing
		_instance = instance,
	}, SingleEventManager)

	return self
end

function SingleEventManager:connectEvent(key, listener)
	self:_connect(key, self._instance[key], listener)
end

function SingleEventManager:connectPropertyChange(key, listener)
	local success, event = pcall(function()
		return self._instance:GetPropertyChangedSignal(key)
	end)

	if not success then
		error(("Cannot get changed signal on property %q: %s"):format(
			tostring(key),
			event
		), 0)
	end

	self:_connect(CHANGE_PREFIX .. key, event, listener)
end

function SingleEventManager:_connect(eventKey, event, listener)
	-- If the listener doesn't exist we can just disconnect the existing connection
	if listener == nil then
		if self._connections[eventKey] ~= nil then
			self._connections[eventKey]:Disconnect()
			self._connections[eventKey] = nil
		end

		self._listeners[eventKey] = nil
	else
		if self._connections[eventKey] == nil then
			self._connections[eventKey] = event:Connect(function(...)
				if self._status == EventStatus.Enabled then
					self._listeners[eventKey](self._instance, ...)
				elseif self._status == EventStatus.Suspended then
					-- Store this event invocation to be fired when resume is
					-- called.

					local argumentCount = select("#", ...)
					table.insert(self._suspendedEventQueue, { eventKey, argumentCount, ... })
				end
			end)
		end

		self._listeners[eventKey] = listener
	end
end

function SingleEventManager:suspend()
	self._status = EventStatus.Suspended
end

function SingleEventManager:resume()
	-- If we're already resuming events for this instance, trying to resume
	-- again would cause a disaster.
	if self._isResuming then
		return
	end

	self._isResuming = true

	local index = 1

	-- More events might be added to the queue when evaluating events, so we
	-- need to be careful in order to preserve correct evaluation order.
	while index <= #self._suspendedEventQueue do
		local eventInvocation = self._suspendedEventQueue[index]
		local listener = self._listeners[eventInvocation[1]]
		local argumentCount = eventInvocation[2]

		-- The event might have been disconnected since suspension started; in
		-- this case, we drop the event.
		if listener ~= nil then
			-- Wrap the listener in a coroutine to catch errors and handle
			-- yielding correctly.
			local listenerCo = coroutine.create(listener)
			local success, result = coroutine.resume(
				listenerCo,
				self._instance,
				unpack(eventInvocation, 3, 2 + argumentCount))

			-- If the listener threw an error, we log it as a warning, since
			-- there's no way to write error text in Roblox Lua without killing
			-- our thread!
			if not success then
				Logging.warn("%s", result)
			end
		end

		index = index + 1
	end

	self._isResuming = false
	self._status = EventStatus.Enabled
	self._suspendedEventQueue = {}
end

return SingleEventManager]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX95365730B701418AB35841D483FA14A3">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">RobloxRenderer.spec</string>
						<string name="ScriptGuid">{582E2FF8-1FF8-4A9A-9C12-FBF7967FF647}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local Binding = require(script.Parent.Binding)
	local Children = require(script.Parent.PropMarkers.Children)
	local Component = require(script.Parent.Component)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createReconciler = require(script.Parent.createReconciler)
	local createRef = require(script.Parent.createRef)
	local createSpy = require(script.Parent.createSpy)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Portal = require(script.Parent.Portal)
	local Ref = require(script.Parent.PropMarkers.Ref)
	local Event = require(script.Parent.PropMarkers.Event)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)

	local reconciler = createReconciler(RobloxRenderer)

	describe("mountHostNode", function()
		it("should create instances with correct props", function()
			local parent = Instance.new("Folder")
			local value = "Hello!"
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(value)
			expect(root.Name).to.equal(key)
		end)

		it("should create children with correct names and props", function()
			local parent = Instance.new("Folder")
			local rootValue = "Hey there!"
			local childValue = 173
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = rootValue,
			}, {
				ChildA = createElement("IntValue", {
					Value = childValue,
				}),

				ChildB = createElement("Folder"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(rootValue)
			expect(root.Name).to.equal(key)

			expect(#root:GetChildren()).to.equal(2)

			local childA = root.ChildA
			local childB = root.ChildB

			expect(childA).to.be.ok()
			expect(childB).to.be.ok()

			expect(childA.ClassName).to.equal("IntValue")
			expect(childA.Value).to.equal(childValue)

			expect(childB.ClassName).to.equal("Folder")
		end)

		it("should attach Bindings to Roblox properties", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(instance.ClassName).to.equal("IntValue")
			expect(instance.Value).to.equal(10)

			update(20)

			expect(instance.Value).to.equal(20)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should connect Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(ref.current).to.be.ok()
			expect(ref.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call function refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local element = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(element, parent, key)

				local success, message = pcall(RobloxRenderer.mountHostNode, reconciler, node)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)
	end)

	describe("updateHostNode", function()
		it("should update node props and children", function()
			-- TODO: Break up test

			local parent = Instance.new("Folder")
			local key = "updateHostNodeTest"
			local firstValue = "foo"
			local newValue = "bar"

			local defaultStringValue = Instance.new("StringValue").Value

			local element = createElement("StringValue", {
				Value = firstValue
			}, {
				ChildA = createElement("IntValue", {
					Value = 1
				}),
				ChildB = createElement("BoolValue", {
					Value = true,
				}),
				ChildC = createElement("StringValue", {
					Value = "test",
				}),
				ChildD = createElement("StringValue", {
					Value = "test",
				})
			})

			local node = reconciler.createVirtualNode(element, parent, key)
			RobloxRenderer.mountHostNode(reconciler, node)

			-- Not testing mountHostNode's work here, only testing that the
			-- node is properly updated.

			local newElement = createElement("StringValue", {
				Value = newValue,
			}, {
				-- ChildA changes element type.
				ChildA = createElement("StringValue", {
					Value = "test"
				}),
				-- ChildB changes child properties.
				ChildB = createElement("BoolValue", {
					Value = false,
				}),
				-- ChildC should reset its Value property back to the default.
				ChildC = createElement("StringValue", {}),
				-- ChildD is deleted.
				-- ChildE is added.
				ChildE = createElement("Folder", {}),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			local root = parent[key]
			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(newValue)
			expect(#root:GetChildren()).to.equal(4)

			local childA = root.ChildA
			expect(childA.ClassName).to.equal("StringValue")
			expect(childA.Value).to.equal("test")

			local childB = root.ChildB
			expect(childB.ClassName).to.equal("BoolValue")
			expect(childB.Value).to.equal(false)

			local childC = root.ChildC
			expect(childC.ClassName).to.equal("StringValue")
			expect(childC.Value).to.equal(defaultStringValue)

			local childE = root.ChildE
			expect(childE.ClassName).to.equal("Folder")
		end)

		it("should update Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local bindingA, updateA = Binding.create(10)
			local element = createElement("IntValue", {
				Value = bindingA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			local bindingB, updateB = Binding.create(99)
			local newElement = createElement("IntValue", {
				Value = bindingB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(instance.Value).to.equal(99)

			updateA(123)

			expect(instance.Value).to.equal(99)

			updateB(123)

			expect(instance.Value).to.equal(123)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should update Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local refA = createRef()
			local refB = createRef()

			local element = createElement("Frame", {
				[Ref] = refA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(refA.current).to.equal(instance)
			expect(refB.current).never.to.be.ok()

			local newElement = createElement("Frame", {
				[Ref] = refB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(refA.current).never.to.be.ok()
			expect(refB.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call old function refs with nil and new function refs with a valid rbx", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRefA = createSpy()
			local spyRefB = createSpy()

			local element = createElement("Frame", {
				[Ref] = spyRefA.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRefA.callCount).to.equal(1)
			spyRefA:assertCalledWith(instance)
			expect(spyRefB.callCount).to.equal(0)

			local newElement = createElement("Frame", {
				[Ref] = spyRefB.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(spyRefA.callCount).to.equal(2)
			spyRefA:assertCalledWith(nil)
			expect(spyRefB.callCount).to.equal(1)
			spyRefB:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should not call function refs again if they didn't change", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
				[Ref] = spyRef.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			-- Not called again
			expect(spyRef.callCount).to.equal(1)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local firstElement = createElement("Frame")
				local secondElement = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(firstElement, parent, key)
				RobloxRenderer.mountHostNode(reconciler, node)

				local success, message = pcall(RobloxRenderer.updateHostNode, reconciler, node, secondElement)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)

		it("should delete instances when reconciling to nil children", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
			}, {
				child = createElement("Frame"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]
			expect(#instance:GetChildren()).to.equal(1)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)
			expect(#instance:GetChildren()).to.equal(0)
		end)
	end)

	describe("unmountHostNode", function()
		it("should delete instances from the inside-out", function()
			local parent = Instance.new("Folder")
			local key = "Root"
			local element = createElement("Folder", nil, {
				Child = createElement("Folder", nil, {
					Grandchild = createElement("Folder"),
				}),
			})

			local node = reconciler.mountVirtualNode(element, parent, key)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]
			expect(#root:GetChildren()).to.equal(1)

			local child = root:GetChildren()[1]
			expect(#child:GetChildren()).to.equal(1)

			local grandchild = child:GetChildren()[1]

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(grandchild.Parent).to.equal(nil)
			expect(child.Parent).to.equal(nil)
			expect(root.Parent).to.equal(nil)
		end)

		it("should unsubscribe from any Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			RobloxRenderer.unmountHostNode(reconciler, node)
			update(56)

			expect(instance.Value).to.equal(10)
		end)

		it("should clear Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(ref.current).to.be.ok()

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(ref.current).never.to.be.ok()
		end)

		it("should call function refs with nil", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(1)

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(2)
			spyRef:assertCalledWith(nil)
		end)
	end)

	describe("Portals", function()
		it("should create and destroy instances as children of `target`", function()
			local target = Instance.new("Folder")

			local function FunctionComponent(props)
				return createElement("IntValue", {
					Value = props.value,
				})
			end

			local element = createElement(Portal, {
				target = target,
			}, {
				folderOne = createElement("Folder"),
				folderTwo = createElement("Folder"),
				intValueOne = createElement(FunctionComponent, {
					value = 42,
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(3)

			expect(target:FindFirstChild("folderOne")).to.be.ok()
			expect(target:FindFirstChild("folderTwo")).to.be.ok()
			expect(target:FindFirstChild("intValueOne")).to.be.ok()
			expect(target:FindFirstChild("intValueOne").Value).to.equal(42)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should pass prop updates through to children", function()
			local target = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "A Host Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(1)

			local firstValue = target.ChildValue
			expect(firstValue.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#target:GetChildren()).to.equal(1)

			local secondValue = target.ChildValue
			expect(firstValue).to.equal(secondValue)
			expect(secondValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should throw if `target` is nil", function()
			-- TODO: Relax this restriction?
			local element = createElement(Portal)
			local hostParent = nil
			local hostKey = "Keys for Everyone"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should throw if `target` is not a Roblox instance", function()
			local element = createElement(Portal, {
				target = {},
			})
			local hostParent = nil
			local hostKey = "Unleash the keys!"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should recreate instances if `target` changes in an update", function()
			local firstTarget = Instance.new("Folder")
			local secondTarget = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = firstTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = secondTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#firstTarget:GetChildren()).to.equal(1)
			expect(#secondTarget:GetChildren()).to.equal(0)

			local firstChild = firstTarget.ChildValue
			expect(firstChild.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(1)

			local secondChild = secondTarget.ChildValue
			expect(secondChild.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(0)
		end)
	end)

	describe("Fragments", function()
		it("should parent the fragment's elements into the fragment's parent", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createElement("IntValue", {
					Value = 1,
				}),
				key2 = createElement("IntValue", {
					Value = 2,
				}),
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "test")

			expect(hostParent:FindFirstChild("key")).to.be.ok()
			expect(hostParent.key.ClassName).to.equal("IntValue")
			expect(hostParent.key.Value).to.equal(1)

			expect(hostParent:FindFirstChild("key2")).to.be.ok()
			expect(hostParent.key2.ClassName).to.equal("IntValue")
			expect(hostParent.key2.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should allow sibling fragment to have common keys", function()
			local hostParent = Instance.new("Folder")
			local hostKey = "Test"

			local function parent(props)
				return createElement("IntValue", {}, {
					fragmentA = createFragment({
						key = createElement("StringValue", {
							Value = "A",
						}),
						key2 = createElement("StringValue", {
							Value = "B",
						}),
					}),
					fragmentB = createFragment({
						key = createElement("StringValue", {
							Value = "C",
						}),
						key2 = createElement("StringValue", {
							Value = "D",
						}),
					}),
				})
			end

			local node = reconciler.mountVirtualNode(createElement(parent), hostParent, hostKey)
			local parentChildren = hostParent[hostKey]:GetChildren()

			expect(#parentChildren).to.equal(4)

			local childValues = {}

			for _, child in pairs(parentChildren) do
				expect(child.ClassName).to.equal("StringValue")
				childValues[child.Value] = 1 + (childValues[child.Value] or 0)
			end

			-- check if the StringValues have not collided
			expect(childValues.A).to.equal(1)
			expect(childValues.B).to.equal(1)
			expect(childValues.C).to.equal(1)
			expect(childValues.D).to.equal(1)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should render nested fragments", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createFragment({
					TheValue = createElement("IntValue", {
						Value = 1,
					}),
					TheOtherValue = createElement("IntValue", {
						Value = 2,
					})
				})
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "Test")

			expect(hostParent:FindFirstChild("TheValue")).to.be.ok()
			expect(hostParent.TheValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheValue.Value).to.equal(1)

			expect(hostParent:FindFirstChild("TheOtherValue")).to.be.ok()
			expect(hostParent.TheOtherValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheOtherValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should not add any instances if the fragment is empty", function()
			local hostParent = Instance.new("Folder")

			local node = reconciler.mountVirtualNode(createFragment({}), hostParent, "test")

			expect(#hostParent:GetChildren()).to.equal(0)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)
	end)

	describe("Context", function()
		it("should pass context values through Roblox host nodes", function()
			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = {
					hello = self:__getContext("hello")
				}
			end

			function Consumer:render()
			end

			local element = createElement("Folder", nil, {
				Consumer = createElement(Consumer)
			})
			local hostParent = nil
			local hostKey = "Context Test"
			local context = {
				hello = "world",
			}
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey, context)

			expect(capturedContext).never.to.equal(context)
			assertDeepEqual(capturedContext, context)

			reconciler.unmountVirtualNode(node)
		end)

		it("should pass context values through portal nodes", function()
			local target = Instance.new("Folder")

			local Provider = Component:extend("Provider")

			function Provider:init()
				self:__addContext("foo", "bar")
			end

			function Provider:render()
				return createElement("Folder", nil, self.props[Children])
			end

			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = {
					foo = self:__getContext("foo"),
				}
			end

			function Consumer:render()
				return nil
			end

			local element = createElement(Provider, nil, {
				Portal = createElement(Portal, {
					target = target,
				}, {
					Consumer = createElement(Consumer),
				})
			})
			local hostParent = nil
			local hostKey = "Some Key"
			reconciler.mountVirtualNode(element, hostParent, hostKey)

			assertDeepEqual(capturedContext, {
				foo = "bar"
			})
		end)
	end)

	describe("Legacy context", function()
		it("should pass context values through Roblox host nodes", function()
			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render()
			end

			local element = createElement("Folder", nil, {
				Consumer = createElement(Consumer)
			})
			local hostParent = nil
			local hostKey = "Context Test"
			local context = {
				hello = "world",
			}
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

			expect(capturedContext).never.to.equal(context)
			assertDeepEqual(capturedContext, context)

			reconciler.unmountVirtualNode(node)
		end)

		it("should pass context values through portal nodes", function()
			local target = Instance.new("Folder")

			local Provider = Component:extend("Provider")

			function Provider:init()
				self._context.foo = "bar"
			end

			function Provider:render()
				return createElement("Folder", nil, self.props[Children])
			end

			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render()
				return nil
			end

			local element = createElement(Provider, nil, {
				Portal = createElement(Portal, {
					target = target,
				}, {
					Consumer = createElement(Consumer),
				})
			})
			local hostParent = nil
			local hostKey = "Some Key"
			reconciler.mountVirtualNode(element, hostParent, hostKey)

			assertDeepEqual(capturedContext, {
				foo = "bar"
			})
		end)
	end)


	describe("Integration Tests", function()
		it("should not allow re-entrancy in updateChildren", function()
			local configValues = {
				tempFixUpdateChildrenReEntrancy = true,
			}

			GlobalConfig.scoped(configValues, function()
				local ChildComponent = Component:extend("ChildComponent")

				function ChildComponent:init()
					self:setState({
						firstTime = true
					})
				end

				local childCoroutine

				function ChildComponent:render()
					if self.state.firstTime then
						return createElement("Frame")
					end

					return createElement("TextLabel")
				end

				function ChildComponent:didMount()
					childCoroutine = coroutine.create(function()
						self:setState({
							firstTime = false
						})
					end)
				end

				local ParentComponent = Component:extend("ParentComponent")

				function ParentComponent:init()
					self:setState({
						count = 1
					})

					self.childAdded = function()
						self:setState({
							count = self.state.count + 1,
						})
					end
				end

				function ParentComponent:render()
					return createElement("Frame", {
						[Event.ChildAdded] = self.childAdded,
					}, {
						ChildComponent = createElement(ChildComponent, {
							count = self.state.count
						})
					})
				end

				local parent = Instance.new("ScreenGui")
				parent.Parent = game.CoreGui

				local tree = createElement(ParentComponent)

				local hostKey = "Some Key"
				local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

				coroutine.resume(childCoroutine)

				expect(#parent:GetChildren()).to.equal(1)

				local frame = parent:GetChildren()[1]

				expect(#frame:GetChildren()).to.equal(1)

				reconciler.unmountVirtualNode(instance)
			end)
		end)

		it("should not allow re-entrancy in updateChildren even with callbacks", function()
			local configValues = {
				tempFixUpdateChildrenReEntrancy = true,
			}

			GlobalConfig.scoped(configValues, function()
				local LowestComponent = Component:extend("LowestComponent")

				function LowestComponent:render()
					return createElement("Frame")
				end

				function LowestComponent:didMount()
					self.props.onDidMountCallback()
				end

				local ChildComponent = Component:extend("ChildComponent")

				function ChildComponent:init()
					self:setState({
						firstTime = true
					})
				end

				local childCoroutine

				function ChildComponent:render()
					if self.state.firstTime then
						return createElement("Frame")
					end

					return createElement(LowestComponent, {
						onDidMountCallback = self.props.onDidMountCallback
					})
				end

				function ChildComponent:didMount()
					childCoroutine = coroutine.create(function()
						self:setState({
							firstTime = false
						})
					end)
				end

				local ParentComponent = Component:extend("ParentComponent")

				local didMountCallbackCalled = 0

				function ParentComponent:init()
					self:setState({
						count = 1
					})

					self.onDidMountCallback = function()
						didMountCallbackCalled = didMountCallbackCalled + 1
						if self.state.count < 5 then
							self:setState({
								count = self.state.count + 1,
							})
						end
					end
				end

				function ParentComponent:render()
					return createElement("Frame", {

					}, {
						ChildComponent = createElement(ChildComponent, {
							count = self.state.count,
							onDidMountCallback = self.onDidMountCallback,
						})
					})
				end

				local parent = Instance.new("ScreenGui")
				parent.Parent = game.CoreGui

				local tree = createElement(ParentComponent)

				local hostKey = "Some Key"
				local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

				coroutine.resume(childCoroutine)

				expect(#parent:GetChildren()).to.equal(1)

				local frame = parent:GetChildren()[1]

				expect(#frame:GetChildren()).to.equal(1)

				-- In an ideal world, the didMount callback would probably be called only once. Since it is called by two different
				-- LowestComponent instantiations 2 is also acceptable though.
				expect(didMountCallbackCalled <= 2).to.equal(true)

				reconciler.unmountVirtualNode(instance)
			end)
		end)

		it("should never call unmount twice when tempFixUpdateChildrenReEntrancy is turned on", function()
			local configValues = {
				tempFixUpdateChildrenReEntrancy = true,
			}

			GlobalConfig.scoped(configValues, function()
				local unmountCounts = {}

				local function addUnmount(id)
					unmountCounts[id] = unmountCounts[id] + 1
				end

				local function addInit(id)
					unmountCounts[id] = 0
				end

				local LowestComponent = Component:extend("LowestComponent")
				function LowestComponent:init()
					addInit(tostring(self))
				end

				function LowestComponent:render()
					return createElement("Frame")
				end

				function LowestComponent:didMount()
					self.props.onDidMountCallback()
				end

				function LowestComponent:willUnmount()
					addUnmount(tostring(self))
				end

				local FirstComponent = Component:extend("FirstComponent")
				function FirstComponent:init()
					addInit(tostring(self))
				end

				function FirstComponent:render()
					return createElement("TextLabel")
				end

				function FirstComponent:willUnmount()
					addUnmount(tostring(self))
				end

				local ChildComponent = Component:extend("ChildComponent")

				function ChildComponent:init()
					addInit(tostring(self))

					self:setState({
						firstTime = true
					})
				end

				local childCoroutine

				function ChildComponent:render()
					if self.state.firstTime then
						return createElement(FirstComponent)
					end

					return createElement(LowestComponent, {
						onDidMountCallback = self.props.onDidMountCallback
					})
				end

				function ChildComponent:didMount()
					childCoroutine = coroutine.create(function()
						self:setState({
							firstTime = false
						})
					end)
				end

				function ChildComponent:willUnmount()
					addUnmount(tostring(self))
				end

				local ParentComponent = Component:extend("ParentComponent")

				local didMountCallbackCalled = 0

				function ParentComponent:init()
					self:setState({
						count = 1
					})

					self.onDidMountCallback = function()
						didMountCallbackCalled = didMountCallbackCalled + 1
						if self.state.count < 5 then
							self:setState({
								count = self.state.count + 1,
							})
						end
					end
				end

				function ParentComponent:render()
					return createElement("Frame", {

					}, {
						ChildComponent = createElement(ChildComponent, {
							count = self.state.count,
							onDidMountCallback = self.onDidMountCallback,
						})
					})
				end

				local parent = Instance.new("ScreenGui")
				parent.Parent = game.CoreGui

				local tree = createElement(ParentComponent)

				local hostKey = "Some Key"
				local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

				coroutine.resume(childCoroutine)

				expect(#parent:GetChildren()).to.equal(1)

				local frame = parent:GetChildren()[1]

				expect(#frame:GetChildren()).to.equal(1)

				-- In an ideal world, the didMount callback would probably be called only once. Since it is called by two different
				-- LowestComponent instantiations 2 is also acceptable though.
				expect(didMountCallbackCalled <= 2).to.equal(true)

				reconciler.unmountVirtualNode(instance)

				for _, value in pairs(unmountCounts) do
					expect(value).to.equal(1)
				end
			end)
		end)

		it("should never unmount a node unnecesarily in the case of re-rentry", function()
			local configValues = {
				tempFixUpdateChildrenReEntrancy = true,
			}

			GlobalConfig.scoped(configValues, function()
				local LowestComponent = Component:extend("LowestComponent")
				function LowestComponent:render()
					return createElement("Frame")
				end

				function LowestComponent:didUpdate(prevProps, prevState)
					if prevProps.firstTime and not self.props.firstTime then
						self.props.onChangedCallback()
					end
				end

				local ChildComponent = Component:extend("ChildComponent")

				function ChildComponent:init()
					self:setState({
						firstTime = true
					})
				end

				local childCoroutine

				function ChildComponent:render()
					return createElement(LowestComponent, {
						firstTime = self.state.firstTime,
						onChangedCallback = self.props.onChangedCallback
					})
				end

				function ChildComponent:didMount()
					childCoroutine = coroutine.create(function()
						self:setState({
							firstTime = false
						})
					end)
				end

				local ParentComponent = Component:extend("ParentComponent")

				local onChangedCallbackCalled = 0

				function ParentComponent:init()
					self:setState({
						count = 1
					})

					self.onChangedCallback = function()
						onChangedCallbackCalled = onChangedCallbackCalled + 1
						if self.state.count < 5 then
							self:setState({
								count = self.state.count + 1,
							})
						end
					end
				end

				function ParentComponent:render()
					return createElement("Frame", {

					}, {
						ChildComponent = createElement(ChildComponent, {
							count = self.state.count,
							onChangedCallback = self.onChangedCallback,
						})
					})
				end

				local parent = Instance.new("ScreenGui")
				parent.Parent = game.CoreGui

				local tree = createElement(ParentComponent)

				local hostKey = "Some Key"
				local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

				coroutine.resume(childCoroutine)

				expect(#parent:GetChildren()).to.equal(1)

				local frame = parent:GetChildren()[1]

				expect(#frame:GetChildren()).to.equal(1)

				expect(onChangedCallbackCalled).to.equal(1)

				reconciler.unmountVirtualNode(instance)
			end)
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX5C9EAD96ACAB4A10AD10080001F8AB40">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">RobloxRenderer</string>
						<string name="ScriptGuid">{074AD305-1C17-4BB3-94D0-030C2CB6A02A}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Renderer that deals in terms of Roblox Instances. This is the most
	well-supported renderer after NoopRenderer and is currently the only
	renderer that does anything.
]]

local Binding = require(script.Parent.Binding)
local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local SingleEventManager = require(script.Parent.SingleEventManager)
local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)
local Ref = require(script.Parent.PropMarkers.Ref)
local Type = require(script.Parent.Type)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local applyPropsError = [[
Error applying props:
	%s
In element:
%s
]]

local updatePropsError = [[
Error updating props:
	%s
In element:
%s
]]

local function identity(...)
	return ...
end

local function applyRef(ref, newHostObject)
	if ref == nil then
		return
	end

	if typeof(ref) == "function" then
		ref(newHostObject)
	elseif Type.of(ref) == Type.Binding then
		Binding.update(ref, newHostObject)
	else
		-- TODO (#197): Better error message
		error(("Invalid ref: Expected type Binding but got %s"):format(
			typeof(ref)
		))
	end
end

local function setRobloxInstanceProperty(hostObject, key, newValue)
	if newValue == nil then
		local hostClass = hostObject.ClassName
		local _, defaultValue = getDefaultInstanceProperty(hostClass, key)
		newValue = defaultValue
	end

	-- Assign the new value to the object
	hostObject[key] = newValue

	return
end

local function removeBinding(virtualNode, key)
	local disconnect = virtualNode.bindings[key]
	disconnect()
	virtualNode.bindings[key] = nil
end

local function attachBinding(virtualNode, key, newBinding)
	local function updateBoundProperty(newValue)
		local success, errorMessage = xpcall(function()
			setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
		end, identity)

		if not success then
			local source = virtualNode.currentElement.source

			if source == nil then
				source = "<enable element tracebacks>"
			end

			local fullMessage = updatePropsError:format(errorMessage, source)
			error(fullMessage, 0)
		end
	end

	if virtualNode.bindings == nil then
		virtualNode.bindings = {}
	end

	virtualNode.bindings[key] = Binding.subscribe(newBinding, updateBoundProperty)

	updateBoundProperty(newBinding:getValue())
end

local function detachAllBindings(virtualNode)
	if virtualNode.bindings ~= nil then
		for _, disconnect in pairs(virtualNode.bindings) do
			disconnect()
		end
	end
end

local function applyProp(virtualNode, key, newValue, oldValue)
	if newValue == oldValue then
		return
	end

	if key == Ref or key == Children then
		-- Refs and children are handled in a separate pass
		return
	end

	local internalKeyType = Type.of(key)

	if internalKeyType == Type.HostEvent or internalKeyType == Type.HostChangeEvent then
		if virtualNode.eventManager == nil then
			virtualNode.eventManager = SingleEventManager.new(virtualNode.hostObject)
		end

		local eventName = key.name

		if internalKeyType == Type.HostChangeEvent then
			virtualNode.eventManager:connectPropertyChange(eventName, newValue)
		else
			virtualNode.eventManager:connectEvent(eventName, newValue)
		end

		return
	end

	local newIsBinding = Type.of(newValue) == Type.Binding
	local oldIsBinding = Type.of(oldValue) == Type.Binding

	if oldIsBinding then
		removeBinding(virtualNode, key)
	end

	if newIsBinding then
		attachBinding(virtualNode, key, newValue)
	else
		setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
	end
end

local function applyProps(virtualNode, props)
	for propKey, value in pairs(props) do
		applyProp(virtualNode, propKey, value, nil)
	end
end

local function updateProps(virtualNode, oldProps, newProps)
	-- Apply props that were added or updated
	for propKey, newValue in pairs(newProps) do
		local oldValue = oldProps[propKey]

		applyProp(virtualNode, propKey, newValue, oldValue)
	end

	-- Clean up props that were removed
	for propKey, oldValue in pairs(oldProps) do
		local newValue = newProps[propKey]

		if newValue == nil then
			applyProp(virtualNode, propKey, nil, oldValue)
		end
	end
end

local RobloxRenderer = {}

function RobloxRenderer.isHostObject(target)
	return typeof(target) == "Instance"
end

function RobloxRenderer.mountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement
	local hostParent = virtualNode.hostParent
	local hostKey = virtualNode.hostKey

	if config.internalTypeChecks then
		internalAssert(ElementKind.of(element) == ElementKind.Host, "Element at given node is not a host Element")
	end
	if config.typeChecks then
		assert(element.props.Name == nil, "Name can not be specified as a prop to a host component in Roact.")
		assert(element.props.Parent == nil, "Parent can not be specified as a prop to a host component in Roact.")
	end

	local instance = Instance.new(element.component)
	virtualNode.hostObject = instance

	local success, errorMessage = xpcall(function()
		applyProps(virtualNode, element.props)
	end, identity)

	if not success then
		local source = element.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = applyPropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	instance.Name = tostring(hostKey)

	local children = element.props[Children]

	if children ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	instance.Parent = hostParent
	virtualNode.hostObject = instance

	applyRef(element.props[Ref], instance)

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end
end

function RobloxRenderer.unmountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement

	applyRef(element.props[Ref], nil)

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end

	detachAllBindings(virtualNode)

	virtualNode.hostObject:Destroy()
end

function RobloxRenderer.updateHostNode(reconciler, virtualNode, newElement)
	local oldProps = virtualNode.currentElement.props
	local newProps = newElement.props

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:suspend()
	end

	-- If refs changed, detach the old ref and attach the new one
	if oldProps[Ref] ~= newProps[Ref] then
		applyRef(oldProps[Ref], nil)
		applyRef(newProps[Ref], virtualNode.hostObject)
	end

	local success, errorMessage = xpcall(function()
		updateProps(virtualNode, oldProps, newProps)
	end, identity)

	if not success then
		local source = newElement.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = updatePropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	local children = newElement.props[Children]
	if children ~= nil or oldProps[Children] ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end

	return virtualNode
end

return RobloxRenderer
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX7FD1AE28D4BF4C8BA975106B5BC1D0DB">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">PureComponent.spec</string>
						<string name="ScriptGuid">{17EA51B5-899C-46D6-9E27-5341291F5413}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local createReconciler = require(script.Parent.createReconciler)

	local PureComponent = require(script.Parent.PureComponent)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be extendable", function()
		local MyComponent = PureComponent:extend("MyComponent")

		expect(MyComponent).to.be.ok()
	end)

	it("should skip updates for shallow-equal props", function()
		local updateCount = 0
		local setValue

		local PureChild = PureComponent:extend("PureChild")

		function PureChild:willUpdate()
			updateCount = updateCount + 1
		end

		function PureChild:render()
			return nil
		end

		local PureContainer = PureComponent:extend("PureContainer")

		function PureContainer:init()
			self.state = {
				value = 0,
			}
		end

		function PureContainer:didMount()
			setValue = function(value)
				self:setState({
					value = value,
				})
			end
		end

		function PureContainer:render()
			return createElement(PureChild, {
				value = self.state.value,
			})
		end

		local element = createElement(PureContainer)
		local tree = noopReconciler.mountVirtualTree(element, nil, "PureComponent Tree")

		expect(updateCount).to.equal(0)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(2)

		expect(updateCount).to.equal(2)

		setValue(1)

		expect(updateCount).to.equal(3)

		noopReconciler.unmountVirtualTree(tree)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX5B9D84C9DED04CC29658EA19BF9432EB">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">PureComponent</string>
						<string name="ScriptGuid">{E43DBE70-AB68-4E4A-BBDC-7A76ACA1A069}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A version of Component with a `shouldUpdate` method that forces the
	resulting component to be pure.
]]

local Component = require(script.Parent.Component)

local PureComponent = Component:extend("PureComponent")

-- When extend()ing a component, you don't get an extend method.
-- This is to promote composition over inheritance.
-- PureComponent is an exception to this rule.
PureComponent.extend = Component.extend

function PureComponent:shouldUpdate(newProps, newState)
	-- In a vast majority of cases, if state updated, something has updated.
	-- We don't bother checking in this case.
	if newState ~= self.state then
		return true
	end

	if newProps == self.props then
		return false
	end

	for key, value in pairs(newProps) do
		if self.props[key] ~= value then
			return true
		end
	end

	for key, value in pairs(self.props) do
		if newProps[key] ~= value then
			return true
		end
	end

	return false
end

return PureComponent]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="Folder" referent="RBX00FC1B608C274917B414C0A5D3636B13">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">PropMarkers</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBXB1D72DC49206405DB632510DBDDAD63A">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Ref</string>
							<string name="ScriptGuid">{F4AE672F-CEA4-4F1E-8654-E0579FB573CC}</string>
							<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Parent.Symbol)

local Ref = Symbol.named("Ref")

return Ref]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX3DF458E4975846A69BEA52A5D5461F3C">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Event.spec</string>
							<string name="ScriptGuid">{F84E6C28-FC4B-46D5-93FC-F9AEC08BEC5A}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Event = require(script.Parent.Event)

	it("should yield event objects when indexed", function()
		expect(Type.of(Event.MouseButton1Click)).to.equal(Type.HostEvent)
		expect(Type.of(Event.Touched)).to.equal(Type.HostEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Event.MouseButton1Click
		local b = Event.MouseButton1Click
		local c = Event.Touched

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX9E1C9BEEDF964B34BE45D750337D70C0">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Event</string>
							<string name="ScriptGuid">{9C79D97D-E23B-4C16-ABEC-D5A5A8DC0E3D}</string>
							<ProtectedString name="Source"><![CDATA[--[[
	Index into `Event` to get a prop key for attaching to an event on a Roblox
	Instance.

	Example:

		Roact.createElement("TextButton", {
			Text = "Hello, world!",

			[Roact.Event.MouseButton1Click] = function(rbx)
				print("Clicked", rbx)
			end
		})
]]

local Type = require(script.Parent.Parent.Type)

local Event = {}

local eventMetatable = {
	__tostring = function(self)
		return ("RoactHostEvent(%s)"):format(self.name)
	end,
}

setmetatable(Event, {
	__index = function(self, eventName)
		local event = {
			[Type] = Type.HostEvent,
			name = eventName,
		}

		setmetatable(event, eventMetatable)

		Event[eventName] = event

		return event
	end,
})

return Event
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXFED6C9531296488EB2ADE508E2B74254">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Children</string>
							<string name="ScriptGuid">{50C4F765-B2BA-48E1-888E-18C018C0164B}</string>
							<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Parent.Symbol)

local Children = Symbol.named("Children")

return Children]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXCB9C030EC4F248A2A508E06E37BCAEE4">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Change.spec</string>
							<string name="ScriptGuid">{F2D1D14A-AEC1-457F-944B-D95621A08836}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Change = require(script.Parent.Change)

	it("should yield change listener objects when indexed", function()
		expect(Type.of(Change.Text)).to.equal(Type.HostChangeEvent)
		expect(Type.of(Change.Selected)).to.equal(Type.HostChangeEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Change.Text
		local b = Change.Text
		local c = Change.Selected

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXFE85D36C11BA4253BD071813A9074F12">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Change</string>
							<string name="ScriptGuid">{3D9435D6-1758-448C-B61B-1579F7421618}</string>
							<ProtectedString name="Source"><![CDATA[--[[
	Change is used to generate special prop keys that can be used to connect to
	GetPropertyChangedSignal.

	Generally, Change is indexed by a Roblox property name:

		Roact.createElement("TextBox", {
			[Roact.Change.Text] = function(rbx)
				print("The TextBox", rbx, "changed text to", rbx.Text)
			end,
		})
]]

local Type = require(script.Parent.Parent.Type)

local Change = {}

local changeMetatable = {
	__tostring = function(self)
		return ("RoactHostChangeEvent(%s)"):format(self.name)
	end,
}

setmetatable(Change, {
	__index = function(self, propertyName)
		local changeListener = {
			[Type] = Type.HostChangeEvent,
			name = propertyName,
		}

		setmetatable(changeListener, changeMetatable)
		Change[propertyName] = changeListener

		return changeListener
	end,
})

return Change
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBX51722E34E9744A41B93D8BAFEFFCD224">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Portal</string>
						<string name="ScriptGuid">{7018B19C-02A6-4203-8B17-A261DCDA9811}</string>
						<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

local Portal = Symbol.named("Portal")

return Portal]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXB8A2372073E24F6BAC5997029458D50B">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">NoopRenderer</string>
						<string name="ScriptGuid">{D136D59E-C12F-455F-90C9-CF1B2E1A04F7}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Reference renderer intended for use in tests as well as for documenting the
	minimum required interface for a Roact renderer.
]]

local NoopRenderer = {}

function NoopRenderer.isHostObject(target)
	-- Attempting to use NoopRenderer to target a Roblox instance is almost
	-- certainly a mistake.
	return target == nil
end

function NoopRenderer.mountHostNode(reconciler, node)
end

function NoopRenderer.unmountHostNode(reconciler, node)
end

function NoopRenderer.updateHostNode(reconciler, node, newElement)
	return node
end

return NoopRenderer]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXA5E32F7816D7493F8BFF71EF92E213A8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">None</string>
						<string name="ScriptGuid">{92B9F644-99BF-4F4A-9796-3D1007CCF14A}</string>
						<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

-- Marker used to specify that the value is nothing, because nil cannot be
-- stored in tables.
local None = Symbol.named("None")

return None]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX6D703C2FDBE645F28BE4E3168DC3007C">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Logging</string>
						<string name="ScriptGuid">{CF1DE24C-14E2-43DA-B6EB-0B453F9D9FE8}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Centralized place to handle logging. Lets us:
	- Unit test log output via `Logging.capture`
	- Disable verbose log messages when not debugging Roact

	This should be broken out into a separate library with the addition of
	scoping and logging configuration.
]]

-- Determines whether log messages will go to stdout/stderr
local outputEnabled = true

-- A set of LogInfo objects that should have messages inserted into them.
-- This is a set so that nested calls to Logging.capture will behave.
local collectors = {}

-- A set of all stack traces that have called warnOnce.
local onceUsedLocations = {}

--[[
	Indent a potentially multi-line string with the given number of tabs, in
	addition to any indentation the string already has.
]]
local function indent(source, indentLevel)
	local indentString = ("\t"):rep(indentLevel)

	return indentString .. source:gsub("\n", "\n" .. indentString)
end

--[[
	Indents a list of strings and then concatenates them together with newlines
	into a single string.
]]
local function indentLines(lines, indentLevel)
	local outputBuffer = {}

	for _, line in ipairs(lines) do
		table.insert(outputBuffer, indent(line, indentLevel))
	end

	return table.concat(outputBuffer, "\n")
end

local logInfoMetatable = {}

--[[
	Automatic coercion to strings for LogInfo objects to enable debugging them
	more easily.
]]
function logInfoMetatable:__tostring()
	local outputBuffer = {"LogInfo {"}

	local errorCount = #self.errors
	local warningCount = #self.warnings
	local infosCount = #self.infos

	if errorCount + warningCount + infosCount == 0 then
		table.insert(outputBuffer, "\t(no messages)")
	end

	if errorCount > 0 then
		table.insert(outputBuffer, ("\tErrors (%d) {"):format(errorCount))
		table.insert(outputBuffer, indentLines(self.errors, 2))
		table.insert(outputBuffer, "\t}")
	end

	if warningCount > 0 then
		table.insert(outputBuffer, ("\tWarnings (%d) {"):format(warningCount))
		table.insert(outputBuffer, indentLines(self.warnings, 2))
		table.insert(outputBuffer, "\t}")
	end

	if infosCount > 0 then
		table.insert(outputBuffer, ("\tInfos (%d) {"):format(infosCount))
		table.insert(outputBuffer, indentLines(self.infos, 2))
		table.insert(outputBuffer, "\t}")
	end

	table.insert(outputBuffer, "}")

	return table.concat(outputBuffer, "\n")
end

local function createLogInfo()
	local logInfo = {
		errors = {},
		warnings = {},
		infos = {},
	}

	setmetatable(logInfo, logInfoMetatable)

	return logInfo
end

local Logging = {}

--[[
	Invokes `callback`, capturing all output that happens during its execution.

	Output will not go to stdout or stderr and will instead be put into a
	LogInfo object that is returned. If `callback` throws, the error will be
	bubbled up to the caller of `Logging.capture`.
]]
function Logging.capture(callback)
	local collector = createLogInfo()

	local wasOutputEnabled = outputEnabled
	outputEnabled = false
	collectors[collector] = true

	local success, result = pcall(callback)

	collectors[collector] = nil
	outputEnabled = wasOutputEnabled

	assert(success, result)

	return collector
end

--[[
	Issues a warning with an automatically attached stack trace.
]]
function Logging.warn(messageTemplate, ...)
	local message = messageTemplate:format(...)

	for collector in pairs(collectors) do
		table.insert(collector.warnings, message)
	end

	-- debug.traceback inserts a leading newline, so we trim it here
	local trace = debug.traceback("", 2):sub(2)
	local fullMessage = ("%s\n%s"):format(message, indent(trace, 1))

	if outputEnabled then
		warn(fullMessage)
	end
end

--[[
	Issues a warning like `Logging.warn`, but only outputs once per call site.

	This is useful for marking deprecated functions that might be called a lot;
	using `warnOnce` instead of `warn` will reduce output noise while still
	correctly marking all call sites.
]]
function Logging.warnOnce(messageTemplate, ...)
	local trace = debug.traceback()

	if onceUsedLocations[trace] then
		return
	end

	onceUsedLocations[trace] = true
	Logging.warn(messageTemplate, ...)
end

return Logging]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX3B0792AD769643AE8D7E2A76AE715CCA">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GlobalConfig.spec</string>
						<string name="ScriptGuid">{79988837-D01F-496F-A8EC-7A3CD3A94C19}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local GlobalConfig = require(script.Parent.GlobalConfig)

	it("should have the correct methods", function()
		expect(GlobalConfig).to.be.ok()
		expect(GlobalConfig.set).to.be.ok()
		expect(GlobalConfig.get).to.be.ok()
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX3BFCAF4020344DAD89C755E839C66243">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GlobalConfig</string>
						<string name="ScriptGuid">{B5ED5C8A-E9C8-4D0A-B405-C6146F06DBC8}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Exposes a single instance of a configuration as Roact's GlobalConfig.
]]

local Config = require(script.Parent.Config)

return Config.new()]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8E1324FC0BFE49FAA0C033F51BC7D922">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ElementUtils.spec</string>
						<string name="ScriptGuid">{67A82A77-F449-4705-9A71-D0A99DB4B5D9}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local ElementUtils = require(script.Parent.ElementUtils)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local Type = require(script.Parent.Type)

	describe("iterateElements", function()
		it("should iterate once for a single child", function()
			local child = createElement("TextLabel")
			local iterator = ElementUtils.iterateElements(child)
			local iteratedKey, iteratedChild = iterator()
			-- For single elements, the key should be UseParentKey
			expect(iteratedKey).to.equal(ElementUtils.UseParentKey)
			expect(iteratedChild).to.equal(child)

			iteratedKey = iterator()
			expect(iteratedKey).to.equal(nil)
		end)

		it("should iterate over tables", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			local seenChildren = {}
			local count = 0

			for key, child in ElementUtils.iterateElements(children) do
				expect(typeof(key)).to.equal("string")
				expect(Type.of(child)).to.equal(Type.Element)
				seenChildren[child] = key
				count = count + 1
			end

			expect(count).to.equal(2)
			expect(seenChildren[children.a]).to.equal("a")
			expect(seenChildren[children.b]).to.equal("b")
		end)

		it("should return a zero-element iterator for booleans", function()
			local booleanIterator = ElementUtils.iterateElements(false)
			expect(booleanIterator()).to.equal(nil)
		end)

		it("should return a zero-element iterator for nil", function()
			local nilIterator = ElementUtils.iterateElements(nil)
			expect(nilIterator()).to.equal(nil)
		end)

		it("should throw if given an illegal value", function()
			expect(function()
				ElementUtils.iterateElements(1)
			end).to.throw()
		end)
	end)

	describe("getElementByKey", function()
		it("should return nil for booleans", function()
			expect(ElementUtils.getElementByKey(true, "test")).to.equal(nil)
		end)

		it("should return nil for nil", function()
			expect(ElementUtils.getElementByKey(nil, "test")).to.equal(nil)
		end)

		describe("single elements", function()
			local element = createElement("TextLabel")

			it("should return the element if the key is UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, ElementUtils.UseParentKey)).to.equal(element)
			end)

			it("should return nil if the key is not UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, "test")).to.equal(nil)
			end)
		end)

		it("should return the corresponding element from a table", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(children.a)
			expect(ElementUtils.getElementByKey(children, "b")).to.equal(children.b)
		end)

		it("should return nil if the key does not exist", function()
			local children = createFragment({})

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(nil)
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX7C2910F038D54A088745938B87AD2E1F">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ElementUtils</string>
						<string name="ScriptGuid">{F91BB4FF-87B1-4721-9286-EABC2A535E23}</string>
						<ProtectedString name="Source"><![CDATA[local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)

local function noop()
	return nil
end

local ElementUtils = {}

--[[
	A signal value indicating that a child should use its parent's key, because
	it has no key of its own.

	This occurs when you return only one element from a function component or
	stateful render function.
]]
ElementUtils.UseParentKey = Symbol.named("UseParentKey")

--[[
	Returns an iterator over the children of an element.
	`elementOrElements` may be one of:
	* a boolean
	* nil
	* a single element
	* a fragment
	* a table of elements

	If `elementOrElements` is a boolean or nil, this will return an iterator with
	zero elements.

	If `elementOrElements` is a single element, this will return an iterator with
	one element: a tuple where the first value is ElementUtils.UseParentKey, and
	the second is the value of `elementOrElements`.

	If `elementOrElements` is a fragment or a table, this will return an iterator
	over all the elements of the array.

	If `elementOrElements` is none of the above, this function will throw.
]]
function ElementUtils.iterateElements(elementOrElements)
	local richType = Type.of(elementOrElements)

	-- Single child
	if richType == Type.Element then
		local called = false

		return function()
			if called then
				return nil
			else
				called = true
				return ElementUtils.UseParentKey, elementOrElements
			end
		end
	end

	local regularType = typeof(elementOrElements)

	if elementOrElements == nil or regularType == "boolean" then
		return noop
	end

	if regularType == "table" then
		return pairs(elementOrElements)
	end

	error("Invalid elements")
end

--[[
	Gets the child corresponding to a given key, respecting Roact's rules for
	children. Specifically:
	* If `elements` is nil or a boolean, this will return `nil`, regardless of
		the key given.
	* If `elements` is a single element, this will return `nil`, unless the key
		is ElementUtils.UseParentKey.
	* If `elements` is a table of elements, this will return `elements[key]`.
]]
function ElementUtils.getElementByKey(elements, hostKey)
	if elements == nil or typeof(elements) == "boolean" then
		return nil
	end

	if Type.of(elements) == Type.Element then
		if hostKey == ElementUtils.UseParentKey then
			return elements
		end

		return nil
	end

	if typeof(elements) == "table" then
		return elements[hostKey]
	end

	error("Invalid elements")
end

return ElementUtils]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXD6546C4024674F7B988B9D8CC120799B">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ElementKind.spec</string>
						<string name="ScriptGuid">{98144296-13F9-4906-9D2F-E21C902F7742}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Portal = require(script.Parent.Portal)
	local Component = require(script.Parent.Component)

	local ElementKind = require(script.Parent.ElementKind)

	describe("of", function()
		it("should return nil for non-table values", function()
			expect(ElementKind.of(nil)).to.equal(nil)
			expect(ElementKind.of(5)).to.equal(nil)
			expect(ElementKind.of(newproxy(true))).to.equal(nil)
		end)

		it("should return nil for table values without an ElementKind key", function()
			expect(ElementKind.of({})).to.equal(nil)
		end)

		it("should return the ElementKind from a table", function()
			local value = {
				[ElementKind] = ElementKind.Stateful,
			}

			expect(ElementKind.of(value)).to.equal(ElementKind.Stateful)
		end)
	end)

	describe("fromComponent", function()
		it("should handle host components", function()
			expect(ElementKind.fromComponent("foo")).to.equal(ElementKind.Host)
		end)

		it("should handle function components", function()
			local function foo()
			end

			expect(ElementKind.fromComponent(foo)).to.equal(ElementKind.Function)
		end)

		it("should handle stateful components", function()
			local Foo = Component:extend("Foo")

			expect(ElementKind.fromComponent(Foo)).to.equal(ElementKind.Stateful)
		end)

		it("should handle portals", function()
			expect(ElementKind.fromComponent(Portal)).to.equal(ElementKind.Portal)
		end)

		it("should return nil for invalid inputs", function()
			expect(ElementKind.fromComponent(5)).to.equal(nil)
			expect(ElementKind.fromComponent(newproxy(true))).to.equal(nil)
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXE25D3B3DE07E40A7849FB00B2F219CD5">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ElementKind</string>
						<string name="ScriptGuid">{BCF449AC-F3CC-4350-8FC3-22AEA6FA7B5C}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Contains markers for annotating the type of an element.

	Use `ElementKind` as a key, and values from it as the value.

		local element = {
			[ElementKind] = ElementKind.Host,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)
local Portal = require(script.Parent.Portal)

local ElementKind = newproxy(true)

local ElementKindInternal = {
	Portal = Symbol.named("Portal"),
	Host = Symbol.named("Host"),
	Function = Symbol.named("Function"),
	Stateful = Symbol.named("Stateful"),
	Fragment = Symbol.named("Fragment"),
}

function ElementKindInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[ElementKind]
end

local componentTypesToKinds = {
	["string"] = ElementKindInternal.Host,
	["function"] = ElementKindInternal.Function,
	["table"] = ElementKindInternal.Stateful,
}

function ElementKindInternal.fromComponent(component)
	if component == Portal then
		return ElementKind.Portal
	else
		return componentTypesToKinds[typeof(component)]
	end
end

getmetatable(ElementKind).__index = ElementKindInternal

strict(ElementKindInternal, "ElementKind")

return ElementKind]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8B9B99C56DC34012A28728F440D82D23">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Config.spec</string>
						<string name="ScriptGuid">{924F7FCC-4547-4213-82B1-D3F111EDA1D6}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Config = require(script.Parent.Config)

	it("should accept valid configuration", function()
		local config = Config.new()
		local values = config.get()

		expect(values.elementTracing).to.equal(false)

		config.set({
			elementTracing = true,
		})

		expect(values.elementTracing).to.equal(true)
	end)

	it("should reject invalid configuration keys", function()
		local config = Config.new()

		local badKey = "garblegoop"

		local ok, err = pcall(function()
			config.set({
				[badKey] = true,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention our bad key somewhere.
		expect(err:find(badKey)).to.be.ok()
	end)

	it("should reject invalid configuration values", function()
		local config = Config.new()

		local goodKey = "elementTracing"
		local badValue = "Hello there!"

		local ok, err = pcall(function()
			config.set({
				[goodKey] = badValue,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention both our key and value
		expect(err:find(goodKey)).to.be.ok()
		expect(err:find(badValue)).to.be.ok()
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXB7D046204DE3462F8013DDC8BDFF4F18">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Config</string>
						<string name="ScriptGuid">{693F0150-7F12-42D4-97CB-27384F299C70}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Exposes an interface to set global configuration values for Roact.

	Configuration can only occur once, and should only be done by an application
	using Roact, not a library.

	Any keys that aren't recognized will cause errors. Configuration is only
	intended for configuring Roact itself, not extensions or libraries.

	Configuration is expected to be set immediately after loading Roact. Setting
	configuration values after an application starts may produce unpredictable
	behavior.
]]

-- Every valid configuration value should be non-nil in this table.
local defaultConfig = {
	-- Enables asserts for internal Roact APIs. Useful for debugging Roact itself.
	["internalTypeChecks"] = false,
	-- Enables stricter type asserts for Roact's public API.
	["typeChecks"] = false,
	-- Enables storage of `debug.traceback()` values on elements for debugging.
	["elementTracing"] = false,
	-- Enables validation of component props in stateful components.
	["propValidation"] = false,

	-- Temporary config for enabling a bug fix for processing events based on updates to child instances
	-- outside of the standard lifecycle.
	["tempFixUpdateChildrenReEntrancy"] = false,
}

-- Build a list of valid configuration values up for debug messages.
local defaultConfigKeys = {}
for key in pairs(defaultConfig) do
	table.insert(defaultConfigKeys, key)
end

local Config = {}

function Config.new()
	local self = {}

	self._currentConfig = setmetatable({}, {
		__index = function(_, key)
			local message = (
				"Invalid global configuration key %q. Valid configuration keys are: %s"
			):format(
				tostring(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end
	})

	-- We manually bind these methods here so that the Config's methods can be
	-- used without passing in self, since they eventually get exposed on the
	-- root Roact object.
	self.set = function(...)
		return Config.set(self, ...)
	end

	self.get = function(...)
		return Config.get(self, ...)
	end

	self.scoped = function(...)
		return Config.scoped(self, ...)
	end

	self.set(defaultConfig)

	return self
end

function Config:set(configValues)
	-- Validate values without changing any configuration.
	-- We only want to apply this configuration if it's valid!
	for key, value in pairs(configValues) do
		if defaultConfig[key] == nil then
			local message = (
				"Invalid global configuration key %q (type %s). Valid configuration keys are: %s"
			):format(
				tostring(key),
				typeof(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end

		-- Right now, all configuration values must be boolean.
		if typeof(value) ~= "boolean" then
			local message = (
				"Invalid value %q (type %s) for global configuration key %q. Valid values are: true, false"
			):format(
				tostring(value),
				typeof(value),
				tostring(key)
			)

			error(message, 3)
		end

		self._currentConfig[key] = value
	end
end

function Config:get()
	return self._currentConfig
end

function Config:scoped(configValues, callback)
	local previousValues = {}
	for key, value in pairs(self._currentConfig) do
		previousValues[key] = value
	end

	self.set(configValues)

	local success, result = pcall(callback)

	self.set(previousValues)

	assert(success, result)
end

return Config]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXF3B3E0882A084097B0383D44F8684B68">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ComponentLifecyclePhase</string>
						<string name="ScriptGuid">{8DA219D6-1DE4-48C6-816C-982D4A05A205}</string>
						<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local ComponentLifecyclePhase = strict({
	-- Component methods
	Init = Symbol.named("init"),
	Render = Symbol.named("render"),
	ShouldUpdate = Symbol.named("shouldUpdate"),
	WillUpdate = Symbol.named("willUpdate"),
	DidMount = Symbol.named("didMount"),
	DidUpdate = Symbol.named("didUpdate"),
	WillUnmount = Symbol.named("willUnmount"),

	-- Phases describing reconciliation status
	ReconcileChildren = Symbol.named("reconcileChildren"),
	Idle = Symbol.named("idle"),
}, "ComponentLifecyclePhase")

return ComponentLifecyclePhase]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="Folder" referent="RBX5049DAD64C8D42CDA4F34EA6BDB903B1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Component.spec</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBX50BB5EC3C26A4709ACCB01BFA1F7EE7A">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">willUpdate.spec</string>
							<string name="ScriptGuid">{D693F54D-3CEB-4180-8B0F-FA70908CFD0A}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, newProps)
		assertDeepEqual(values.newState, {})
	end)

	it("it should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")
		local setComponentState

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:init()
			setComponentState = function(state)
				self:setState(state)
			end

			self:setState({
				foo = 1
			})
		end

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(willUpdateSpy.callCount).to.equal(0)

		setComponentState({
			foo = 2
		})

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, {})
		assertDeepEqual(values.newState, {
			foo = 2
		})
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXA2592BEFD6254603866250677FB4DA2C">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">willUnmount.spec</string>
							<string name="ScriptGuid">{7ACE7AE7-55BB-492D-B7EC-A6512912C139}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when unmounted", function()
		local MyComponent = Component:extend("MyComponent")

		local willUnmountSpy = createSpy()

		MyComponent.willUnmount = willUnmountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)
		noopReconciler.unmountVirtualNode(node)

		expect(willUnmountSpy.callCount).to.equal(1)

		local values = willUnmountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX9FBD59E7F60341F09BB10857CBCBAC79">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">validateProps.spec</string>
							<string name="ScriptGuid">{BDD3004C-CB22-4D87-AE0E-5E7B4C25DE46}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should be invoked when props change", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
			})
		end)
	end)

	it("should not be invoked when state changes", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local setStateCallback = nil
			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1
			})

			setStateCallback({
				b = 1
			})

			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should throw if validateProps is not a function", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = 1

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should throw if validateProps returns false", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = function()
				return false
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should include the component name in the error message", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = function()
				return false
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			local success, error = pcall(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end)

			expect(success).to.equal(false)
			local startIndex = error:find("MyComponent")
			expect(startIndex).to.be.ok()
		end)
	end)

	it("should be invoked after defaultProps are applied", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			MyComponent.defaultProps = {
				b = 2,
			}

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
				b = 2,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
				b = 2,
			})
		end)
	end)

	it("should not be invoked if the flag is off", function()
		local config = {
			propValidation = false,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(0)

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(0)
		end)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX467EAE3774374FAD9408FA50B6063743">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">shouldUpdate.spec</string>
							<string name="ScriptGuid">{CA89AC22-1267-468F-B65A-5BA9E45E4806}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when props update", function()
		local MyComponent = Component:extend("MyComponent")

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		assertDeepEqual(values.newProps, newProps)

		assertDeepEqual(capturedProps, initialProps)

		expect(values.newState).to.equal(capturedState)
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when state is updated", function()
		local MyComponent = Component:extend("MyComponent")

		local initialState = {
			a = 1,
		}

		local setState
		local initState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)

			initState = self.state
		end

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newState = {
			a = 2,
			b = 3,
		}

		setState(newState)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		expect(values.newProps).to.equal(capturedProps)
		assertDeepEqual(capturedProps, {})

		assertDeepEqual(capturedState, initialState)
		expect(capturedState).to.equal(initState)
		assertDeepEqual(values.newState, newState)
	end)

	it("should not abort an update when returning true", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return true
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)
	end)

	it("should abort an update when retuning false", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return false
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(1)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX0076D84A88F540C18BDD9D55FF9E977F">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">setState.spec</string>
							<string name="ScriptGuid">{C890AF60-76EB-4799-9B5D-384BF342FEF3}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	describe("setState", function()
		it("should not trigger an extra update when called in init", function()
			local renderCount = 0
			local updateCount = 0
			local capturedState

			local InitComponent = Component:extend("InitComponent")

			function InitComponent:init()
				self:setState({
					a = 1
				})
			end

			function InitComponent:willUpdate()
				updateCount = updateCount + 1
			end

			function InitComponent:render()
				renderCount = renderCount + 1
				capturedState = self.state
				return nil
			end

			local initElement = createElement(InitComponent)

			noopReconciler.mountVirtualTree(initElement)

			expect(renderCount).to.equal(1)
			expect(updateCount).to.equal(0)
			expect(capturedState.a).to.equal(1)
		end)

		it("should throw when called in render", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				self:setState({
					a = 1
				})
			end

			local renderElement = createElement(TestComponent)

			local success, result = pcall(noopReconciler.mountVirtualTree, renderElement)

			expect(success).to.equal(false)
			expect(result:match("render")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in shouldUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:shouldUpdate()
				self:setState({
					a = 1
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)

			local tree = noopReconciler.mountVirtualTree(initialElement)

			local success, result = pcall(noopReconciler.updateVirtualTree, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("shouldUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in willUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUpdate()
				self:setState({
					a = 1
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)
			local tree = noopReconciler.mountVirtualTree(initialElement)

			local success, result = pcall(noopReconciler.updateVirtualTree, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("willUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in willUnmount", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUnmount()
				self:setState({
					a = 1
				})
			end

			local element = createElement(TestComponent)
			local tree = noopReconciler.mountVirtualTree(element)

			local success, result = pcall(noopReconciler.unmountVirtualTree, tree)

			expect(success).to.equal(false)
			expect(result:match("willUnmount")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should remove values from state when the value is None", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				self:setState({
					value = 0
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback({
				value = None
			})

			expect(getStateCallback().value).to.equal(nil)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should invoke functions to compute a partial state", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback, getPropsCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				getPropsCallback = function()
					return self.props
				end

				self:setState({
					value = 0
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback(function(state, props)
				expect(state).to.equal(getStateCallback())
				expect(props).to.equal(getPropsCallback())

				return {
					value = state.value + 1
				}
			end)

			expect(getStateCallback().value).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should cancel rendering if the function returns nil", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback
			local renderCount = 0

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				self:setState({
					value = 0
				})
			end

			function TestComponent:render()
				renderCount = renderCount + 1
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")
			expect(renderCount).to.equal(1)

			setStateCallback(function(state, props)
				return nil
			end)

			expect(renderCount).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)
	end)

	describe("setState suspension", function()
		it("should defer setState triggered while reconciling", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						self:setState({
							foo = "bar"
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")
		end)

		it("should defer setState triggered while reconciling during an update", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didUpdate()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						-- This guards against a stack overflow that would be OUR fault
						if not self.state.foo then
							self:setState({
								foo = "bar"
							})
						end
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(nil)

			result = noopReconciler.updateVirtualNode(result, createElement(Parent))

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should combine pending state changes properly", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback("foo", 1)
				self.props.callback("bar", 3)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(key, value)
						self:setState({
							[key] = value,
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)
			expect(getParentStateCallback().bar).to.equal(3)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should abort properly when functional setState returns nil while deferred", function()
			local Child = Component:extend("Child")

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			local renderSpy = createSpy(function(self)
				return createElement(Child, {
					callback = function()
						self:setState(function()
							-- abort the setState
							return nil
						end)
					end,
				})
			end)

			Parent.render = renderSpy.value

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(renderSpy.callCount).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should still apply pending state if a subsequent state update was aborted", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback(function()
					return {
						foo = 1,
					}
				end)
				self.props.callback(function()
					return nil
				end)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(stateUpdater)
						self:setState(stateUpdater)
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should not re-process new state when pending state is present after update", function()
			local setComponentState
			local getComponentState

			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					hasUpdatedOnce = false,
					counter = 0,
				})

				setComponentState = function(mapState)
					self:setState(mapState)
				end

				getComponentState = function()
					return self.state
				end
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didUpdate()
				if self.state.hasUpdatedOnce == false then
					self:setState({
						hasUpdatedOnce = true,
					})
				end
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(getComponentState().hasUpdatedOnce).to.equal(false)
			expect(getComponentState().counter).to.equal(0)

			setComponentState(function(state)
				return {
					counter = state.counter + 1
				}
			end)

			expect(getComponentState().hasUpdatedOnce).to.equal(true)
			expect(getComponentState().counter).to.equal(1)
		end)

		it("should throw when an infinite update is triggered", function()
			local InfiniteUpdater = Component:extend("InfiniteUpdater")

			function InfiniteUpdater:render()
				return nil
			end

			function InfiniteUpdater:didMount()
				self:setState({})
			end

			function InfiniteUpdater:didUpdate()
				self:setState({})
			end

			local element = createElement(InfiniteUpdater)
			local hostParent = nil
			local key = "Test"

			local success, result = pcall(noopReconciler.mountVirtualNode, element, hostParent, key)

			expect(success).to.equal(false)
			expect(result:find("InfiniteUpdater")).to.be.ok()
			expect(result:find("reached the setState update recursion limit")).to.be.ok()
		end)

		itSKIP("should process single updates with both new and pending state", function()
			--[[
				This situation shouldn't be possible currently, but the implementation
				should support it for future update de-duplication
			]]
		end)

		it("should call trigger update after didMount when setting state in didMount", function()
			--[[
				Before setState suspension, it was possible to call setState in didMount but it would
				not actually finish resolving didMount until after the entire update.

				This is theoretically problematic, as it means that lifecycle methods like didUpdate
				could be called before didMount is finished. setState suspension resolves this by
				suspending state updates made in didMount and didUpdate as well as reconciliation
			]]
			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					status = "initial mount"
				})

				self.isMounted = false
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didMount()
				self:setState({
					status = "mounted"
				})

				self.isMounted = true
			end

			function MyComponent:didUpdate(oldProps, oldState)
				expect(oldState.status).to.equal("initial mount")
				expect(self.state.status).to.equal("mounted")

				expect(self.isMounted).to.equal(true)
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
		end)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXB9256A9D1BF143ADB8F6FBC78130D473">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">render.spec</string>
							<string name="ScriptGuid">{E91E5F8C-D8B2-43B0-A0F8-872844A65538}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should throw on mount if not overridden", function()
		local MyComponent = Component:extend("MyComponent")

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local success, result = pcall(function()
			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(success).to.equal(false)
		expect(result:match("MyComponent")).to.be.ok()
		expect(result:match("render")).to.be.ok()
	end)

	it("should be invoked when a component is mounted", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(capturedProps, {})
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when a component is updated via props", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local initialProps = {
			a = 2,
		}
		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Foo Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(firstProps, initialProps)
		assertDeepEqual(firstState, {})

		local updatedProps = {
			a = 3,
		}
		local newElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)

		local secondRenderArguments = renderSpy:captureValues("self")
		local secondProps = capturedProps
		local secondState = capturedState

		expect(Type.of(secondRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(secondProps).never.to.equal(firstProps)
		assertDeepEqual(secondProps, updatedProps)
		expect(secondState).to.equal(firstState)
	end)

	it("should be invoked when a component is updated via state", function()
		local Foo = Component:extend("Foo")

		local setState
		function Foo:init()
			setState = function(...)
				return self:setState(...)
			end
		end

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)

		setState({})

		expect(renderSpy.callCount).to.equal(2)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(capturedProps).to.equal(firstProps)
		expect(capturedState).never.to.equal(firstState)
	end)

	itSKIP("Test defaultProps on initial render", function() end)
	itSKIP("Test defaultProps on prop update", function() end)
	itSKIP("Test defaultProps on state update", function() end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX16EC3FFE9AC4439296CF5FC90C87E8CB">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">legacyContext.spec</string>
							<string name="ScriptGuid">{56A85199-ED3B-4BDC-9BCB-DA8F3700A551}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be provided as a mutable self._context in Component:init", function()
		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.foo = "bar"
		end

		function Provider:render()
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Provider"
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			foo = "bar",
		}

		assertDeepEqual(node.legacyContext, expectedContext)
	end)

	it("should be inherited from parent stateful nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render()
		end

		local Parent = Component:extend("Parent")

		function Parent:render()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)
		assertDeepEqual(node.legacyContext, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should be inherited from parent function nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render()
		end

		local function Parent()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)
		assertDeepEqual(node.legacyContext, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should contain values put into the tree by parent nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render()
		end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			return createElement(Consumer)
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Consumer"
		local context = {
			dont = "try it",
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		local initialContext = {
			dont = "try it",
		}

		local expectedContext = {
			dont = "try it",
			frob = "ulator",
		}

		-- Because components mutate context, we're careful with equality
		expect(node.legacyContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)

		assertDeepEqual(context, initialContext)
		assertDeepEqual(node.legacyContext, expectedContext)
		assertDeepEqual(capturedContext, expectedContext)
	end)

	it("should transfer context to children that are replaced", function()
		local ConsumerA = Component:extend("ConsumerA")

		local capturedContextA
		function ConsumerA:init()
			self._context.A = "hello"

			capturedContextA = self._context
		end

		function ConsumerA:render()
		end

		local ConsumerB = Component:extend("ConsumerB")

		local capturedContextB
		function ConsumerB:init()
			self._context.B = "hello"

			capturedContextB = self._context
		end

		function ConsumerB:render()
		end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			local useConsumerB = self.props.useConsumerB

			if useConsumerB then
				return createElement(ConsumerB)
			else
				return createElement(ConsumerA)
			end
		end

		local hostParent = nil
		local hostKey = "Consumer"

		local element = createElement(Provider)
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContextA = {
			frob = "ulator",
			A = "hello",
		}

		assertDeepEqual(capturedContextA, expectedContextA)

		local expectedContextB = {
			frob = "ulator",
			B = "hello",
		}

		local replacedElement = createElement(Provider, {
			useConsumerB = true,
		})
		noopReconciler.updateVirtualNode(node, replacedElement)

		assertDeepEqual(capturedContextB, expectedContextB)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXB28DEA341FEA439D8825CDF504D4364C">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">init.spec</string>
							<string name="ScriptGuid">{B1A25CE4-F6F8-4BE6-AA3B-B47965453D1D}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked with props when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local initSpy = createSpy()

		MyComponent.init = initSpy.value

		function MyComponent:render()
			return nil
		end

		local props = {
			a = 5,
		}
		local element = createElement(MyComponent, props)
		local hostParent = nil
		local key = "Some Component Key"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(initSpy.callCount).to.equal(1)

		local values = initSpy:captureValues("self", "props")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		expect(typeof(values.props)).to.equal("table")
		assertDeepEqual(values.props, props)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXEAE06DC1588F440184850E5E2AC6CE96">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">getElementTraceback.spec</string>
							<string name="ScriptGuid">{60CA9941-B9A6-42C3-9315-F92ED9F7E1CA}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should return stack traces in initial renders", function()
		local TestComponent = Component:extend("TestComponent")

		local stackTrace
		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.be.a("string")
	end)

	itSKIP("it should return an updated stack trace after an update", function() end)

	it("should return nil when elementTracing is off", function()
		local stackTrace = nil

		local config = {
			elementTracing = false,
		}

		local TestComponent = Component:extend("TestComponent")

		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.equal(nil)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX1D89EB3BBACE41038EDC5C48116828BC">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">getDerivedStateFromProps.spec</string>
							<string name="ScriptGuid">{07002D39-0C31-4C5C-8E33-7F5EBD252405}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.Parent.createSpy)
	local createElement = require(script.Parent.Parent.createElement)
	local createFragment = require(script.Parent.Parent.createFragment)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked on initial mount", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 1 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via props", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(createElement(WithDerivedState, {
			someProp = 1,
		}), hostParent, hostKey)

		noopReconciler.updateVirtualNode(node, createElement(WithDerivedState, {
			someProp = 2,
		}))

		expect(getDerivedSpy.callCount).to.equal(2)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 2 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via state", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				someState = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState)
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		noopReconciler.updateVirtualNode(node, element, {
			someState = 2,
		})

		-- getDerivedStateFromProps will be called:
		-- * Once on empty props
		-- * Once during the self:setState in init
		-- * Once more, defensively, on the resulting state AFTER init
		-- * On updating with new state via updateVirtualNode
		expect(getDerivedSpy.callCount).to.equal(4)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {})
		assertDeepEqual(values.state, { someState = 2 })
	end)

	it("should be invoked when updating via state in init (which skips reconciliation)", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				stateFromInit = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		-- getDerivedStateFromProps will be called:
		-- * Once on empty props
		-- * Once during the self:setState in init
		-- * Once more, defensively, on the resulting state AFTER init
		expect(getDerivedSpy.callCount).to.equal(3)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someProp = 1,
		})
		assertDeepEqual(values.state, {
			stateFromInit = 1,
		})
	end)

	it("should receive defaultProps", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.defaultProps = {
			someDefaultProp = "foo",
		}

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 1,
		})

		-- Update via props, confirm that defaultProp is still present
		element = createElement(WithDerivedState, {
			someProp = 2,
		})

		noopReconciler.updateVirtualNode(node, element)

		expect(getDerivedSpy.callCount).to.equal(2)

		values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 2,
		})
	end)

	it("should derive state for all setState updates, even when deferred", function()
		local Child = Component:extend("Child")
		local stateUpdaterSpy = createSpy(function()
			return {}
		end)
		local stateDerivedSpy = createSpy()

		function Child:render()
			return nil
		end

		function Child:didMount()
			self.props.callback()
		end

		local Parent = Component:extend("Parent")

		Parent.getDerivedStateFromProps = stateDerivedSpy.value

		function Parent:render()
			local callback = function()
				self:setState(stateUpdaterSpy.value)
			end

			return createFragment({
				ChildA = createElement(Child, {
					callback = callback,
				}),
				ChildB = createElement(Child, {
					callback = callback,
				}),
			})
		end

		local element = createElement(Parent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(stateUpdaterSpy.callCount).to.equal(2)

		-- getDerivedStateFromProps is always called on initial state
		expect(stateDerivedSpy.callCount).to.equal(3)
	end)

	it("should have derived state after assigning to state in init", function()
		local getStateCallback
		local getDerivedSpy = createSpy(function()
			return {
				derived = true,
			}
		end)
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self.state = {
				init = true,
			}

			getStateCallback = function()
				return self.state
			end
		end

		function WithDerivedState:render()
			return nil
		end

		local hostParent = nil
		local hostKey = "WithDerivedState"
		local element = createElement(WithDerivedState)

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(2)

		assertDeepEqual(getStateCallback(), {
			init = true,
			derived = true,
		})
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXB843FA6FA09449A9A0EFF1EC876FEA1C">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">extend.spec</string>
							<string name="ScriptGuid">{FD955C06-074F-4A1A-921F-DD24F0578E09}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	it("should be extendable", function()
		local MyComponent = Component:extend("The Senate")

		expect(MyComponent).to.be.ok()
		expect(Type.of(MyComponent)).to.equal(Type.StatefulComponentClass)
	end)

	it("should prevent extending a user component", function()
		local MyComponent = Component:extend("Sheev")

		expect(function()
			MyComponent:extend("Frank")
		end).to.throw()
	end)

	it("should use a given name", function()
		local MyComponent = Component:extend("FooBar")

		local name = tostring(MyComponent)

		expect(name).to.be.a("string")
		expect(name:find("FooBar")).to.be.ok()
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX9B3D6A480F304FC4BDA0812B5BB5E6EE">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">didUpdate.spec</string>
							<string name="ScriptGuid">{AC5D9856-68C7-45A4-976B-FC1E4F16AD95}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local virtualNode = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(virtualNode, newElement)

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, initialProps)
		assertDeepEqual(values.oldState, {})
	end)

	it("should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		local initialState = {
			a = 4,
		}

		local setState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)
		end

		function MyComponent:render()
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		setState({
			a = 5,
		})

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, {})
		assertDeepEqual(values.oldState, initialState)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXC9FCE9A1E7BE4190AD59B8129081F13A">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">didMount.spec</string>
							<string name="ScriptGuid">{4381B5BE-921D-4F8C-9B49-99E064D5750A}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local didMountSpy = createSpy()

		MyComponent.didMount = didMountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didMountSpy.callCount).to.equal(1)

		local values = didMountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX55875E1E2C1E4496B7C5BBA00EAD2CD7">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">defaultProps.spec</string>
							<string name="ScriptGuid">{C1DD9130-1133-48BC-AC57-7BDF067B4564}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should fill in when mounting before init", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:init()
			capturedProps = self.props
		end

		function Foo:render()
		end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = initialProps.b,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should fill in when updating via props", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		local updatedProps = {
			c = 5,
		}
		local updatedElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, updatedElement)

		local expectedProps = {
			a = defaultProps.a,
			b = defaultProps.b,
			c = updatedProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should respect None to override a default prop with nil", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = None,
			c = 4,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = nil,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXB5AA7C2BB5894F23A1BBC5C360E28D4E">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">context.spec</string>
							<string name="ScriptGuid">{23B98C19-CF51-4F1D-87F4-056BAA99DB45}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local oneChild = require(script.Parent.Parent.oneChild)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be provided as an internal api on Component", function()
		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("foo", "bar")
		end

		function Provider:render()
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Provider"
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			foo = "bar",
		}

		assertDeepEqual(node.context, expectedContext)
	end)

	it("should be inherited from parent stateful nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				hello = self:__getContext("hello"),
				value = self:__getContext("value"),
			}
		end

		function Consumer:render()
		end

		local Parent = Component:extend("Parent")

		function Parent:render()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should be inherited from parent function nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				hello = self:__getContext("hello"),
				value = self:__getContext("value"),
			}
		end

		function Consumer:render()
		end

		local function Parent()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should not copy the context table if it doesn't need to", function()
		local Parent = Component:extend("Parent")

		function Parent:init()
			self:__addContext("parent", "I'm here!")
		end

		function Parent:render()
			-- Create some child element
			return createElement(function() end)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local parentNode = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			parent = "I'm here!",
		}

		assertDeepEqual(parentNode.context, expectedContext)

		local childNode = oneChild(parentNode.children)

		-- Parent and child should have the same context table
		expect(parentNode.context).to.equal(childNode.context)
	end)

	it("should not allow context to move up the tree", function()
		local ChildProvider = Component:extend("ChildProvider")

		function ChildProvider:init()
			self:__addContext("child", "I'm here too!")
		end

		function ChildProvider:render()
		end

		local ParentProvider = Component:extend("ParentProvider")

		function ParentProvider:init()
			self:__addContext("parent", "I'm here!")
		end

		function ParentProvider:render()
			return createElement(ChildProvider)
		end

		local element = createElement(ParentProvider)
		local hostParent = nil
		local hostKey = "Parent"

		local parentNode = noopReconciler.mountVirtualNode(element, hostParent, hostKey)
		local childNode = oneChild(parentNode.children)

		local expectedParentContext = {
			parent = "I'm here!",
			-- Context does not travel back up
		}

		local expectedChildContext = {
			parent = "I'm here!",
			child = "I'm here too!"
		}

		assertDeepEqual(parentNode.context, expectedParentContext)
		assertDeepEqual(childNode.context, expectedChildContext)
	end)

	it("should contain values put into the tree by parent nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				dont = self:__getContext("dont"),
				frob = self:__getContext("frob"),
			}
		end

		function Consumer:render()
		end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("frob", "ulator")
		end

		function Provider:render()
			return createElement(Consumer)
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Consumer"
		local context = {
			dont = "try it",
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		local initialContext = {
			dont = "try it",
		}

		local expectedContext = {
			dont = "try it",
			frob = "ulator",
		}

		-- Because components mutate context, we're careful with equality
		expect(node.context).never.to.equal(context)
		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)

		assertDeepEqual(context, initialContext)
		assertDeepEqual(node.context, expectedContext)
		assertDeepEqual(capturedContext, expectedContext)
	end)

	it("should transfer context to children that are replaced", function()
		local ConsumerA = Component:extend("ConsumerA")

		local function captureAllContext(component)
			return {
				A = component:__getContext("A"),
				B = component:__getContext("B"),
				frob = component:__getContext("frob"),
			}
		end

		local capturedContextA
		function ConsumerA:init()
			self:__addContext("A", "hello")

			capturedContextA = captureAllContext(self)
		end

		function ConsumerA:render()
		end

		local ConsumerB = Component:extend("ConsumerB")

		local capturedContextB
		function ConsumerB:init()
			self:__addContext("B", "hello")

			capturedContextB = captureAllContext(self)
		end

		function ConsumerB:render()
		end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("frob", "ulator")
		end

		function Provider:render()
			local useConsumerB = self.props.useConsumerB

			if useConsumerB then
				return createElement(ConsumerB)
			else
				return createElement(ConsumerA)
			end
		end

		local hostParent = nil
		local hostKey = "Consumer"

		local element = createElement(Provider)
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContextA = {
			frob = "ulator",
			A = "hello",
		}

		assertDeepEqual(capturedContextA, expectedContextA)

		local expectedContextB = {
			frob = "ulator",
			B = "hello",
		}

		local replacedElement = createElement(Provider, {
			useConsumerB = true,
		})
		noopReconciler.updateVirtualNode(node, replacedElement)

		assertDeepEqual(capturedContextB, expectedContextB)
	end)
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBXA0D63C577C1D43B5AB9E5ADE771226E5">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Component</string>
						<string name="ScriptGuid">{C454D122-DEA5-495F-9806-285F868BB62F}</string>
						<ProtectedString name="Source"><![CDATA[local assign = require(script.Parent.assign)
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)
local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)
local invalidSetStateMessages = require(script.Parent.invalidSetStateMessages)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

--[[
	Calling setState during certain lifecycle allowed methods has the potential
	to create an infinitely updating component. Rather than time out, we exit
	with an error if an unreasonable number of self-triggering updates occur
]]
local MAX_PENDING_UPDATES = 100

local InternalData = Symbol.named("InternalData")

local componentMissingRenderMessage = [[
The component %q is missing the `render` method.
`render` must be defined when creating a Roact component!]]

local tooManyUpdatesMessage = [[
The component %q has reached the setState update recursion limit.
When using `setState` in `didUpdate`, make sure that it won't repeat infinitely!]]

local componentClassMetatable = {}

function componentClassMetatable:__tostring()
	return self.__componentName
end

local Component = {}
setmetatable(Component, componentClassMetatable)

Component[Type] = Type.StatefulComponentClass
Component.__index = Component
Component.__componentName = "Component"

--[[
	A method called by consumers of Roact to create a new component class.
	Components can not be extended beyond this point, with the exception of
	PureComponent.
]]
function Component:extend(name)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentClass, "Invalid `self` argument to `extend`.")
		assert(typeof(name) == "string", "Component class name must be a string")
	end

	local class = {}

	for key, value in pairs(self) do
		-- Roact opts to make consumers use composition over inheritance, which
		-- lines up with React.
		-- https://reactjs.org/docs/composition-vs-inheritance.html
		if key ~= "extend" then
			class[key] = value
		end
	end

	class[Type] = Type.StatefulComponentClass
	class.__index = class
	class.__componentName = name

	setmetatable(class, componentClassMetatable)

	return class
end

function Component:__getDerivedState(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getDerivedState`")
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	if componentClass.getDerivedStateFromProps ~= nil then
		local derivedState = componentClass.getDerivedStateFromProps(incomingProps, incomingState)

		if derivedState ~= nil then
			if config.typeChecks then
				assert(typeof(derivedState) == "table", "getDerivedStateFromProps must return a table!")
			end

			return derivedState
		end
	end

	return nil
end

function Component:setState(mapState)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentInstance, "Invalid `self` argument to `extend`.")
	end

	local internalData = self[InternalData]
	local lifecyclePhase = internalData.lifecyclePhase

	--[[
		When preparing to update, rendering, or unmounting, it is not safe
		to call `setState` as it will interfere with in-flight updates. It's
		also disallowed during unmounting
	]]
	if lifecyclePhase == ComponentLifecyclePhase.ShouldUpdate or
		lifecyclePhase == ComponentLifecyclePhase.WillUpdate or
		lifecyclePhase == ComponentLifecyclePhase.Render or
		lifecyclePhase == ComponentLifecyclePhase.WillUnmount
	then
		local messageTemplate = invalidSetStateMessages[internalData.lifecyclePhase]

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end

	local pendingState = internalData.pendingState

	local partialState
	if typeof(mapState) == "function" then
		partialState = mapState(pendingState or self.state, self.props)

		-- Abort the state update if the given state updater function returns nil
		if partialState == nil then
			return
		end
	elseif typeof(mapState) == "table" then
		partialState = mapState
	else
		error("Invalid argument to setState, expected function or table", 2)
	end

	local newState
	if pendingState ~= nil then
		newState = assign(pendingState, partialState)
	else
		newState = assign({}, self.state, partialState)
	end

	if lifecyclePhase == ComponentLifecyclePhase.Init then
		-- If `setState` is called in `init`, we can skip triggering an update!
		local derivedState = self:__getDerivedState(self.props, newState)
		self.state = assign(newState, derivedState)

	elseif lifecyclePhase == ComponentLifecyclePhase.DidMount or
		lifecyclePhase == ComponentLifecyclePhase.DidUpdate or
		lifecyclePhase == ComponentLifecyclePhase.ReconcileChildren
	then
		--[[
			During certain phases of the component lifecycle, it's acceptable to
			allow `setState` but defer the update until we're done with ones in flight.
			We do this by collapsing it into any pending updates we have.
		]]
		local derivedState = self:__getDerivedState(self.props, newState)
		internalData.pendingState = assign(newState, derivedState)

	elseif lifecyclePhase == ComponentLifecyclePhase.Idle then
		-- Outside of our lifecycle, the state update is safe to make immediately
		self:__update(nil, newState)
	else
		local messageTemplate = invalidSetStateMessages.default

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end
end

--[[
	Returns the stack trace of where the element was created that this component
	instance's properties are based on.

	Intended to be used primarily by diagnostic tools.
]]
function Component:getElementTraceback()
	return self[InternalData].virtualNode.currentElement.source
end

--[[
	Returns a snapshot of this component given the current props and state. Must
	be overridden by consumers of Roact and should be a pure function with
	regards to props and state.

	TODO (#199): Accept props and state as arguments.
]]
function Component:render()
	local internalData = self[InternalData]

	local message = componentMissingRenderMessage:format(
		tostring(internalData.componentClass)
	)

	error(message, 0)
end

--[[
	Retrieves the context value corresponding to the given key. Can return nil
	if a requested context key is not present
]]
function Component:__getContext(key)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getContext`")
		internalAssert(key ~= nil, "Context key cannot be nil")
	end

	local virtualNode = self[InternalData].virtualNode
	local context = virtualNode.context

	return context[key]
end

--[[
	Adds a new context entry to this component's context table (which will be
	passed down to child components).
]]
function Component:__addContext(key, value)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__addContext`")
	end
	local virtualNode = self[InternalData].virtualNode

	-- Make sure we store a reference to the component's original, unmodified
	-- context the virtual node. In the reconciler, we'll restore the original
	-- context if we need to replace the node (this happens when a node gets
	-- re-rendered as a different component)
	if virtualNode.originalContext == nil then
		virtualNode.originalContext = virtualNode.context
	end

	-- Build a new context table on top of the existing one, then apply it to
	-- our virtualNode
	local existing = virtualNode.context
	virtualNode.context = assign({}, existing, { [key] = value })
end

--[[
	Performs property validation if the static method validateProps is declared.
	validateProps should follow assert's expected arguments:
	(false, message: string) | true. The function may return a message in the
	true case; it will be ignored. If this fails, the function will throw the
	error.
]]
function Component:__validateProps(props)
	if not config.propValidation then
		return
	end

	local validator = self[InternalData].componentClass.validateProps

	if validator == nil then
		return
	end

	if typeof(validator) ~= "function" then
		error(("validateProps must be a function, but it is a %s.\nCheck the definition of the component %q."):format(
			typeof(validator),
			self.__componentName
		))
	end

	local success, failureReason = validator(props)

	if not success then
		failureReason = failureReason or "<Validator function did not supply a message>"
		error(("Property validation failed in %s: %s\n\n%s"):format(
			self.__componentName,
			tostring(failureReason),
			self:getElementTraceback() or "<enable element tracebacks>"),
		0)
	end
end

--[[
	An internal method used by the reconciler to construct a new component
	instance and attach it to the given virtualNode.
]]
function Component:__mount(reconciler, virtualNode)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentClass, "Invalid use of `__mount`")
		internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #2 to be of type VirtualNode")
	end

	local currentElement = virtualNode.currentElement
	local hostParent = virtualNode.hostParent

	-- Contains all the information that we want to keep from consumers of
	-- Roact, or even other parts of the codebase like the reconciler.
	local internalData = {
		reconciler = reconciler,
		virtualNode = virtualNode,
		componentClass = self,
		lifecyclePhase = ComponentLifecyclePhase.Init,
	}

	local instance = {
		[Type] = Type.StatefulComponentInstance,
		[InternalData] = internalData,
	}

	setmetatable(instance, self)

	virtualNode.instance = instance

	local props = currentElement.props

	if self.defaultProps ~= nil then
		props = assign({}, self.defaultProps, props)
	end

	instance:__validateProps(props)

	instance.props = props

	local newContext = assign({}, virtualNode.legacyContext)
	instance._context = newContext

	instance.state = assign({}, instance:__getDerivedState(instance.props, {}))

	if instance.init ~= nil then
		instance:init(instance.props)
		assign(instance.state, instance:__getDerivedState(instance.props, instance.state))
	end

	-- It's possible for init() to redefine _context!
	virtualNode.legacyContext = instance._context

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render
	local renderResult = instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)

	if instance.didMount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidMount
		instance:didMount()
	end

	if internalData.pendingState ~= nil then
		-- __update will handle pendingState, so we don't pass any new element or state
		instance:__update(nil, nil)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
end

--[[
	Internal method used by the reconciler to clean up any resources held by
	this component instance.
]]
function Component:__unmount()
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__unmount`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	if self.willUnmount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUnmount
		self:willUnmount()
	end

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end
end

--[[
	Internal method used by setState (to trigger updates based on state) and by
	the reconciler (to trigger updates based on props)

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__update(updatedElement, updatedState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__update`")
		internalAssert(
			Type.of(updatedElement) == Type.Element or updatedElement == nil,
			"Expected arg #1 to be of type Element or nil"
		)
		internalAssert(
			typeof(updatedState) == "table" or updatedState == nil,
			"Expected arg #2 to be of type table or nil"
		)
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	local newProps = self.props
	if updatedElement ~= nil then
		newProps = updatedElement.props

		if componentClass.defaultProps ~= nil then
			newProps = assign({}, componentClass.defaultProps, newProps)
		end

		self:__validateProps(newProps)
	end

	local updateCount = 0
	repeat
		local finalState
		local pendingState = nil

		-- Consume any pending state we might have
		if internalData.pendingState ~= nil then
			pendingState = internalData.pendingState
			internalData.pendingState = nil
		end

		-- Consume a standard update to state or props
		if updatedState ~= nil or newProps ~= self.props then
			if pendingState == nil then
				finalState = updatedState or self.state
			else
				finalState = assign(pendingState, updatedState)
			end

			local derivedState = self:__getDerivedState(newProps, finalState)

			if derivedState ~= nil then
				finalState = assign({}, finalState, derivedState)
			end

			updatedState = nil
		else
			finalState = pendingState
		end

		if not self:__resolveUpdate(newProps, finalState) then
			-- If the update was short-circuited, bubble the result up to the caller
			return false
		end

		updateCount = updateCount + 1

		if updateCount > MAX_PENDING_UPDATES then
			error(tooManyUpdatesMessage:format(tostring(internalData.componentClass)), 3)
		end
	until internalData.pendingState == nil

	return true
end

--[[
	Internal method used by __update to apply new props and state

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__resolveUpdate(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__resolveUpdate`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	local oldProps = self.props
	local oldState = self.state

	if incomingProps == nil then
		incomingProps = oldProps
	end
	if incomingState == nil then
		incomingState = oldState
	end

	if self.shouldUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.ShouldUpdate
		local continueWithUpdate = self:shouldUpdate(incomingProps, incomingState)

		if not continueWithUpdate then
			internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
			return false
		end
	end

	if self.willUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUpdate
		self:willUpdate(incomingProps, incomingState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render

	self.props = incomingProps
	self.state = incomingState

	local renderResult = virtualNode.instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, renderResult)

	if self.didUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidUpdate
		self:didUpdate(oldProps, oldState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
	return true
end

return Component]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXFDAE508E9EA34ADF9F4825C64E5984D3">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Binding.spec</string>
						<string name="ScriptGuid">{B7653067-AB49-4C50-B255-6E4231F72306}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createSpy = require(script.Parent.createSpy)
	local Type = require(script.Parent.Type)
	local GlobalConfig = require(script.Parent.GlobalConfig)

	local Binding = require(script.Parent.Binding)

	describe("Binding.create", function()
		it("should return a Binding object and an update function", function()
			local binding, update = Binding.create(1)

			expect(Type.of(binding)).to.equal(Type.Binding)
			expect(typeof(update)).to.equal("function")
		end)

		it("should support tostring on bindings", function()
			local binding, update = Binding.create(1)
			expect(tostring(binding)).to.equal("RoactBinding(1)")

			update("foo")
			expect(tostring(binding)).to.equal("RoactBinding(foo)")
		end)
	end)

	describe("Binding object", function()
		it("should provide a getter and setter", function()
			local binding, update = Binding.create(1)

			expect(binding:getValue()).to.equal(1)

			update(3)

			expect(binding:getValue()).to.equal(3)
		end)

		it("should let users subscribe and unsubscribe to its updates", function()
			local binding, update = Binding.create(1)

			local spy = createSpy()
			local disconnect = Binding.subscribe(binding, spy.value)

			expect(spy.callCount).to.equal(0)

			update(2)

			expect(spy.callCount).to.equal(1)
			spy:assertCalledWith(2)

			disconnect()
			update(3)

			expect(spy.callCount).to.equal(1)
		end)
	end)

	describe("Mapped bindings", function()
		it("should be composable", function()
			local word, updateWord = Binding.create("hi")

			local wordLength = word:map(string.len)
			local isEvenLength = wordLength:map(function(value)
				return value % 2 == 0
			end)

			expect(word:getValue()).to.equal("hi")
			expect(wordLength:getValue()).to.equal(2)
			expect(isEvenLength:getValue()).to.equal(true)

			updateWord("sup")

			expect(word:getValue()).to.equal("sup")
			expect(wordLength:getValue()).to.equal(3)
			expect(isEvenLength:getValue()).to.equal(false)
		end)

		it("should cascade updates when subscribed", function()
			-- base binding
			local word, updateWord = Binding.create("hi")

			local wordSpy = createSpy()
			local disconnectWord = Binding.subscribe(word, wordSpy.value)

			-- binding -> base binding
			local length = word:map(string.len)

			local lengthSpy = createSpy()
			local disconnectLength = Binding.subscribe(length, lengthSpy.value)

			-- binding -> binding -> base binding
			local isEvenLength = length:map(function(value)
				return value % 2 == 0
			end)

			local isEvenLengthSpy = createSpy()
			local disconnectIsEvenLength = Binding.subscribe(isEvenLength, isEvenLengthSpy.value)

			expect(wordSpy.callCount).to.equal(0)
			expect(lengthSpy.callCount).to.equal(0)
			expect(isEvenLengthSpy.callCount).to.equal(0)

			updateWord("nice")

			expect(wordSpy.callCount).to.equal(1)
			wordSpy:assertCalledWith("nice")

			expect(lengthSpy.callCount).to.equal(1)
			lengthSpy:assertCalledWith(4)

			expect(isEvenLengthSpy.callCount).to.equal(1)
			isEvenLengthSpy:assertCalledWith(true)

			disconnectWord()
			disconnectLength()
			disconnectIsEvenLength()

			updateWord("goodbye")

			expect(wordSpy.callCount).to.equal(1)
			expect(isEvenLengthSpy.callCount).to.equal(1)
			expect(lengthSpy.callCount).to.equal(1)
		end)

		it("should throw when updated directly", function()
			local source = Binding.create(1)
			local mapped = source:map(function(v)
				return v
			end)

			expect(function()
				Binding.update(mapped, 5)
			end).to.throw()
		end)
	end)

	describe("Binding.join", function()
		it("should have getValue", function()
			local binding1 = Binding.create(1)
			local binding2 = Binding.create(2)
			local binding3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local bindingValue = joinedBinding:getValue()
			expect(bindingValue).to.be.a("table")
			expect(bindingValue[1]).to.equal(1)
			expect(bindingValue[2]).to.equal(2)
			expect(bindingValue.foo).to.equal(3)
		end)

		it("should update when any one of the subscribed bindings updates", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)
			local binding3, update3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local spy = createSpy()
			Binding.subscribe(joinedBinding, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			local args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(2)
			expect(args.value["foo"]).to.equal(3)

			update2(4)
			expect(spy.callCount).to.equal(2)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(3)

			update3(8)
			expect(spy.callCount).to.equal(3)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(8)
		end)

		it("should disconnect from all upstream bindings", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)

			local joined = Binding.join({binding1, binding2})

			local spy = createSpy()
			local disconnect = Binding.subscribe(joined, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			update2(3)
			expect(spy.callCount).to.equal(2)

			disconnect()
			update1(4)
			expect(spy.callCount).to.equal(2)

			update2(2)
			expect(spy.callCount).to.equal(2)

			local value = joined:getValue()
			expect(value[1]).to.equal(4)
			expect(value[2]).to.equal(2)
		end)

		it("should be okay with calling disconnect multiple times", function()
			local joined = Binding.join({})

			local disconnect = Binding.subscribe(joined, function() end)

			disconnect()
			disconnect()
		end)

		it("should throw if updated directly", function()
			local joined = Binding.join({})

			expect(function()
				Binding.update(joined, 0)
			end)
		end)

		it("should throw when a non-table value is passed", function()
			GlobalConfig.scoped({
				typeChecks = true,
			}, function()
				expect(function()
					Binding.join("hi")
				end).to.throw()
			end)
		end)

		it("should throw when a non-binding value is passed via table", function()
			GlobalConfig.scoped({
				typeChecks = true,
			}, function()
				expect(function()
					local binding = Binding.create(123)

					Binding.join({
						binding,
						"abcde",
					})
				end).to.throw()
			end)
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX6F45206F9AE044E9A4F132CFAAB5B577">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Binding</string>
						<string name="ScriptGuid">{0784F94C-2A88-4EE1-A6C7-B267FCDE1F68}</string>
						<ProtectedString name="Source"><![CDATA[local createSignal = require(script.Parent.createSignal)
local Symbol = require(script.Parent.Symbol)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local BindingImpl = Symbol.named("BindingImpl")

local BindingInternalApi = {}

local bindingPrototype = {}

function bindingPrototype:getValue()
	return BindingInternalApi.getValue(self)
end

function bindingPrototype:map(predicate)
	return BindingInternalApi.map(self, predicate)
end

local BindingPublicMeta = {
	__index = bindingPrototype,
	__tostring = function(self)
		return string.format("RoactBinding(%s)", tostring(self:getValue()))
	end,
}

function BindingInternalApi.update(binding, newValue)
	return binding[BindingImpl].update(newValue)
end

function BindingInternalApi.subscribe(binding, callback)
	return binding[BindingImpl].subscribe(callback)
end

function BindingInternalApi.getValue(binding)
	return binding[BindingImpl].getValue()
end

function BindingInternalApi.create(initialValue)
	local impl = {
		value = initialValue,
		changeSignal = createSignal(),
	}

	function impl.subscribe(callback)
		return impl.changeSignal:subscribe(callback)
	end

	function impl.update(newValue)
		impl.value = newValue
		impl.changeSignal:fire(newValue)
	end

	function impl.getValue()
		return impl.value
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta), impl.update
end

function BindingInternalApi.map(upstreamBinding, predicate)
	if config.typeChecks then
		assert(Type.of(upstreamBinding) == Type.Binding, "Expected arg #1 to be a binding")
		assert(typeof(predicate) == "function", "Expected arg #1 to be a function")
	end

	local impl = {}

	function impl.subscribe(callback)
		return BindingInternalApi.subscribe(upstreamBinding, function(newValue)
			callback(predicate(newValue))
		end)
	end

	function impl.update(newValue)
		error("Bindings created by Binding:map(fn) cannot be updated directly", 2)
	end

	function impl.getValue()
		return predicate(upstreamBinding:getValue())
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

function BindingInternalApi.join(upstreamBindings)
	if config.typeChecks then
		assert(typeof(upstreamBindings) == "table", "Expected arg #1 to be of type table")

		for key, value in pairs(upstreamBindings) do
			if Type.of(value) ~= Type.Binding then
				local message = (
					"Expected arg #1 to contain only bindings, but key %q had a non-binding value"
				):format(
					tostring(key)
				)
				error(message, 2)
			end
		end
	end

	local impl = {}

	local function getValue()
		local value = {}

		for key, upstream in pairs(upstreamBindings) do
			value[key] = upstream:getValue()
		end

		return value
	end

	function impl.subscribe(callback)
		local disconnects = {}

		for key, upstream in pairs(upstreamBindings) do
			disconnects[key] = BindingInternalApi.subscribe(upstream, function(newValue)
				callback(getValue())
			end)
		end

		return function()
			if disconnects == nil then
				return
			end

			for _, disconnect in pairs(disconnects) do
				disconnect()
			end

			disconnects = nil
		end
	end

	function impl.update(newValue)
		error("Bindings created by joinBindings(...) cannot be updated directly", 2)
	end

	function impl.getValue()
		return getValue()
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

return BindingInternalApi]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX2446E9E039A445FF91490A63578D3016">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Rodux</string>
					<string name="ScriptGuid">{45EDD33B-4312-41A0-9DE5-9874BF3A6E32}</string>
					<ProtectedString name="Source"><![CDATA[local Store = require(script.Store)
local createReducer = require(script.createReducer)
local combineReducers = require(script.combineReducers)
local makeActionCreator = require(script.makeActionCreator)
local loggerMiddleware = require(script.loggerMiddleware)
local thunkMiddleware = require(script.thunkMiddleware)

return {
	Store = Store,
	createReducer = createReducer,
	combineReducers = combineReducers,
	makeActionCreator = makeActionCreator,
	loggerMiddleware = loggerMiddleware.middleware,
	thunkMiddleware = thunkMiddleware,
}
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX0FBF74CDD01D4D65889B315FB98AB707">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">thunkMiddleware.spec</string>
						<string name="ScriptGuid">{782D1EB3-AAB9-4C6C-90A7-53E3671E4A0D}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Store = require(script.Parent.Store)
	local thunkMiddleware = require(script.Parent.thunkMiddleware)

	it("should dispatch thunks", function()
		local function reducer(state, action)
			return state
		end

		local store = Store.new(reducer, {}, { thunkMiddleware })
		local thunkCount = 0

		local function thunk(_store)
			thunkCount = thunkCount + 1
		end

		store:dispatch(thunk)

		expect(thunkCount).to.equal(1)
	end)

	it("should allow normal actions to pass through", function()
		local reducerCount = 0

		local function reducer(state, action)
			reducerCount = reducerCount + 1
			return state
		end

		local store = Store.new(reducer, {}, { thunkMiddleware })

		store:dispatch({
			type = "test",
		})

		-- Reducer will be invoked twice:
		-- Once when creating the store (@@INIT action)
		-- Once when the test action is dispatched
		expect(reducerCount).to.equal(2)
	end)

	it("should return the value from the thunk", function()
		local function reducer(state, action)
			return state
		end

		local store = Store.new(reducer, {}, { thunkMiddleware })
		local thunkValue = "test"

		local function thunk(_store)
			return thunkValue
		end

		local result = store:dispatch(thunk)

		expect(result).to.equal(thunkValue)
	end)

	it("should report errors captured in thunks via the provided error reporter", function()
		local caughtState, caughtAction, caughtErrorResult
		local errorReporter = {
			reportReducerError = function(state, action, errorResult)
				caughtState = state
				caughtAction = action
				caughtErrorResult = errorResult
			end
		}

		local function reducer(state, action)
			return state
		end

		local store = Store.new(reducer, {
			Value = 1
		}, { thunkMiddleware }, errorReporter)

		local innerErrorMessage = "thunk failed"
		local function thunk(_store)
			error(innerErrorMessage)
		end

		store:dispatch(thunk)

		expect(caughtState.Value).to.equal(1)
		expect(caughtAction).to.equal(thunk)
		expect(caughtErrorResult.message).to.equal("Caught error in thunk")
	end)

	it("should recover and continue to update after a thunk errors", function()
		local caughtErrorResult
		local errorReporter = {
			reportReducerError = function(_state, _action, errorResult)
				caughtErrorResult = errorResult
			end
		}

		local function reducer(state, action)
			return state
		end

		local store = Store.new(reducer, {
			Value = 1
		}, { thunkMiddleware }, errorReporter)

		local innerErrorMessage = "thunk failed"
		local function errorThunk(_store)
			error(innerErrorMessage)
		end
		local ranSafeThunk = false
		local function safeThunk(_store)
			ranSafeThunk = true
		end

		store:dispatch(errorThunk)
		expect(caughtErrorResult.message).to.equal("Caught error in thunk")

		store:dispatch(safeThunk)
		expect(ranSafeThunk).to.equal(true)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXFDFDFDB078494FFCB398FD93EA3D165D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">thunkMiddleware</string>
						<string name="ScriptGuid">{99459996-AD4D-48DC-ADCD-5CCFE2AC2FBA}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A middleware that allows for functions to be dispatched.
	Functions will receive a single argument, the store itself.
	This middleware consumes the function; middleware further down the chain
	will not receive it.
]]
local function tracebackReporter(message)
	return debug.traceback(message)
end

local function thunkMiddleware(nextDispatch, store)
	return function(action)
		if typeof(action) == "function" then
			local ok, result = xpcall(function()
				return action(store)
			end, tracebackReporter)

			if not ok then
				-- report the error and move on so it's non-fatal app
				store._errorReporter.reportReducerError(store:getState(), action, {
					message = "Caught error in thunk",
					thrownValue = result,
				})
				return nil
			end

			return result
		end

		return nextDispatch(action)
	end
end

return thunkMiddleware
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX05703CF235AF4C9DB133F3588E964752">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">prettyPrint</string>
						<string name="ScriptGuid">{CB32533B-97B9-499B-BBD9-0CC1AFAB18A9}</string>
						<ProtectedString name="Source"><![CDATA[local indent = "    "

local function prettyPrint(value, indentLevel)
	indentLevel = indentLevel or 0
	local output = {}

	if typeof(value) == "table" then
		table.insert(output, "{\n")

		for tableKey, tableValue in pairs(value) do
			table.insert(output, indent:rep(indentLevel + 1))
			table.insert(output, tostring(tableKey))
			table.insert(output, " = ")

			table.insert(output, prettyPrint(tableValue, indentLevel + 1))
			table.insert(output, "\n")
		end

		table.insert(output, indent:rep(indentLevel))
		table.insert(output, "}")
	elseif typeof(value) == "string" then
		table.insert(output, string.format("%q", value))
		table.insert(output, " (string)")
	else
		table.insert(output, tostring(value))
		table.insert(output, " (")
		table.insert(output, typeof(value))
		table.insert(output, ")")
	end

	return table.concat(output, "")
end

return prettyPrint]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXEFD203C7038E47B1B689587FF6C2105E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">makeActionCreator.spec</string>
						<string name="ScriptGuid">{2B714FF8-FA9C-468B-A3EC-803A6A26A888}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local makeActionCreator = require(script.Parent.makeActionCreator)

	it("should set the name of the actionCreator creator", function()
		local FooAction = makeActionCreator("foo", function()
			return {}
		end)

		expect(FooAction.name).to.equal("foo")
	end)

	it("should return a table when called as a function", function()
		local FooAction = makeActionCreator("foo", function()
			return {}
		end)

		expect(FooAction()).to.be.a("table")
	end)

	it("should set the type of the action creator", function()
		local FooAction = makeActionCreator("foo", function()
			return {}
		end)

		expect(FooAction().type).to.equal("foo")
	end)

	it("should set values", function()
		local FooAction = makeActionCreator("foo", function(value)
			return {
				value = value
			}
		end)

		expect(FooAction(100).value).to.equal(100)
	end)

	it("should throw when its result does not return a table", function()
		local FooAction = makeActionCreator("foo", function()
			return function() end
		end)

		expect(FooAction).to.throw()
	end)

	it("should throw if the first argument is not a string", function()
		expect(function()
			makeActionCreator(nil, function()
				return {}
			end)
		end).to.throw()

		expect(function()
			makeActionCreator(100, function()
				return {}
			end)
		end).to.throw()
	end)

	it("should throw if the second argument is not a function", function()
		expect(function()
			makeActionCreator("foo", nil)
		end).to.throw()

		expect(function()
			makeActionCreator("foo", {})
		end).to.throw()
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXB629C97CA8FC485489BEF29657C27C6E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">makeActionCreator</string>
						<string name="ScriptGuid">{10F2C01C-037A-4099-9129-21F7312608B2}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A helper function to define a Rodux action creator with an associated name.
]]
local function makeActionCreator(name, fn)
	assert(type(name) == "string", "Bad argument #1: Expected a string name for the action creator")

	assert(type(fn) == "function", "Bad argument #2: Expected a function that creates action objects")

	return setmetatable({
		name = name,
	}, {
		__call = function(self, ...)
			local result = fn(...)

			assert(type(result) == "table", "Invalid action: An action creator must return a table")

			result.type = name

			return result
		end
	})
end

return makeActionCreator
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXC2CFE0A964F04ACE9C282FDAC3ABF6B5">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">loggerMiddleware.spec</string>
						<string name="ScriptGuid">{4A6E0933-892F-44C0-B87C-D409EFEB69C2}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Store = require(script.Parent.Store)
	local loggerMiddleware = require(script.Parent.loggerMiddleware)

	it("should print whenever an action is dispatched", function()
		local outputCount = 0
		local outputMessage

		local function reducer(state, action)
			return state
		end

		local store = Store.new(reducer, {
			fooValue = 12345,
			barValue = {
				bazValue = "hiBaz",
			},
		}, { loggerMiddleware.middleware })

		loggerMiddleware.outputFunction = function(message)
			outputCount = outputCount + 1
			outputMessage = message
		end

		store:dispatch({
			type = "testActionType",
		})

		expect(outputCount).to.equal(1)
		expect(outputMessage:find("testActionType")).to.be.ok()
		expect(outputMessage:find("fooValue")).to.be.ok()
		expect(outputMessage:find("12345")).to.be.ok()
		expect(outputMessage:find("barValue")).to.be.ok()
		expect(outputMessage:find("bazValue")).to.be.ok()
		expect(outputMessage:find("hiBaz")).to.be.ok()

		loggerMiddleware.outputFunction = print
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8F6D1BA0D58F43D6A14311962F052483">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">loggerMiddleware</string>
						<string name="ScriptGuid">{67452502-5CB6-4FA2-8A1E-1F7086C64AD1}</string>
						<ProtectedString name="Source"><![CDATA[-- We want to be able to override outputFunction in tests, so the shape of this
-- module is kind of unconventional.
--
-- We fix it this weird shape in init.lua.
local prettyPrint = require(script.Parent.prettyPrint)
local loggerMiddleware = {
	outputFunction = print,
}

function loggerMiddleware.middleware(nextDispatch, store)
	return function(action)
		local result = nextDispatch(action)

		loggerMiddleware.outputFunction(("Action dispatched: %s\nState changed to: %s"):format(
			prettyPrint(action),
			prettyPrint(store:getState())
		))

		return result
	end
end

return loggerMiddleware
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX47FA6FC6E76241D7857BBFC9275ED091">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">init.spec</string>
						<string name="ScriptGuid">{40EACF9D-2DDE-4B80-A338-9F7EF9DD1CF7}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	describe("Rodux", function()
		it("should load", function()
			local Rodux = require(script.Parent)

			expect(Rodux.Store).to.be.ok()
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX11D1BD8E648D4BB8B4E47F7F99BF5E85">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createReducer.spec</string>
						<string name="ScriptGuid">{C447BEF0-F0A8-40C8-8965-E66EC6040935}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createReducer = require(script.Parent.createReducer)

	it("should handle actions", function()
		local reducer = createReducer({
			a = 0,
			b = 0,
		}, {
			a = function(state, action)
				return {
					a = state.a + 1,
					b = state.b,
				}
			end,
			b = function(state, action)
				return {
					a = state.a,
					b = state.b + 2,
				}
			end,
		})

		local newState = reducer({
			a = 0,
			b = 0,
		}, {
			type = "a",
		})

		expect(newState.a).to.equal(1)

		newState = reducer(newState, {
			type = "b",
		})

		expect(newState.b).to.equal(2)
	end)

	it("should return the initial state if the state is nil", function()
		local reducer = createReducer({
			a = 0,
			b = 0,
		-- We don't care about the actions here
		}, {})

		local newState = reducer(nil, {})
		expect(newState).to.be.ok()
		expect(newState.a).to.equal(0)
		expect(newState.b).to.equal(0)
	end)

	it("should still run action handlers if the state is nil", function()
		local callCount = 0

		local reducer = createReducer(0, {
			foo = function(state, action)
				callCount = callCount + 1
				return nil
			end
		})

		expect(callCount).to.equal(0)

		local newState = reducer(nil, {
			type = "foo",
		})

		expect(callCount).to.equal(1)
		expect(newState).to.equal(nil)

		newState = reducer(newState, {
			type = "foo",
		})

		expect(callCount).to.equal(2)
		expect(newState).to.equal(nil)
	end)

	it("should return the same state if the action is not handled", function()
		local initialState = {
			a = 0,
			b = 0,
		}

		local reducer = createReducer(initialState, {
			a = function(state, action)
				return {
					a = state.a + 1,
					b = state.b,
				}
			end,
			b = function(state, action)
				return {
					a = state.a,
					b = state.b + 2,
				}
			end,
		})

		local newState = reducer(initialState, {
			type = "c",
		})

		expect(newState).to.equal(initialState)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX10D65DA8F324407D9BDF04773BA3B920">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createReducer</string>
						<string name="ScriptGuid">{6F4B58AF-155A-4BC9-B944-586A9BEBED2B}</string>
						<ProtectedString name="Source"><![CDATA[return function(initialState, handlers)
	return function(state, action)
		if state == nil then
			state = initialState
		end

		local handler = handlers[action.type]

		if handler then
			return handler(state, action)
		end

		return state
	end
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX7F8F91A56A8046E795ED89B3D1645528">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">combineReducers.spec</string>
						<string name="ScriptGuid">{6912E6AD-B417-440F-94FD-74AF1E5027E8}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local combineReducers = require(script.Parent.combineReducers)

	it("should invoke each sub-reducer for every action", function()
		local aCount = 0
		local bCount = 0

		local reducer = combineReducers({
			a = function(state, action)
				aCount = aCount + 1
			end,
			b = function(state, action)
				bCount = bCount + 1
			end,
		})

		-- Mock reducer invocation
		reducer({}, {})
		expect(aCount).to.equal(1)
		expect(bCount).to.equal(1)
	end)

	it("should assign each sub-reducer's value to the new state", function()
		local reducer = combineReducers({
			a = function(state, action)
				return (state or 0) + 1
			end,
			b = function(state, action)
				return (state or 0) + 3
			end,
		})

		local newState = reducer({}, {})
		expect(newState.a).to.equal(1)
		expect(newState.b).to.equal(3)
	end)

	it("should not throw when state is nil", function()
		local reducer = combineReducers({
			a = function(state, action)
				return (state or 0) + 1
			end,
			b = function(state, action)
				return (state or 0) + 3
			end,
		})

		expect(function()
			reducer(nil, {})
		end).to.never.throw()
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX13FD59C5A0F246AA98A8E1204630C175">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">combineReducers</string>
						<string name="ScriptGuid">{F32A054F-5BFC-45FD-A7C0-FB19146CA106}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Create a composite reducer from a map of keys and sub-reducers.
]]
local function combineReducers(map)
	return function(state, action)
		-- If state is nil, substitute it with a blank table.
		if state == nil then
			state = {}
		end

		local newState = {}

		for key, reducer in pairs(map) do
			-- Each reducer gets its own state, not the entire state table
			newState[key] = reducer(state[key], action)
		end

		return newState
	end
end

return combineReducers
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXB0C54F49D33A4202AD9EEB31EF7F79AC">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Store.spec</string>
						<string name="ScriptGuid">{DCF20B2F-5F77-4E8B-8DBD-7F45911ACC77}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Store = require(script.Parent.Store)

	describe("new", function()
		it("should instantiate with a reducer", function()
			local store = Store.new(function(state, action)
				return "hello, world"
			end)

			expect(store).to.be.ok()
			expect(store:getState()).to.equal("hello, world")

			store:destruct()
		end)

		it("should instantiate with a reducer and an initial state", function()
			local store = Store.new(function(state, action)
				return state
			end, "initial state")

			expect(store).to.be.ok()
			expect(store:getState()).to.equal("initial state")

			store:destruct()
		end)

		it("should instantiate with a reducer, initial state, and middlewares", function()
			local store = Store.new(function(state, action)
				return state
			end, "initial state", {})

			expect(store).to.be.ok()
			expect(store:getState()).to.equal("initial state")

			store:destruct()
		end)

		it("should modify the dispatch method when middlewares are passed", function()
			local middlewareInstantiateCount = 0
			local middlewareInvokeCount = 0
			local passedDispatch
			local passedStore
			local passedAction

			local function reducer(state, action)
				if action.type == "test" then
					return "test state"
				end

				return state
			end

			local function testMiddleware(nextDispatch, store)
				middlewareInstantiateCount = middlewareInstantiateCount + 1
				passedDispatch = nextDispatch
				passedStore = store

				return function(action)
					middlewareInvokeCount = middlewareInvokeCount + 1
					passedAction = action

					nextDispatch(action)
				end
			end

			local store = Store.new(reducer, "initial state", { testMiddleware })

			expect(middlewareInstantiateCount).to.equal(1)
			expect(middlewareInvokeCount).to.equal(0)
			expect(passedDispatch).to.be.a("function")
			expect(passedStore).to.equal(store)

			store:dispatch({
				type = "test",
			})

			expect(middlewareInstantiateCount).to.equal(1)
			expect(middlewareInvokeCount).to.equal(1)
			expect(passedAction.type).to.equal("test")

			store:flush()

			expect(store:getState()).to.equal("test state")

			store:destruct()
		end)

		it("should execute middleware left-to-right", function()
			local events = {}

			local function reducer(state)
				return state
			end

			local function middlewareA(nextDispatch, store)
				table.insert(events, "instantiate a")
				return function(action)
					table.insert(events, "execute a")
					return nextDispatch(action)
				end
			end

			local function middlewareB(nextDispatch, store)
				table.insert(events, "instantiate b")
				return function(action)
					table.insert(events, "execute b")
					return nextDispatch(action)
				end
			end

			local store = Store.new(reducer, 5, { middlewareA, middlewareB })

			expect(#events).to.equal(2)
			expect(events[1]).to.equal("instantiate b")
			expect(events[2]).to.equal("instantiate a")

			store:dispatch({
				type = "test",
			})

			expect(#events).to.equal(4)
			expect(events[3]).to.equal("execute a")
			expect(events[4]).to.equal("execute b")

			store:destruct()
		end)

		it("should send an initial action with a 'type' field", function()
			local lastAction
			local callCount = 0

			local store = Store.new(function(state, action)
				lastAction = action
				callCount = callCount + 1

				return state
			end)

			expect(callCount).to.equal(1)
			expect(lastAction).to.be.a("table")
			expect(lastAction.type).to.be.ok()

			store:destruct()
		end)

		it("should report a reducer error thrown when handling the INIT action", function()
			local caughtState, caughtAction, caughtErrorResult
			local mockErrorReporter = {
				reportReducerError = function(state, action, errorResult)
					caughtState = state
					caughtAction = action
					caughtErrorResult = errorResult
				end,
				reportUpdateError = function()
					-- no op
				end
			}

			local innerErrorMessage = "Z4PH0D"
			local reducerThatErrors = function(state, action)
				error(innerErrorMessage)
			end

			local store
			store = Store.new(reducerThatErrors, {
				Value = 1
			}, nil, mockErrorReporter)

			expect(caughtState.Value).to.equal(1)
			expect(caughtAction.type).to.equal("@@INIT")
			expect(caughtErrorResult.message).to.equal("Caught error in reducer with init")
			expect(string.find(
				caughtErrorResult.thrownValue,
				innerErrorMessage
			)).to.be.ok()
			-- We want to verify that this is a stacktrace without caring too
			-- much about the format, so we look for the stack frame associated
			-- with this test file
			expect(string.find(
				caughtErrorResult.thrownValue,
				script.Name
			)).to.be.ok()

			store:destruct()
		end)

		it("should report a reducer error thrown when handling a subsequent action", function()
			local caughtState, caughtAction, caughtErrorResult
			local mockErrorReporter = {
				reportReducerError = function(state, action, errorResult)
					caughtState = state
					caughtAction = action
					caughtErrorResult = errorResult
				end,
				reportUpdateError = function()
					-- no op
				end
			}

			local innerErrorMessage = "Z4PH0D"
			local reducerThatErrorsAfterInit = function(state, action)
				if action.type == "ThrowError" then
					error(innerErrorMessage)
				elseif action.type == "Increment" then
					return {
						Value = state.Value + 1
					}
				end
				return state
			end

			local store
			store = Store.new(reducerThatErrorsAfterInit, {
				Value = 1,
			}, nil, mockErrorReporter)

			expect(caughtState).to.equal(nil)
			expect(caughtAction).to.equal(nil)
			expect(caughtErrorResult).to.equal(nil)

			store:dispatch({type = "Increment"})
			store:dispatch({type = "ThrowError"})

			expect(caughtState.Value).to.equal(2)
			expect(caughtAction.type).to.equal("ThrowError")
			expect(caughtErrorResult.message).to.equal("Caught error in reducer")
			expect(string.find(
				caughtErrorResult.thrownValue,
				innerErrorMessage
			)).to.be.ok()
			-- We want to verify that this is a stacktrace without caring too
			-- much about the format, so we look for the stack frame associated
			-- with this test file
			expect(string.find(
				caughtErrorResult.thrownValue,
				script.Name
			)).to.be.ok()

			store:destruct()
		end)

	end)

	describe("getState", function()
		it("should get the current state", function()
			local store = Store.new(function(state, action)
				return "foo"
			end)

			local state = store:getState()

			expect(state).to.equal("foo")

			store:destruct()
		end)

		it("should throw errors if triggered during dispatches", function()
			local store
			store = Store.new(function(state, action)
				if action.type ~= "@@INIT" then
					store:getState()
				end
			end)

			expect(function()
				store:dispatch({ type = "SomeAction" })
			end).to.throw()

			store:destruct()
		end)
	end)

	describe("dispatch", function()
		it("should be sent through the reducer", function()
			local store = Store.new(function(state, action)
				state = state or "foo"

				if action.type == "act" then
					return "bar"
				end

				return state
			end)

			expect(store).to.be.ok()
			expect(store:getState()).to.equal("foo")

			store:dispatch({
				type = "act",
			})

			store:flush()

			expect(store:getState()).to.equal("bar")

			store:destruct()
		end)

		it("should trigger the changed event after a flush", function()
			local store = Store.new(function(state, action)
				state = state or 0

				if action.type == "increment" then
					return state + 1
				end

				return state
			end)

			local callCount = 0

			store.changed:connect(function(state, oldState)
				expect(oldState).to.equal(0)
				expect(state).to.equal(1)

				callCount = callCount + 1
			end)

			store:dispatch({
				type = "increment",
			})

			store:flush()

			expect(callCount).to.equal(1)

			store:destruct()
		end)

		it("should handle actions dispatched within the changed event", function()
			local store = Store.new(function(state, action)
				state = state or {
					value = 0,
				}

				if action.type == "increment" then
					return {
						value = state.value + 1,
					}
				elseif action.type == "decrement" then
					return {
						value = state.value - 1,
					}
				end

				return state
			end)

			local changeCount = 0

			store.changed:connect(function(state, oldState)
				expect(state).never.to.equal(oldState)

				if state.value > 0 then
					store:dispatch({
						type = "decrement",
					})
				end

				changeCount = changeCount + 1
			end)

			store:dispatch({
				type = "increment",
			})
			store:flush()
			store:flush()

			expect(changeCount).to.equal(2)

			store:destruct()
		end)

		it("should prevent yielding from changed handler", function()
			local reportedErrorMessage, reportedErrorError
			local mockErrorReporter = {
				reportUpdateError = function(_, _, _, errorResult)
					reportedErrorMessage = errorResult.message
					reportedErrorError = errorResult.thrownValue
				end,
				reportReducerError = function()
					-- noop
				end,
			}
			local preCount = 0
			local postCount = 0

			local store = Store.new(function(state, action)
				state = state or 0
				return state + 1
			end, nil, nil, mockErrorReporter)

			store.changed:connect(function(state, oldState)
				preCount = preCount + 1
				wait()
				postCount = postCount + 1
			end)

			store:dispatch({
				type = "increment",
			})

			store:flush()

			expect(preCount).to.equal(1)
			expect(postCount).to.equal(0)

			expect(reportedErrorMessage).to.equal("Caught error flushing store updates")
			-- We want to verify that this is a stacktrace without caring too
			-- much about the format, so we look for the stack frame associated
			-- with this test file
			expect(string.find(reportedErrorError, script.Name)).to.be.ok()
			-- In vanilla lua, we get this message:
			--   "attempt to yield across metamethod/C-call boundary"
			-- In luau, we should end up wrapping our own NoYield message:
			--   "Attempted to yield inside changed event!"
			-- For convenience's sake, we just look for the common substring
			local caughtErrorSubstring = "to yield"
			expect(string.find(reportedErrorError, caughtErrorSubstring)).to.be.ok()

			store:destruct()
		end)

		it("should throw if an action is dispatched without a type field", function()
			local store = Store.new(function(state, action)
				return state
			end)

			expect(function()
				store:dispatch({})
			end).to.throw()

			store:destruct()
		end)

		it("should throw if the action is not a function or table", function()
			local store = Store.new(function(state, action)
				return state
			end)

			expect(function()
				store:dispatch(1)
			end).to.throw()

			store:destruct()
		end)

		it("should report an error if the listeners error when flushing", function()
			local caughtPrevState, caughtState, caughtActionLog, caughtErrorResult
			local mockErrorReporter = {
				reportReducerError = function()
					-- no op
				end,
				reportUpdateError = function(prevState, state, actionLog, errorResult)
					caughtPrevState = prevState
					caughtState = state
					caughtActionLog = actionLog
					caughtErrorResult = errorResult
				end
			}

			local reducer = function(state, action)
				if action.type == "Increment" then
					return {
						Value = state.Value + action.amount
					}
				end
				return state
			end
			local store = Store.new(reducer, {
				Value = 1,
			}, nil, mockErrorReporter)

			local innerErrorMessage = "Z4PH0D"
			store.changed:connect(function(state, prevState)
				if state.Value == 15 then
					error(innerErrorMessage)
				end
			end)

			local actions = {
				{type = "Increment", amount = 1},
				{type = "Increment", amount = 3},
				{type = "Increment", amount = 10},
			}
			for _, action in ipairs(actions) do
				store:dispatch(action)
			end
			store:flush()

			expect(caughtErrorResult.message).to.equal("Caught error flushing store updates")
			-- We want to verify that this is a stacktrace without caring too
			-- much about the format, so we look for the stack frame associated
			-- with this test file
			expect(string.find(caughtErrorResult.thrownValue, script.Name)).to.be.ok()

			expect(caughtActionLog[1]).to.equal(actions[1])
			expect(caughtActionLog[2]).to.equal(actions[2])
			expect(caughtActionLog[3]).to.equal(actions[3])

			-- This is before any of the actions were processed; the flush will
			-- apply the new state from all three actions
			expect(caughtPrevState.Value).to.equal(1)
			expect(caughtState.Value).to.equal(15)

			store:destruct()
		end)

		it("should throw errors if dispatching while a dispatch is already happening", function()
			local store
			store = Store.new(function(state, action)
				if action.type == "SomeAction" then
					store:dispatch({ type = "MidDispatchAction" })
				end
			end)

			expect(function()
				store:dispatch({ type = "SomeAction" })
			end).to.throw()

			store:destruct()
		end)
	end)

	describe("flush", function()
		it("should not fire a changed event if there were no dispatches", function()
			local store = Store.new(function()
			end)

			local count = 0
			store.changed:connect(function()
				count = count + 1
			end)

			store:flush()

			expect(count).to.equal(0)

			store:dispatch({
				type = "increment",
			})
			store:flush()

			expect(count).to.equal(1)

			store:flush()

			expect(count).to.equal(1)

			store:destruct()
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX96814E2DC88149FF912123FB4C5ADC03">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Store</string>
						<string name="ScriptGuid">{B34915DD-DEDB-42C3-850E-81CFB5F65A03}</string>
						<ProtectedString name="Source"><![CDATA[local RunService = game:GetService("RunService")

local Signal = require(script.Parent.Signal)
local NoYield = require(script.Parent.NoYield)

local ACTION_LOG_LENGTH = 3

local rethrowErrorReporter = {
	reportReducerError = function(prevState, action, errorResult)
		error(string.format("Received error: %s\n\n%s", errorResult.message, errorResult.thrownValue))
	end,
	reportUpdateError = function(prevState, currentState, lastActions, errorResult)
		error(string.format("Received error: %s\n\n%s", errorResult.message, errorResult.thrownValue))
	end,
}

local function tracebackReporter(message)
	return debug.traceback(tostring(message))
end

local Store = {}

-- This value is exposed as a private value so that the test code can stay in
-- sync with what event we listen to for dispatching the Changed event.
-- It may not be Heartbeat in the future.
Store._flushEvent = RunService.Heartbeat

Store.__index = Store

--[[
	Create a new Store whose state is transformed by the given reducer function.

	Each time an action is dispatched to the store, the new state of the store
	is given by:

		state = reducer(state, action)

	Reducers do not mutate the state object, so the original state is still
	valid.
]]
function Store.new(reducer, initialState, middlewares, errorReporter)
	assert(typeof(reducer) == "function", "Bad argument #1 to Store.new, expected function.")
	assert(middlewares == nil or typeof(middlewares) == "table", "Bad argument #3 to Store.new, expected nil or table.")
	if middlewares ~= nil then
		for i=1, #middlewares, 1 do
			assert(
				typeof(middlewares[i]) == "function",
				("Expected the middleware ('%s') at index %d to be a function."):format(tostring(middlewares[i]), i)
			)
		end
	end

	local self = {}

	self._errorReporter = errorReporter or rethrowErrorReporter
	self._isDispatching = false
	self._reducer = reducer
	local initAction = {
		type = "@@INIT",
	}
	self._actionLog = { initAction }
	local ok, result = xpcall(function()
		self._state = reducer(initialState, initAction)
	end, tracebackReporter)
	if not ok then
		self._errorReporter.reportReducerError(initialState, initAction, {
			message = "Caught error in reducer with init",
			thrownValue = result,
		})
		self._state = initialState
	end
	self._lastState = self._state

	self._mutatedSinceFlush = false
	self._connections = {}

	self.changed = Signal.new(self)

	setmetatable(self, Store)

	local connection = self._flushEvent:Connect(function()
		self:flush()
	end)
	table.insert(self._connections, connection)

	if middlewares then
		local unboundDispatch = self.dispatch
		local dispatch = function(...)
			return unboundDispatch(self, ...)
		end

		for i = #middlewares, 1, -1 do
			local middleware = middlewares[i]
			dispatch = middleware(dispatch, self)
		end

		self.dispatch = function(_self, ...)
			return dispatch(...)
		end
	end

	return self
end

--[[
	Get the current state of the Store. Do not mutate this!
]]
function Store:getState()
	if self._isDispatching then
		error(("You may not call store:getState() while the reducer is executing. " ..
			"The reducer (%s) has already received the state as an argument. " ..
			"Pass it down from the top reducer instead of reading it from the store."):format(tostring(self._reducer)))
	end

	return self._state
end

--[[
	Dispatch an action to the store. This allows the store's reducer to mutate
	the state of the application by creating a new copy of the state.

	Listeners on the changed event of the store are notified when the state
	changes, but not necessarily on every Dispatch.
]]
function Store:dispatch(action)
	if typeof(action) ~= "table" then
		error(("Actions must be tables. " ..
			"Use custom middleware for %q actions."):format(typeof(action)),
			2
		)
	end

	if action.type == nil then
		error("Actions may not have an undefined 'type' property. " ..
			"Have you misspelled a constant? \n" ..
			tostring(action), 2)
	end

	if self._isDispatching then
		error("Reducers may not dispatch actions.")
	end

	local ok, result = pcall(function()
		self._isDispatching = true
		self._state = self._reducer(self._state, action)
		self._mutatedSinceFlush = true
	end)

	self._isDispatching = false

	if not ok then
		self._errorReporter.reportReducerError(
			self._state,
			action,
			{
				message = "Caught error in reducer",
				thrownValue = result,
			}
		)
	end

	if #self._actionLog == ACTION_LOG_LENGTH then
		table.remove(self._actionLog, 1)
	end
	table.insert(self._actionLog, action)
end

--[[
	Marks the store as deleted, disconnecting any outstanding connections.
]]
function Store:destruct()
	for _, connection in ipairs(self._connections) do
		connection:Disconnect()
	end

	self._connections = nil
end

--[[
	Flush all pending actions since the last change event was dispatched.
]]
function Store:flush()
	if not self._mutatedSinceFlush then
		return
	end

	self._mutatedSinceFlush = false

	-- On self.changed:fire(), further actions may be immediately dispatched, in
	-- which case self._lastState will be set to the most recent self._state,
	-- unless we cache this value first
	local state = self._state

	local ok, errorResult = xpcall(function()
		-- If a changed listener yields, *very* surprising bugs can ensue.
		-- Because of that, changed listeners cannot yield.
		NoYield(function()
			self.changed:fire(state, self._lastState)
		end)
	end, tracebackReporter)

	if not ok then
		self._errorReporter.reportUpdateError(
			self._lastState,
			state,
			self._actionLog,
			{
				message = "Caught error flushing store updates",
				thrownValue = errorResult,
			}
		)
	end

	self._lastState = state
end

return Store
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXA7FDF2B0712246608FA8EEBFB952CF16">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Signal.spec</string>
						<string name="ScriptGuid">{BAB1A008-EF40-4E79-AC0A-872DA13C4A15}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Signal = require(script.Parent.Signal)

	it("should construct from nothing", function()
		local signal = Signal.new()

		expect(signal).to.be.ok()
	end)

	it("should fire connected callbacks", function()
		local callCount = 0
		local value1 = "Hello World"
		local value2 = 7

		local callback = function(arg1, arg2)
			expect(arg1).to.equal(value1)
			expect(arg2).to.equal(value2)
			callCount = callCount + 1
		end

		local signal = Signal.new()

		local connection = signal:connect(callback)
		signal:fire(value1, value2)

		expect(callCount).to.equal(1)

		connection:disconnect()
		signal:fire(value1, value2)

		expect(callCount).to.equal(1)
	end)

	it("should disconnect handlers", function()
		local callback = function()
			error("Callback was called after disconnect!")
		end

		local signal = Signal.new()

		local connection = signal:connect(callback)
		connection:disconnect()

		signal:fire()
	end)

	it("should fire handlers in order", function()
		local signal = Signal.new()
		local x = 0
		local y = 0

		local callback1 = function()
			expect(x).to.equal(0)
			expect(y).to.equal(0)
			x = x + 1
		end

		local callback2 = function()
			expect(x).to.equal(1)
			expect(y).to.equal(0)
			y = y + 1
		end

		signal:connect(callback1)
		signal:connect(callback2)
		signal:fire()

		expect(x).to.equal(1)
		expect(y).to.equal(1)
	end)

	it("should continue firing despite mid-event disconnection", function()
		local signal = Signal.new()
		local countA = 0
		local countB = 0

		local connectionA
		connectionA = signal:connect(function()
			connectionA:disconnect()
			countA = countA + 1
		end)

		signal:connect(function()
			countB = countB + 1
		end)

		signal:fire()

		expect(countA).to.equal(1)
		expect(countB).to.equal(1)
	end)

	it("should skip listeners that were disconnected during event evaluation", function()
		local signal = Signal.new()
		local countA = 0
		local countB = 0

		local connectionB

		signal:connect(function()
			countA = countA + 1
			connectionB:disconnect()
		end)

		connectionB = signal:connect(function()
			countB = countB + 1
		end)

		signal:fire()

		expect(countA).to.equal(1)
		expect(countB).to.equal(0)
	end)

	it("should throw an error if the argument to `connect` is not a function", function()
		local signal = Signal.new()
		expect(function()
			signal:connect("not a function")
		end).to.throw()
	end)

	it("should throw an error when disconnecting more than once", function()
		local signal = Signal.new()

		local connection = signal:connect(function() end)
		-- Okay to disconnect once
		expect(connection.disconnect).never.to.throw()

		-- Throw an error if we disconnect twice
		expect(connection.disconnect).to.throw()
	end)

	it("should throw an error when subscribing during dispatch", function()
		local mockStore = {
			_isDispatching = false
		}
		local signal = Signal.new(mockStore)

		signal:connect(function()
			-- Subscribe while listeners are being fired
			signal:connect(function() end)
		end)

		mockStore._isDispatching = true
		expect(function()
			signal:fire()
		end).to.throw()
	end)

	it("should throw an error when unsubscribing during dispatch", function()
		local mockStore = {
			_isDispatching = false
		}
		local signal = Signal.new(mockStore)

		local connection
		connection = signal:connect(function()
			connection.disconnect()
		end)

		mockStore._isDispatching = true
		expect(function()
			signal:fire()
		end).to.throw()
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX7CAC8A9AD138420F84E30224BFB04DF1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Signal</string>
						<string name="ScriptGuid">{55DF07B5-CF56-4F6E-A995-7FDC9BD0782B}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A limited, simple implementation of a Signal.

	Handlers are fired in order, and (dis)connections are properly handled when
	executing an event.
]]
local function immutableAppend(list, ...)
	local new = {}
	local len = #list

	for key = 1, len do
		new[key] = list[key]
	end

	for i = 1, select("#", ...) do
		new[len + i] = select(i, ...)
	end

	return new
end

local function immutableRemoveValue(list, removeValue)
	local new = {}

	for i = 1, #list do
		if list[i] ~= removeValue then
			table.insert(new, list[i])
		end
	end

	return new
end

local Signal = {}

Signal.__index = Signal

function Signal.new(store)
	local self = {
		_listeners = {},
		_store = store
	}

	setmetatable(self, Signal)

	return self
end

function Signal:connect(callback)
	if typeof(callback) ~= "function" then
		error("Expected the listener to be a function.")
	end

	if self._store and self._store._isDispatching then
		error(
			'You may not call store.changed:connect() while the reducer is executing. ' ..
				'If you would like to be notified after the store has been updated, subscribe from a ' ..
				'component and invoke store:getState() in the callback to access the latest state. '
		)
	end

	local listener = {
		callback = callback,
		disconnected = false,
		connectTraceback = debug.traceback(),
		disconnectTraceback = nil
	}

	self._listeners = immutableAppend(self._listeners, listener)

	local function disconnect()
		if listener.disconnected then
			error((
				"Listener connected at: \n%s\n" ..
				"was already disconnected at: \n%s\n"
			):format(
				tostring(listener.connectTraceback),
				tostring(listener.disconnectTraceback)
			))
		end

		if self._store and self._store._isDispatching then
			error("You may not unsubscribe from a store listener while the reducer is executing.")
		end

		listener.disconnected = true
		listener.disconnectTraceback = debug.traceback()
		self._listeners = immutableRemoveValue(self._listeners, listener)
	end

	return {
		disconnect = disconnect
	}
end

function Signal:fire(...)
	for _, listener in ipairs(self._listeners) do
		if not listener.disconnected then
			listener.callback(...)
		end
	end
end

return Signal]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXB689BB7549C340D9B0B56808585571BE">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">NoYield.spec</string>
						<string name="ScriptGuid">{2A4741FB-A43F-418A-80C6-7ADB6D611A9A}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local NoYield = require(script.Parent.NoYield)

	it("should call functions normally", function()
		local callCount = 0

		local function test(a, b)
			expect(a).to.equal(5)
			expect(b).to.equal(6)

			callCount = callCount + 1

			return 11, "hello"
		end

		local a, b = NoYield(test, 5, 6)

		expect(a).to.equal(11)
		expect(b).to.equal("hello")
	end)

	it("should throw on yield", function()
		local preCount = 0
		local postCount = 0

		local function testMethod()
			preCount = preCount + 1
			wait()
			postCount = postCount + 1
		end

		local ok, err = pcall(NoYield, testMethod)

		expect(preCount).to.equal(1)
		expect(postCount).to.equal(0)

		expect(ok).to.equal(false)
		expect(err:find("Attempted to yield inside changed event!")).to.be.ok()
		expect(err:find("NoYield.spec")).to.be.ok()
	end)

	it("should propagate error messages", function()
		local count = 0

		local function test()
			count = count + 1
			error("foo")
		end

		local ok, err = pcall(NoYield, test)

		expect(ok).to.equal(false)
		expect(err:find("foo")).to.be.ok()
		expect(err:find("NoYield.spec")).to.be.ok()
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX0287B2AEB9514D7CB311069DCA138A28">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">NoYield</string>
						<string name="ScriptGuid">{92B1598B-93C1-42CA-B5D7-B7EB15AC4919}</string>
						<ProtectedString name="Source"><![CDATA[--!nocheck

--[[
	Calls a function and throws an error if it attempts to yield.

	Pass any number of arguments to the function after the callback.

	This function supports multiple return; all results returned from the
	given function will be returned.
]]

local function resultHandler(co, ok, ...)
	if not ok then
		local message = (...)
		error(debug.traceback(co, message), 2)
	end

	if coroutine.status(co) ~= "dead" then
		error(debug.traceback(co, "Attempted to yield inside changed event!"), 2)
	end

	return ...
end

local function NoYield(callback, ...)
	local co = coroutine.create(callback)

	return resultHandler(co, coroutine.resume(co, ...))
end

return NoYield
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXD24B80C553334A5DA146624BDFBDD78E">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">RoactRodux</string>
					<string name="ScriptGuid">{388E634D-F8A0-4C77-8D2E-A215CCB5E099}</string>
					<ProtectedString name="Source"><![CDATA[local StoreProvider = require(script.StoreProvider)
local connect = require(script.connect)
local getStore = require(script.getStore)
local TempConfig = require(script.TempConfig)

return {
	StoreProvider = StoreProvider,
	connect = connect,
	UNSTABLE_getStore = getStore,
	UNSTABLE_connect2 = connect,

	TEMP_CONFIG = TempConfig,
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX00390C0249AA4785AEDFD3E8BEBBD38D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">join</string>
						<string name="ScriptGuid">{095230AC-993C-4D76-81C0-BB9BF3103BB5}</string>
						<ProtectedString name="Source"><![CDATA[local function join(...)
	local result = {}

	for i = 1, select("#", ...) do
		local source = select(i, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				result[key] = value
			end
		end
	end

	return result
end

return join]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX5306D473974443D19A699F577B91FFF9">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">shallowEqual.spec</string>
						<string name="ScriptGuid">{052339D8-D781-4FF1-9984-2699E5F9F9CF}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local shallowEqual = require(script.Parent.shallowEqual)

	it("should compare dictionaries", function()
		local a = {
			a = "a",
			b = {},
			c = 6,
		}

		local b = {
			b = a.b,
			c = a.c,
			a = a.a,
		}

		local c = {
			b = {},
			a = a.a,
			c = a.c,
		}

		local d = {
			a = a.a,
			b = a.b,
			c = a.c,
			d = "hello",
		}

		expect(shallowEqual(a, a)).to.equal(true)
		expect(shallowEqual(a, b)).to.equal(true)
		expect(shallowEqual(a, c)).to.equal(false)
		expect(shallowEqual(b, c)).to.equal(false)
		expect(shallowEqual(a, d)).to.equal(false)
		expect(shallowEqual(b, d)).to.equal(false)
	end)

	it("should handle nil for either argument", function()
		local a = {}

		expect(shallowEqual(nil, nil)).to.equal(true)
		expect(shallowEqual(a, nil)).to.equal(false)
		expect(shallowEqual(nil, a)).to.equal(false)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXE0EC7913E5CD4056966716788FEC8AFD">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">storeKey</string>
						<string name="ScriptGuid">{3DF6D4D7-B14D-4446-A40A-BA61EDF3D520}</string>
						<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

return Symbol.named("RoduxStore")]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8768AD2C07E24D13874D78DCB4119CB8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">connect.spec</string>
						<string name="ScriptGuid">{12A73730-A043-4F90-9230-452938FB8083}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local connect = require(script.Parent.connect)

	local StoreProvider = require(script.Parent.StoreProvider)

	local Roact = require(script.Parent.Parent.Roact)
	local Rodux = require(script.Parent.Parent.Rodux)

	local TempConfig = require(script.Parent.TempConfig)

	local function noop()
		return nil
	end

	local function NoopComponent()
		return nil
	end

	local function countReducer(state, action)
		state = state or 0

		if action.type == "increment" then
			return state + 1
		end

		return state
	end

	local reducer = Rodux.combineReducers({
		count = countReducer,
	})

	describe("Argument validation", function()
		it("should accept no arguments", function()
			connect()
		end)

		it("should accept one function", function()
			connect(noop)
		end)

		it("should accept two functions", function()
			connect(noop, noop)
		end)

		it("should accept only the second function", function()
			connect(nil, function() end)
		end)

		it("should throw if not passed a component", function()
			local selector = function(store)
				return {}
			end

			expect(function()
				connect(selector)(nil)
			end).to.throw()
		end)
	end)

	it("should throw if not mounted under a StoreProvider", function()
		local ConnectedSomeComponent = connect()(NoopComponent)

		expect(function()
			Roact.mount(Roact.createElement(ConnectedSomeComponent))
		end).to.throw()
	end)

	it("should accept a higher-order function mapStateToProps", function()
		local function mapStateToProps()
			return function(state)
				return {
					count = state.count,
				}
			end
		end

		local ConnectedSomeComponent = connect(mapStateToProps)(NoopComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent),
		})

		local handle = Roact.mount(tree)

		Roact.unmount(handle)
	end)

	it("should not accept a higher-order mapStateToProps that returns a non-table value", function()
		local function mapStateToProps()
			return function(state)
				return "nope"
			end
		end

		local ConnectedSomeComponent = connect(mapStateToProps)(NoopComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent),
		})

		expect(function()
			Roact.mount(tree)
		end).to.throw()
	end)

	it("should not accept a mapStateToProps that returns a non-table value", function()
		local function mapStateToProps()
			return "nah"
		end

		local ConnectedSomeComponent = connect(mapStateToProps)(NoopComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent),
		})

		expect(function()
			Roact.mount(tree)
		end).to.throw()
	end)

	it("should abort renders when mapStateToProps returns the same data", function()
		local function mapStateToProps(state)
			return {
				count = state.count,
			}
		end

		local renderCount = 0
		local function SomeComponent(props)
			renderCount = renderCount + 1
		end

		local ConnectedSomeComponent = connect(mapStateToProps)(SomeComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent),
		})

		local handle = Roact.mount(tree)

		expect(renderCount).to.equal(1)

		store:dispatch({ type = "an unknown action" })
		store:flush()

		expect(renderCount).to.equal(1)

		store:dispatch({ type = "increment" })
		store:flush()

		expect(renderCount).to.equal(2)

		Roact.unmount(handle)
	end)

	it("should only call mapDispatchToProps once and never re-render if no mapStateToProps was passed", function()
		local dispatchCount = 0
		local mapDispatchToProps = function(dispatch)
			dispatchCount = dispatchCount + 1

			return {
				increment = function()
					return dispatch({ type = "increment" })
				end,
			}
		end

		local renderCount = 0
		local function SomeComponent(props)
			renderCount = renderCount + 1
		end

		local ConnectedSomeComponent = connect(nil, mapDispatchToProps)(SomeComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent),
		})

		local handle = Roact.mount(tree)

		expect(dispatchCount).to.equal(1)
		expect(renderCount).to.equal(1)

		store:dispatch({ type = "an unknown action" })
		store:flush()

		expect(dispatchCount).to.equal(1)
		expect(renderCount).to.equal(1)

		store:dispatch({ type = "increment" })
		store:flush()

		expect(dispatchCount).to.equal(1)
		expect(renderCount).to.equal(1)

		Roact.unmount(handle)
	end)

	it("should return result values from the dispatch passed to mapDispatchToProps", function()
		local function reducer()
			return 0
		end

		local function fiveThunk()
			return 5
		end

		local dispatch
		local function SomeComponent(props)
			dispatch = props.dispatch
		end

		local function mapDispatchToProps(dispatch)
			return {
				dispatch = dispatch
			}
		end

		local ConnectedSomeComponent = connect(nil, mapDispatchToProps)(SomeComponent)

		-- We'll use the thunk middleware, as it should always return its result
		local store = Rodux.Store.new(reducer, nil, { Rodux.thunkMiddleware })
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			someComponent = Roact.createElement(ConnectedSomeComponent)
		})

		local handle = Roact.mount(tree)

		expect(dispatch).to.be.a("function")
		expect(dispatch(fiveThunk)).to.equal(5)

		Roact.unmount(handle)
	end)

	it("should render parent elements before children", function()
		local oldNewConnectionOrder = TempConfig.newConnectionOrder
		TempConfig.newConnectionOrder = true

		local function mapStateToProps(state)
			return {
				count = state.count,
			}
		end

		local childWasRenderedFirst = false

		local function ChildComponent(props)
			if props.count > props.parentCount then
				childWasRenderedFirst = true
			end
		end

		local ConnectedChildComponent = connect(mapStateToProps)(ChildComponent)

		local function ParentComponent(props)
			return Roact.createElement(ConnectedChildComponent, {
				parentCount = props.count,
			})
		end

		local ConnectedParentComponent = connect(mapStateToProps)(ParentComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			parent = Roact.createElement(ConnectedParentComponent),
		})

		local handle = Roact.mount(tree)

		store:dispatch({ type = "increment" })
		store:flush()

		store:dispatch({ type = "increment" })
		store:flush()

		Roact.unmount(handle)

		expect(childWasRenderedFirst).to.equal(false)

		TempConfig.newConnectionOrder = oldNewConnectionOrder
	end)

	it("should render child elements before children when TempConfig.newConnectionOrder is false", function()
		local oldNewConnectionOrder = TempConfig.newConnectionOrder
		TempConfig.newConnectionOrder = false

		local function mapStateToProps(state)
			return {
				count = state.count,
			}
		end

		local childWasRenderedFirst = false

		local function ChildComponent(props)
			if props.count > props.parentCount then
				childWasRenderedFirst = true
			end
		end

		local ConnectedChildComponent = connect(mapStateToProps)(ChildComponent)

		local function ParentComponent(props)
			return Roact.createElement(ConnectedChildComponent, {
				parentCount = props.count,
			})
		end

		local ConnectedParentComponent = connect(mapStateToProps)(ParentComponent)

		local store = Rodux.Store.new(reducer)
		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			parent = Roact.createElement(ConnectedParentComponent),
		})

		local handle = Roact.mount(tree)

		store:dispatch({ type = "increment" })
		store:flush()

		store:dispatch({ type = "increment" })
		store:flush()

		Roact.unmount(handle)

		expect(childWasRenderedFirst).to.equal(true)

		TempConfig.newConnectionOrder = oldNewConnectionOrder
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXF14012E31BD94B07A0887A31A424D3A8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">getStore.spec</string>
						<string name="ScriptGuid">{582ED965-3F1A-4BFF-BEE7-7A405E5D6D30}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Roact = require(script.Parent.Parent.Roact)
	local Rodux = require(script.Parent.Parent.Rodux)

	local StoreProvider = require(script.Parent.StoreProvider)

	local getStore = require(script.Parent.getStore)

	it("should return the store when present", function()
		local function reducer()
			return 0
		end

		local store = Rodux.Store.new(reducer)
		local consumedStore = nil

		local StoreConsumer = Roact.Component:extend("StoreConsumer")

		function StoreConsumer:init()
			consumedStore = getStore(self)
		end

		function StoreConsumer:render()
			return nil
		end

		local tree = Roact.createElement(StoreProvider, {
			store = store,
		}, {
			Consumer = Roact.createElement(StoreConsumer),
		})

		local handle = Roact.mount(tree)

		expect(consumedStore).to.equal(store)

		Roact.unmount(handle)
		store:destruct()
	end)

	it("should return nil when the store is not present", function()
		-- Use a non-nil value to know for sure if StoreConsumer:init was called
		local consumedStore = 6

		local StoreConsumer = Roact.Component:extend("StoreConsumer")

		function StoreConsumer:init()
			consumedStore = getStore(self)
		end

		function StoreConsumer:render()
			return nil
		end

		local tree = Roact.createElement(StoreConsumer)
		local handle = Roact.mount(tree)

		expect(consumedStore).to.equal(nil)

		Roact.unmount(handle)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXA5142B8ED71B4D56B31D4ADB972318F2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">connect</string>
						<string name="ScriptGuid">{99C935C8-7581-45F0-9927-F8AB7C8AC454}</string>
						<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Roact)
local getStore = require(script.Parent.getStore)
local shallowEqual = require(script.Parent.shallowEqual)
local join = require(script.Parent.join)

local TempConfig = require(script.Parent.TempConfig)

--[[
	Formats a multi-line message with printf-style placeholders.
]]
local function formatMessage(lines, parameters)
	return table.concat(lines, "\n"):format(unpack(parameters or {}))
end

local function noop()
	return nil
end

--[[
	The stateUpdater accepts props when they update and computes the
	complete set of props that should be passed to the wrapped component.

	Each connected component will have a stateUpdater created for it.

	stateUpdater is put into the component's state in order for
	getDerivedStateFromProps to be able to access it. It is not mutated.
]]
local function makeStateUpdater(store)
	return function(nextProps, prevState, mappedStoreState)
		-- The caller can optionally provide mappedStoreState if it needed that
		-- value beforehand. Doing so is purely an optimization.
		if mappedStoreState == nil then
			mappedStoreState = prevState.mapStateToProps(store:getState(), nextProps)
		end

		local propsForChild = join(nextProps, mappedStoreState, prevState.mappedStoreDispatch)

		return {
			mappedStoreState = mappedStoreState,
			propsForChild = propsForChild,
		}
	end
end

--[[
	mapStateToProps:
		(storeState, props) -> partialProps
		OR
		() -> (storeState, props) -> partialProps
	mapDispatchToProps: (dispatch) -> partialProps
]]
local function connect(mapStateToPropsOrThunk, mapDispatchToProps)
	local connectTrace = debug.traceback()

	if mapStateToPropsOrThunk ~= nil then
		assert(typeof(mapStateToPropsOrThunk) == "function", "mapStateToProps must be a function or nil!")
	else
		mapStateToPropsOrThunk = noop
	end

	if mapDispatchToProps ~= nil then
		assert(typeof(mapDispatchToProps) == "function", "mapDispatchToProps must be a function or nil!")
	else
		mapDispatchToProps = noop
	end

	return function(innerComponent)
		if innerComponent == nil then
			local message = formatMessage({
				"connect returns a function that must be passed a component.",
				"Check the connection at:",
				"%s",
			}, {
				connectTrace,
			})

			error(message, 2)
		end

		local componentName = ("RoduxConnection(%s)"):format(tostring(innerComponent))

		local Connection = Roact.Component:extend(componentName)

		function Connection.getDerivedStateFromProps(nextProps, prevState)
			if prevState.stateUpdater ~= nil then
				return prevState.stateUpdater(nextProps, prevState)
			end
		end

		function Connection:createStoreConnection()
			self.storeChangedConnection = self.store.changed:connect(function(storeState)
				self:setState(function(prevState, props)
					local mappedStoreState = prevState.mapStateToProps(storeState, props)

					-- We run this check here so that we only check shallow
					-- equality with the result of mapStateToProps, and not the
					-- other props that could be passed through the connector.
					if shallowEqual(mappedStoreState, prevState.mappedStoreState) then
						return nil
					end

					return prevState.stateUpdater(props, prevState, mappedStoreState)
				end)
			end)
		end

		function Connection:init()
			self.store = getStore(self)

			if self.store == nil then
				local message = formatMessage({
					"Cannot initialize Roact-Rodux connection without being a descendent of StoreProvider!",
					"Tried to wrap component %q",
					"Make sure there is a StoreProvider above this component in the tree.",
				}, {
					tostring(innerComponent),
				})

				error(message)
			end

			local storeState = self.store:getState()

			local mapStateToProps = mapStateToPropsOrThunk
			local mappedStoreState = mapStateToProps(storeState, self.props)

			-- mapStateToPropsOrThunk can return a function instead of a state
			-- value. In this variant, we keep that value as mapStateToProps
			-- instead of the original mapStateToProps. This matches react-redux
			-- and enables connectors to keep instance-level state.
			if typeof(mappedStoreState) == "function" then
				mapStateToProps = mappedStoreState
				mappedStoreState = mapStateToProps(storeState, self.props)
			end

			if mappedStoreState ~= nil and typeof(mappedStoreState) ~= "table" then
				local message = formatMessage({
					"mapStateToProps must either return a table, or return another function that returns a table.",
					"Instead, it returned %q, which is of type %s.",
				}, {
					tostring(mappedStoreState),
					typeof(mappedStoreState),
				})

				error(message)
			end

			local mappedStoreDispatch = mapDispatchToProps(function(...)
				return self.store:dispatch(...)
			end)

			local stateUpdater = makeStateUpdater(self.store)

			self.state = {
				-- Combines props, mappedStoreDispatch, and the result of
				-- mapStateToProps into propsForChild. Stored in state so that
				-- getDerivedStateFromProps can access it.
				stateUpdater = stateUpdater,

				-- Used by the store changed connection and stateUpdater to
				-- construct propsForChild.
				mapStateToProps = mapStateToProps,

				-- Used by stateUpdater to construct propsForChild.
				mappedStoreDispatch = mappedStoreDispatch,

				-- Passed directly into the component that Connection is
				-- wrapping.
				propsForChild = nil,
			}

			local extraState = stateUpdater(self.props, self.state, mappedStoreState)

			for key, value in pairs(extraState) do
				self.state[key] = value
			end

			if TempConfig.newConnectionOrder then
				self:createStoreConnection()
			end
		end

		function Connection:didMount()
			if not TempConfig.newConnectionOrder then
				self:createStoreConnection()
			end
		end

		function Connection:willUnmount()
			self.storeChangedConnection:disconnect()
		end

		function Connection:render()
			return Roact.createElement(innerComponent, self.state.propsForChild)
		end

		return Connection
	end
end

return connect]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXD86A11DAB06744EC997C62D120A9679F">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">TempConfig</string>
						<string name="ScriptGuid">{678AA232-F81D-4C02-8BE8-2888AEB78DDA}</string>
						<ProtectedString name="Source"><![CDATA[return {
	newConnectionOrder = true,
}
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXC20208907C29496B93BDE435768567E2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Symbol</string>
						<string name="ScriptGuid">{E1CD1DE1-BF5C-4974-BB1E-0071330A473F}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A 'Symbol' is an opaque marker type that can be used to signify unique
	statuses. Symbols have the type 'userdata', but when printed to the console,
	the name of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

--[[
	Create an unnamed Symbol. Usually, you should create a named Symbol using
	Symbol.named(name)
]]
function Symbol.unnamed()
	local self = newproxy(true)

	getmetatable(self).__tostring = function()
		return "Unnamed Symbol"
	end

	return self
end

return Symbol]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXC5096E7593354828808E0E406BFCACFF">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">getStore</string>
						<string name="ScriptGuid">{64A00C20-AC17-4C63-A5E8-28045F080269}</string>
						<ProtectedString name="Source"><![CDATA[local storeKey = require(script.Parent.storeKey)

local function getStore(componentInstance)
	return componentInstance._context[storeKey]
end

return getStore]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX32218DA55BC44D63B98118C380476FE3">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Symbol.spec</string>
						<string name="ScriptGuid">{DC5D7654-A953-4B33-AA1D-54A49E9F2F3E}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Symbol = require(script.Parent.Symbol)

	describe("named", function()
		it("should give an opaque object", function()
			local symbol = Symbol.named("foo")

			expect(symbol).to.be.a("userdata")
		end)

		it("should coerce to the given name", function()
			local symbol = Symbol.named("foo")

			expect(tostring(symbol):find("foo")).to.be.ok()
		end)

		it("should be unique when constructed", function()
			local symbolA = Symbol.named("abc")
			local symbolB = Symbol.named("abc")

			expect(symbolA).never.to.equal(symbolB)
		end)
	end)

	describe("unnamed", function()
		it("should give an opaque object", function()
			local symbol = Symbol.unnamed()

			expect(symbol).to.be.a("userdata")
		end)

		it("should coerce to some string", function()
			local symbol = Symbol.unnamed()

			expect(tostring(symbol)).to.be.a("string")
		end)

		it("should be unique when constructed", function()
			local symbolA = Symbol.unnamed()
			local symbolB = Symbol.unnamed()

			expect(symbolA).never.to.equal(symbolB)
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX86F27F932B2342399093E6A6A3C22059">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">StoreProvider.spec</string>
						<string name="ScriptGuid">{F01A04F2-B7E9-4624-A7E0-8D551467AD9F}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local StoreProvider = require(script.Parent.StoreProvider)

	local Roact = require(script.Parent.Parent.Roact)
	local Rodux = require(script.Parent.Parent.Rodux)

	it("should be instantiable as a component", function()
		local store = Rodux.Store.new(function()
			return 0
		end)
		local element = Roact.createElement(StoreProvider, {
			store = store
		})

		expect(element).to.be.ok()

		local handle = Roact.mount(element, nil, "StoreProvider-test")

		Roact.unmount(handle)
		store:destruct()
	end)

	it("should expect a 'store' prop", function()
		local element = Roact.createElement(StoreProvider)

		expect(function()
			Roact.mount(element)
		end).to.throw()
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX4BD8342A4F6842FB8A6AE54D8EBC61BF">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">shallowEqual</string>
						<string name="ScriptGuid">{64E7C8A0-67FF-4C72-966E-46EAC6E31F99}</string>
						<ProtectedString name="Source"><![CDATA[local function shallowEqual(a, b)
	if a == nil then
		return b == nil
	elseif b == nil then
		return a == nil
	end

	for key, value in pairs(a) do
		if value ~= b[key] then
			return false
		end
	end

	for key, value in pairs(b) do
		if value ~= a[key] then
			return false
		end
	end

	return true
end

return shallowEqual]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX330287FF08BF435A80410E5423D040E3">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">StoreProvider</string>
						<string name="ScriptGuid">{0EE9E58F-2839-4FF5-BE2E-AD92FD44D923}</string>
						<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Roact)

local storeKey = require(script.Parent.storeKey)

local StoreProvider = Roact.Component:extend("StoreProvider")

function StoreProvider:init(props)
	local store = props.store

	if store == nil then
		error("Error initializing StoreProvider. Expected a `store` prop to be a Rodux store.")
	end

	self._context[storeKey] = store
end

function StoreProvider:render()
	return Roact.oneChild(self.props[Roact.Children])
end

return StoreProvider]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Script" referent="RBX8DEA54C663C745F88DBCB81BB0F5DDF9">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Main</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{3159C27B-D841-477C-85A2-7EF9C8007622}</string>
				<ProtectedString name="Source"><![CDATA[local pluginFolder = script.Parent

local toolbar = plugin:CreateToolbar("DataStore Editor")
local button = toolbar:CreateButton("DataStoreEditor", "DataStoreEditor", "rbxassetid://5523059345", "DataStore Editor")
local isOn = false
local initialized = false

local env = {
	Plugin = plugin;
	Modules = {};
	UI = {};
	Vendor = {};
}

local function LoadModules(parent, tbl)
	for _,v in ipairs(parent:GetChildren()) do
		if v:IsA("ModuleScript") then
			tbl[v.Name] = require(v)
		elseif v:IsA("Folder") and v:FindFirstChildOfClass("ModuleScript") then
			local t = {}
			tbl[v.Name] = t
			LoadModules(v, t)
		end
	end
end

local function LoadPluginModules()
	local promises = {}
	local Promise = env.Vendor.Promise
	for _,v in ipairs(pluginFolder.Plugin:GetChildren()) do
		if v:IsA("ModuleScript") then
			local m = require(v)
			env.Modules[v.Name] = m
			setmetatable(m, {__index = env})
		end
	end
	for name,module in pairs(env.Modules) do
		if type(module.Init) == "function" then
			table.insert(promises, Promise.new(function(resolve, reject)
				local success, err = pcall(function()
					module:Init()
				end)
				if success then
					resolve()
				else
					warn(name .. " failed: " .. tostring(err))
					reject(err)
				end
			end))
		end
	end
	local success = Promise.all(promises):await()
	assert(success, "Failed to initialize modules")
	for _,module in pairs(env.Modules) do
		if type(module.Start) == "function" then
			task.defer(module.Start, module)
		end
	end
end

local function ButtonClicked()
	isOn = (not isOn)
	button:SetActive(isOn)
	if isOn and not initialized then
		initialized = true
		LoadModules(pluginFolder.Vendor, env.Vendor)
		LoadModules(pluginFolder.UI, env.UI)
		LoadPluginModules()
		env.Modules.PluginWidget.Disabled:Connect(function()
			if isOn then
				ButtonClicked()
			end
		end)
	end
	if isOn then
		env.Modules.App:Mount()
	else
		env.Modules.App:Unmount()
	end
	env.Modules.PluginWidget:SetEnabled(isOn)
end

button.Click:Connect(ButtonClicked)
plugin.Unloading:Connect(function()
	if isOn then
		ButtonClicked()
	end
end)
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBXEEBD27E05D4642E2BC73D5ADFF13FD1D">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Plugin</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXEB399DAB2C644C199DDD6FF17678DA1D">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">PluginWidget</string>
					<string name="ScriptGuid">{6E43CFD3-8A30-4AFA-BEF6-5B2A437125E7}</string>
					<ProtectedString name="Source"><![CDATA[--[[

	PluginWidget:SetEnabled(enabled)
	PluginWidget:GetWidget()
	PluginWidget:GetMousePosition()

	PluginWidget.Disabled()

--]]



local PluginWidget = {}

local WIDGET_INFO = DockWidgetPluginGuiInfo.new(
	Enum.InitialDockState.Float,
	false,    -- Initial enabled state
	true,     -- Override previous enabled state
	400, 300, -- Initial size
	400, 300  -- Min size
)

local widget


function PluginWidget:GetWidget()
	return widget
end


function PluginWidget:SetEnabled(enabled)
	widget.Enabled = enabled
end


function PluginWidget:GetMousePosition()
	return widget:GetRelativeMousePosition()
end


function PluginWidget:Init()
	local plugin = self.Plugin
	widget = plugin:CreateDockWidgetPluginGui(self.Modules.Constants.WidgetName, WIDGET_INFO)
	widget.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	widget.Name = self.Modules.Constants.WidgetName
	widget.Title = self.Modules.Constants.WidgetTitle
	self.Disabled = self.Vendor.Knit.Signal.new()
	widget:GetPropertyChangedSignal("Enabled"):Connect(function()
		if not widget.Enabled then
			self.Disabled:Fire()
		end
	end)
end


function PluginWidget:Start()
end


return PluginWidget
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXB93C2E3316124B65BA4527008B233E9C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Constants</string>
					<string name="ScriptGuid">{A98A55C0-636D-44B5-8A31-1E001FAD0A0F}</string>
					<ProtectedString name="Source"><![CDATA[return {

	WidgetName = "DataStoreEditorV3";
	WidgetTitle = "DataStore Editor";

	SideMenuWidth = 250;
	SideMenuButtonSize = 16;
	SideMenuPadding = 10;

	DataNil = {};
	MinMaxNil = {};
	
}
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXBFE07E620DF94BCCB68B1A2B9FCBBF88">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">App</string>
					<string name="ScriptGuid">{C2811B62-0343-4EEB-A5A4-A540C8C0B425}</string>
					<ProtectedString name="Source"><![CDATA[local App = {}

local Roact
local Rodux
local RoactRodux

local app
local store
local rootTree


function App:Get()
	return app
end


function App:GetStore()
	return store
end


function App:Mount()
	rootTree = Roact.mount(app, self.Modules.PluginWidget:GetWidget())
end


function App:Unmount()
	if rootTree then
		Roact.unmount(rootTree)
		rootTree = nil
	end
	store:dispatch({type = "ResetAll"})
end


function App:Start()
end


function App:Init()
	Roact = self.Vendor.Roact
	Rodux = self.Vendor.Rodux
	RoactRodux = self.Vendor.RoactRodux
	store = Rodux.Store.new(self.Modules.State.Reducer)
	app = Roact.createElement(RoactRodux.StoreProvider, {
		store = store;
	}, {
		Main = Roact.createElement(self.UI.Main);
	})
end


return App
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX236C66B81C1A4DB5A9DC5F5BE10DCA93">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">State</string>
					<string name="ScriptGuid">{530EBC85-84EB-490E-B5DA-76C136DAE3CC}</string>
					<ProtectedString name="Source"><![CDATA[local State = {}

local DataNil = require(script.Parent.Constants).DataNil

local defaultState = {
	Loaded = false;
	DSNameInput = "";
	DSScopeInput = "";
	UseOrderedInput = false;
	UseV2Input = false;
	DSName = "";
	DSScope = "";
	Key = "";
	KeyPrefix = "";
	StorePrefix = "";
	UseOrdered = false;
	UseV2 = false;
	OrderedMin = DataNil;
	OrderedMax = DataNil;
	OrderedAscend = true;
	ShowSideMenu = true;
	ShowFrame = "Main";
	Connected = false;
	ConnectedView = "";
	Data = DataNil;
	FetchingData = false;
	FetchingStores = false;
	FetchingKeys = false;
	Stores = DataNil;
	Keys = DataNil;
	SavingData = false;
	DataError = "";
	DataDirty = false;
	ShowAlert = false;
	AlertTitle = "";
	AlertMessage = "";
	Refresh = 0;
}


local function Extend(original, newTbl)
	local tbl = {}
	for k,v in pairs(original) do tbl[k] = v end
	for k,v in pairs(newTbl) do tbl[k] = v end
	return tbl
end


function State.Reducer(state, action)

	state = state or defaultState

	if action.type == "Loaded" then
		return Extend(state, {
			Loaded = action.IsLoaded;
		});
	elseif action.type == "SideMenuInputs" then
		return Extend(state, {
			DSNameInput = action.DSName or "";
			DSScopeInput = action.DSScope or "";
			UseOrderedInput = action.UseOrdered;
			UseV2Input = action.UseV2;
		})
	elseif action.type == "DSName" then
		return Extend(state, {
			DSName = action.DSName or "";
		})
	elseif action.type == "DSScope" then
		return Extend(state, {
			DSScope = action.DSScope or "";
		})
	elseif action.type == "Key" then
		return Extend(state, {
			Key = action.Key or "";
		})
	elseif action.type == "KeyPrefix" then
		return Extend(state, {
			KeyPrefix = action.KeyPrefix or "";
		})
	elseif action.type == "Keys" then
		return Extend(state, {
			Keys = action.Keys;
			FetchingKeys = false;
		})
	elseif action.type == "StorePrefix" then
		return Extend(state, {
			StorePrefix = action.StorePrefix or "";
		})
	elseif action.type == "Stores" then
		return Extend(state, {
			Stores = action.Stores;
			FetchingStores = false;
		})
	elseif action.type == "Ordered" then
		return Extend(state, {
			UseOrdered = action.UseOrdered;
		})
	elseif action.type == "UseV2" then
		return Extend(state, {
			UseV2 = action.UseV2;
		})
	elseif action.type == "OrderedMin" then
		return Extend(state, {
			OrderedMin = action.Min
		})
	elseif action.type == "OrderedMax" then
		return Extend(state, {
			OrderedMax = action.Max
		})
	elseif action.type == "OrderedAscend" then
		return Extend(state, {
			OrderedAscend = action.Ascend
		})
	elseif action.type == "SideMenu" then
		return Extend(state, {
			ShowSideMenu = action.Show;
		})
	elseif action.type == "ShowFrame" then
		return Extend(state, {
			ShowFrame = action.Frame;
		})
	elseif action.type == "Connected" then
		return Extend(state, {
			Connected = action.Connected;
			ConnectedView = action.ConnectedView or "";
		})
	elseif action.type == "Data" then
		return Extend(state, {
			FetchingData = false;
			Data = action.Data;
			DataDirty = not not action.WasImported;
		})
	elseif action.type == "FetchingData" then
		local data = action.Data
		if action.ClearData then
			data = DataNil
		end
		return Extend(state, {
			FetchingData = action.FetchingData;
			Data = data;
			DataError = "";
			DataDirty = false;
		})
	elseif action.type == "FetchingStores" then
		local stores = action.Stores
		if action.ClearStores then
			stores = DataNil
		end
		return Extend(state, {
			FetchingStores = action.FetchingStores;
			Stores = stores;
		})
	elseif action.type == "FetchingKeys" then
		local keys = action.Keys
		if action.ClearKeys then
			keys = DataNil
		end
		return Extend(state, {
			FetchingKeys = action.FetchingKeys;
			Keys = keys;
		})
	elseif action.type == "DataError" then
		return Extend(state, {
			FetchingData = false;
			DataError = action.DataError;
		})
	elseif action.type == "DataDeleted" then
		return Extend(state, {
			FetchingData = false;
			Data = DataNil;
			DataDirty = false;
		})
	elseif action.type == "MarkDirty" then
		return Extend(state, {
			DataDirty = true;
		})
	elseif action.type == "SavingData" then
		local dirty = state.DataDirty
		if state.SavingData and not action.SavingData then
			dirty = false
		end
		return Extend(state, {
			SavingData = action.SavingData;
			DataDirty = dirty;
		})
	elseif action.type == "ShowAlert" then
		return Extend(state, {
			ShowAlert = true;
			AlertTitle = action.Title;
			AlertMessage = action.Message;
		})
	elseif action.type == "HideAlert" then
		return Extend(state, {
			ShowAlert = false;
			AlertTitle = "";
			AlertMessage = "";
		})
	elseif action.type == "Refresh" then
		return Extend(state, {
			Refresh = (state.Refresh + 1);
		})
	elseif action.type == "ResetAll" then
		return defaultState
	end

	return state

end


return State
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXB40F83C349BD4D93A14D1D9D5CB8D99F">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DebugState</string>
					<string name="ScriptGuid">{80548EE7-16A4-4F91-A42A-79554F999434}</string>
					<ProtectedString name="Source"><![CDATA[local DebugState = {}

local DEBUG_ENABLED = (game.PlaceId == 5047391271)

local MAX_VALUE_CHARS = 100
local EVEN_COLOR = Color3.new(0.1, 0.1, 0.1)
local ODD_COLOR = Color3.new(0.2, 0.2, 0.2)
local LABEL_TEXT_SIZE = 16
local LABEL_FONT = Enum.Font.SourceSans
local LABEL_HEIGHT = 24
local LABEL_PADDING_SIDES = 10

local WIDGET_INFO = DockWidgetPluginGuiInfo.new(
	Enum.InitialDockState.Left,
	false,    -- Initial enabled state
	true,     -- Override previous enabled state
	400, 300, -- Initial size
	150, 100  -- Min size
)

local httpService = game:GetService("HttpService")
local DataNil = require(script.Parent.Constants).DataNil


local Label = {}
Label.__index = Label

function Label.new(title, value)
	local self = setmetatable({
		Frame = Instance.new("Frame");
		Title = Instance.new("TextLabel");
		Value = Instance.new("TextLabel");
		_title = title;
	}, Label)
	for _,l in ipairs({self.Title, self.Value}) do
		l.BackgroundTransparency = 1
		l.Size = UDim2.new(1, 0, 1, 0)
		l.Font = LABEL_FONT
		l.TextColor3 = Color3.new(1, 1, 1)
		l.TextSize = LABEL_TEXT_SIZE
		l.Parent = self.Frame
	end
	self.Frame.Name = title
	self.Frame.BorderSizePixel = 0
	self.Frame.Size = UDim2.new(1, 0, 0, LABEL_HEIGHT)
	self.Title.Name = "Title"
	self.Title.Text = (title .. ":")
	self.Title.TextXAlignment = Enum.TextXAlignment.Left
	self.Value.Name = "Value"
	self.Value.TextXAlignment = Enum.TextXAlignment.Right
	local padding = Instance.new("UIPadding")
	padding.PaddingLeft = UDim.new(0, LABEL_PADDING_SIDES)
	padding.PaddingRight = UDim.new(0, LABEL_PADDING_SIDES)
	padding.Parent = self.Frame
	self:SetValue(value)
	return self
end

function Label:SetBackground(color)
	self.Frame.BackgroundColor3 = color
end

function Label:SetValue(value)
	if type(value) == "table" then
		if value == DataNil then
			value = "DATA_NIL"
		else
			value = httpService:JSONEncode(value)
		end
	else
		if typeof(value) == "Instance" then
			value = ("Instance (%s)"):format(value.ClassName)
		else
			value = tostring(value)
		end
	end
	if #value > MAX_VALUE_CHARS then
		value = value:sub(1, MAX_VALUE_CHARS) .. "..."
	end
	self.Value.Text = value
	if self._tween then
		self._tween:Destroy()
	end
	self.Value.TextColor3 = Color3.fromRGB(0, 170, 255)
	local tweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 2)
	local tween = game:GetService("TweenService"):Create(self.Value, tweenInfo, {TextColor3 = Color3.new(1, 1, 1)})
	tween:Play()
	tween.Completed:Connect(function(state)
		if state == Enum.PlaybackState.Completed then
			tween:Destroy()
			self._tween = nil
		end
	end)
	self._tween = tween
end

function Label:SetParent(parent)
	self.Frame.Parent = parent
end

function Label:Destroy()
	if self._tween then
		self._tween:Destroy()
	end
	self.Frame:Destroy()
end


function DebugState:Start()
	if not DEBUG_ENABLED then return end

	local store = self.Modules.App:GetStore()

	local labels = {}

	local widget = self.Plugin:CreateDockWidgetPluginGui("DataStoreEditorDebugState", WIDGET_INFO)
	widget.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	widget.Name = "DataStoreEditorDebugState"
	widget.Title = "DataStore Editor - Debug State"
	widget.Enabled = true

	local frame = Instance.new("Frame")
	frame.BackgroundTransparency = 0
	frame.BackgroundColor3 = ODD_COLOR
	frame.Size = UDim2.new(1, 0, 1, 0)
	frame.Parent = widget

	local scrollingFrame = Instance.new("ScrollingFrame")
	scrollingFrame.Size = UDim2.new(1, 0, 1, 0)
	scrollingFrame.BackgroundTransparency = 1
	scrollingFrame.BorderSizePixel = 0
	scrollingFrame.ScrollBarThickness = 8
	scrollingFrame.CanvasSize = UDim2.new(1, 0, 1, 0)
	scrollingFrame.Parent = frame

	local listLayout = Instance.new("UIListLayout")
	listLayout.SortOrder = Enum.SortOrder.LayoutOrder
	listLayout.Parent = scrollingFrame

	local function ResizeFrame()
		local layoutSize = listLayout.AbsoluteContentSize
		scrollingFrame.CanvasSize = UDim2.new(1, 0, 0, layoutSize.Y)
	end

	local function NewLabel(title, value)
		local label = Label.new(title, value)
		label:SetParent(scrollingFrame)
		return label
	end

	local function StateChanged(newState, oldState)
		local addedOrRemoved = false
		for k,v in pairs(newState) do
			if v ~= oldState[k] then
				local label = labels[k]
				if not label then
					addedOrRemoved = true
					label = NewLabel(k, v)
					labels[k] = label
				end
				label:SetValue(v)
			end
		end
		for k in pairs(oldState) do
			if newState[k] == nil then
				local label = labels[k]
				if label then
					addedOrRemoved = true
					label:Destroy()
					labels[k] = nil
				end
			end
		end
		if addedOrRemoved then
			local allLabels = {}
			for _,l in pairs(labels) do
				table.insert(allLabels, l)
			end
			table.sort(allLabels, function(a, b)
				return (a._title < b._title)
			end)
			for i,l in ipairs(allLabels) do
				l.Frame.LayoutOrder = i
				l:SetBackground((i % 2) == 0 and EVEN_COLOR or ODD_COLOR)
			end
		end
	end

	store.changed:connect(StateChanged)
	StateChanged(store:getState(), {})

	ResizeFrame()
	listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(ResizeFrame)

end


return DebugState
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX8E8D541B7D554D0297BDC125884CFF23">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DataFetch</string>
					<string name="ScriptGuid">{0DFDE555-B81D-4F94-A035-2C5361C2479A}</string>
					<ProtectedString name="Source"><![CDATA[local ORDERED_ITEMS_PER_PAGE = 20

local DataFetch = {}

local Promise
local store

local fetchId = 0
local listStoresId = 0
local listKeysId = 0
local saveId = 0

local DataStoreService = game:GetService("DataStoreService")
local DataNil


local function GetDataStore(state)

	local dsName = state.DSName
	local dsScope = state.DSScope
	local ordered = state.UseOrdered
	local dataStore

	if dsScope == "" then
		dsScope = "global"
	end

	-- Retreive DataStore:
	if ordered then
		dataStore = DataStoreService:GetOrderedDataStore(dsName, dsScope)
	else
		local options = nil
		if state.UseV2 then
			options = Instance.new("DataStoreOptions")
			options:SetExperimentalFeatures({v2 = true})
		end
		dataStore = DataStoreService:GetDataStore(dsName, dsScope, options)
	end

	return dataStore

end


function DataFetch:Fetch(state)

	fetchId += 1
	local id = fetchId

	local key = state.Key
	local dataStore = GetDataStore(state)
	local ordered = state.UseOrdered

	if key == "" and not ordered then
		store:dispatch({type = "Data"; Data = DataNil})
		return Promise.resolve()
	end

	-- Inform application that we are fetching data:
	store:dispatch({type = "FetchingData"; FetchingData = true; ClearData = true})

	-- Fetch data:
	local fetchPromise = Promise.new(function(resolve, reject)
		local success, data = pcall(function()
			if ordered and key == "" then
				local min = state.OrderedMin
				local max = state.OrderedMax
				if min == DataNil then min = nil end
				if max == DataNil then max = nil end
				return dataStore:GetSortedAsync(state.OrderedAscend, ORDERED_ITEMS_PER_PAGE, min, max)
			else
				return dataStore:GetAsync(key)
			end
		end)
		if success then
			resolve(data)
		else
			reject(data)
		end
	end)

	-- Inform application of fetched data or error:
	return fetchPromise:andThen(function(data)
		if id ~= fetchId then return end
		if data == nil then
			data = DataNil
		end
		store:dispatch({type = "Data"; Data = data})
	end):catch(function(err)
		if id ~= fetchId then return end
		store:dispatch({type = "DataError"; DataError = tostring(err)})
		store:dispatch({type = "ShowAlert", Title = "Data Fetch Error", Message = tostring(err)})
	end)

end


function DataFetch:ListStores(state)

	listStoresId += 1
	local id = listStoresId

	local prefix = state.StorePrefix
	if prefix == "" then
		prefix = nil
	end

	store:dispatch({type = "FetchingStores"; FetchingStores = true; ClearStores = true})

	local storesPromise = Promise.new(function(resolve, reject)
		local success, data = pcall(function()
			return DataStoreService:ListDataStoresAsync(prefix)
		end)
		if success then
			resolve(data)
		else
			reject(data)
		end
	end)

	return storesPromise:andThen(function(data)
		if id ~= listStoresId then return end
		if data == nil then
			data = DataNil
		end
		store:dispatch({type = "Stores"; Stores = data})
	end):catch(function(err)
		if id ~= listStoresId then return end
		store:dispatch({type = "DataError"; DataError = tostring(err)})
		store:dispatch({type = "ShowAlert", Title = "List Keys Error", Message = tostring(err)})
	end)

end


function DataFetch:ListKeys(state)

	listKeysId += 1
	local id = listKeysId

	local prefix = state.KeyPrefix
	if prefix == "" then
		prefix = nil
	end

	local dataStore = GetDataStore(state)

	store:dispatch({type = "FetchingKeys"; FetchingKeys = true; ClearKeys = true})

	local keysPromise = Promise.new(function(resolve, reject)
		local success, data = pcall(function()
			return dataStore:ListKeysAsync(prefix)
		end)
		if success then
			resolve(data)
		else
			reject(data)
		end
	end)

	-- Inform application of fetched keys or error:
	return keysPromise:andThen(function(data)
		if id ~= listKeysId then return end
		if data == nil then
			data = DataNil
		end
		store:dispatch({type = "Keys"; Keys = data})
	end):catch(function(err)
		if id ~= listKeysId then return end
		store:dispatch({type = "DataError"; DataError = tostring(err)})
		store:dispatch({type = "ShowAlert", Title = "List Keys Error", Message = tostring(err)})
	end)

end


function DataFetch:Save(state)

	local id = (saveId + 1)
	saveId = id

	local key = state.Key

	if key == "" then
		--store:dispatch({type = "SavingData"; SavingData = true})
		return Promise.resolve()
	end

	local dataStore = GetDataStore(state)
	--local ordered = state.UseOrdered
	local data = state.Data

	-- Inform application that we are saving data:
	store:dispatch({type = "SavingData"; SavingData = true})

	-- Fetch data:
	local savePromise = Promise.new(function(resolve, reject)
		local success, dataSaved = pcall(function()
			return dataStore:UpdateAsync(key, function(oldVal)
				if id ~= saveId then
					return oldVal
				end
				return data
			end)
		end)
		if success then
			resolve(dataSaved)
		else
			reject(dataSaved)
		end
	end)

	-- Inform application of saved data or error:
	return savePromise:andThen(function(_dataSaved)
		if id ~= fetchId then return end
	end):catch(function(err)
		if id ~= fetchId then return end
		store:dispatch({type = "DataError"; DataError = tostring(err)})
		store:dispatch({type = "ShowAlert", Title = "Data Save Error", Message = tostring(err)})
	end):finally(function()
		store:dispatch({type = "SavingData"; SavingData = false})
	end)

end


function DataFetch:Delete(state)

	local key = state.Key

	if key == "" then
		return Promise.resolve()
	end

	local dataStore = GetDataStore(state)

	local deletePromise = Promise.new(function(resolve, reject)
		local success, err = pcall(function()
			return dataStore:RemoveAsync(key)
		end)
		if success then
			resolve()
		else
			reject(err)
		end
	end)

	return deletePromise:catch(function(err)
		store:dispatch({type = "DataError"; DataError = tostring(err)})
		store:dispatch({type = "ShowAlert", Title = "Data Delete Error", Message = tostring(err)})
	end)

end


function DataFetch:Start()
	DataNil = self.Modules.Constants.DataNil
	store = self.Modules.App:GetStore()
	local function DidChange(s1, s2, name)
		return s1[name] ~= s2[name]
	end
	local function DidAnyChange(s1, s2, ...)
		for _,name in ipairs({...}) do
			if s1[name] ~= s2[name] then
				return true
			end
		end
		return false
	end
	store.changed:connect(function(new, old)
		if DidAnyChange(new, old, "Key", "Refresh", "ConnectedView") or (new.UseOrdered and DidAnyChange(new, old, "UseOrdered", "OrderedMin", "OrderedMax", "OrderedAscend", "DSName", "DSScope")) then
			if new.ConnectedView == "StoreListContainer" then
				self:ListStores(new)
			elseif new.DSName ~= "" then
				if new.ConnectedView == "KeyListContainer" then
					self:ListKeys(new)
				elseif new.ConnectedView == "DataContainer" then
					self:Fetch(new)
				end
			end
		elseif DidChange(new, old, "UseOrdered") and not new.UseOrdered then
			store:dispatch({type = "Data"; Data = DataNil})
		end
	end)
end


function DataFetch:Init()
	Promise = self.Vendor.Promise
end


return DataFetch
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXC9672ECB21434FD1A4CCA4258C37AF1D">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">FileIO</string>
					<string name="ScriptGuid">{EF243E60-CD06-4650-AB81-5C5AF1DC4A07}</string>
					<ProtectedString name="Source"><![CDATA[local RunService = game:GetService("RunService")
local StudioService = game:GetService("StudioService")

local FileIO = {}

function FileIO:ToLuaString(data)
	local keywords = {
		["and"] = true; ["end"] = true; ["in"] = true; ["repeat"] = true;
		["break"] = true; ["false"] = true; ["local"] = true; ["return"] = true;
		["do"]  = true; ["for"] = true; ["nil"] = true; ["then"] = true;
		["else"] = true; ["function"] = true; ["not"] = true; ["true"] = true;
		["elseif"] = true; ["if"] = true; ["or"] = true; ["until"] = true;
		["while"] = true; ["continue"] = true;
	}
	local function IsKeyFine(key)
		return (keywords[key] == nil) and (key:match("^[_%a][_%w]*$") ~= nil)
	end
	local function Dump(obj)
		if type(obj) == "table" then
			local s = {"{"}
			for k,v in pairs(obj) do
				local key = k
				if type(key) == "string" and IsKeyFine(key) then
					table.insert(s, k .. "=")
				else
					if type(k) ~= "number" then k = "\"" .. k .. "\"" end
					table.insert(s, "[" .. k .. "]=")
				end
				table.insert(s, Dump(v))
				if next(obj, key) then
					table.insert(s, ",")
				end
			end
			table.insert(s, "}")
			return table.concat(s, "")
		elseif type(obj) == "string" then
			return "\"" .. obj:gsub("\"", "\\\"") .. "\""
		else
			return tostring(obj)
		end
	end
	return Dump(data)
end

function FileIO:PromptSaveFile(filename, contents)
	local ms = Instance.new("ModuleScript")
	ms.Name = "export_" .. filename
	ms.Archivable = false
	ms.Source = contents
	ms.Parent = game:GetService("ServerStorage")
	game:GetService("Selection"):Set({ms})
	if RunService:IsRunning() then
		warn("Cannot prompt to save while game is running")
		return false
	end
	return self.Plugin:PromptSaveSelection(filename)
end

function FileIO:PromptLoadFile()
	local file = StudioService:PromptImportFile({"lua"})
	if file then
		local ms = Instance.new("ModuleScript")
		ms.Name = "import_" .. file.Name
		ms.Archivable = false
		ms.Source = file:GetBinaryContents()
		local data = require(ms)
		ms:Destroy()
		return data
	end
end

return FileIO
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX182D81E25DD44EF2AEA238786EA8226C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DataVer</string>
					<string name="ScriptGuid">{B98F220C-5E5E-4A5B-ACB6-915A0F22BD61}</string>
					<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")

local DataVer = {}


local function TryJSONDecode(str)
	return pcall(function()
		return HttpService:JSONDecode(str)
	end)
end


function DataVer:Verify(text)
	local newValue = nil
	if text == "true" then
		newValue = true
	elseif text == "false" then
		newValue = false
	elseif text:match("^\".*\"$") and tonumber(text:sub(2, #text - 1)) then
		text = text:sub(2, #text - 1)
	elseif tonumber(text) then
		newValue = tonumber(text)
	elseif text:sub(1, 1) == "{" or text:sub(1, 1) == "[" then
		local success, t = TryJSONDecode(text)
		if success then
			newValue = t
		end
	end
	if newValue == nil then
		--[[
		if text:match("%b\"\"") then
			newValue = text:sub(2, #text - 1)
		else
			newValue = text
		end
		]]
		newValue = text
	end
	return newValue
end

return DataVer
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX1BF05A044EDF4F9B92D4168042E5DB29">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Profiles</string>
					<string name="ScriptGuid">{67F8FFDE-3486-45CA-9D1B-1F257541F4A5}</string>
					<ProtectedString name="Source"><![CDATA[-- Profiles
-- August 07, 2020

--[[

	Profiles:Save(name, gameId, dsName, dsScope, ordered, useV2)
	Profiles:Delete(id)
	Profiles:Filter(propertyName, propertyValue)
	Profiles:Search(propertyName, query)
	Profiles:FindFirstFromProperties(dsName, dsScope, ordered [, gameId])
	Profiles:GetAll()

--]]


local PROFILES_KEY = "dse_profiles"

local HttpService = game:GetService("HttpService")

local Profiles = {}

local allProfiles


function Profiles:Save(name, gameId, dsName, dsScope, ordered, useV2)
	local profile = {
		ID = HttpService:GenerateGUID(false);
		Name = name;
		GameId = gameId;
		DSName = dsName;
		DSScope = dsScope == "" and "global" or dsScope;
		Ordered = ordered;
		UseV2 = useV2;
	}
	table.insert(allProfiles, profile)
	self.Plugin:SetSetting(PROFILES_KEY, allProfiles)
end


function Profiles:Delete(id)
	for i,profile in ipairs(allProfiles) do
		if profile.ID == id then
			table.remove(allProfiles, i)
			self.Plugin:SetSetting(PROFILES_KEY, allProfiles)
			break
		end
	end
end


function Profiles:FindFirstFromProperties(dsName, dsScope, ordered, useV2, gameId)
	dsScope = (dsScope == "" and "global" or dsScope)
	for _,profile in ipairs(allProfiles) do
		if profile.DSName == dsName and profile.DSScope == dsScope and profile.Ordered == ordered and profile.UseV2 == useV2 then
			if (not gameId) or (profile.GameId == gameId) then
				return profile
			end
		end
	end
	return nil
end


function Profiles:Filter(property, propertyValue)
	local result = {}
	for _,profile in ipairs(allProfiles) do
		if profile[property] == propertyValue then
			table.insert(result, profile)
		end
	end
	return result
end


function Profiles:Search(property, searchQuery)
	local result = {}
	searchQuery = tostring(searchQuery):lower()
	local function Check(profile, val)
		if val == searchQuery then
			table.insert(result, 1, profile)
		elseif val:find(searchQuery) or searchQuery:find(val) then
			table.insert(result, profile)
		end
	end
	if property then
		for _,profile in ipairs(allProfiles) do
			Check(profile, tostring(profile[property]):lower())
		end
	else
		for _,profile in ipairs(allProfiles) do
			for _,val in pairs(profile) do
				Check(profile, tostring(val):lower())
			end
		end
	end
	return result
end


function Profiles:GetAll()
	return allProfiles
end


function Profiles:Init()
	allProfiles = self.Plugin:GetSetting(PROFILES_KEY) or {}
end


return Profiles
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX66C4457D47D14ECDA79C9ADAA15F15BF">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">HumanBytes</string>
					<string name="ScriptGuid">{156321A9-0C5B-4E1E-BEC3-70D791548DC5}</string>
					<ProtectedString name="Source"><![CDATA[-- Based off of: https://stackoverflow.com/a/63839503/2077120

local HumanBytes = {}

local METRIC_LABELS = {"B", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"}
local BINARY_LABELS = {"B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "Yib"}
local PRECISION_OFFSETS = {0.5, 0.05, 0.005, 0.0005}
local PRECISION_FORMATS = {"%s%i %s", "%s%.1f %s", "%s%.2f %s", "%s%.3f %s"}

function HumanBytes.Format(bytes: number, metric: boolean, precision: number)

	assert(type(bytes) == "number", "bytes must be a number")
	assert(type(metric) == "boolean", "metric must be a boolean")
	assert(type(precision) == "number", "precision must be a number")
	assert(precision >= 0 and precision <= 3 and math.floor(precision) == precision, "precision must be an integer in the range of [0, 3]")

	local unitLabels = metric and METRIC_LABELS or BINARY_LABELS
	local lastLabel = unitLabels[#unitLabels]
	local unitStep = metric and 1000 or 1024
	local unitStepThreshold = unitStep - PRECISION_OFFSETS[precision + 1]

	local isNegative = bytes <  0
	if isNegative then
		bytes = math.abs(bytes)
	end

	local curUnit
	for _,unit in ipairs(unitLabels) do
		curUnit = unit
		if bytes < unitStepThreshold then
			break
		end
		if unit ~= lastLabel then
			bytes /= unitStep
		end
	end

	return PRECISION_FORMATS[precision]:format(isNegative and "-" or "", bytes, curUnit)

end

return HumanBytes
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX990F6421C7D6404BAD15329FE8AD79AF">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">UI</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX1F82698674834E7994B67A735A9E97CF">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Container</string>
					<string name="ScriptGuid">{099E318B-F6B8-4535-BDC0-15172719067E}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)
local OverlayContext = require(script.Parent.OverlayContext)

local Container = Roact.Component:extend("Container")

local TweenService = game:GetService("TweenService")

local OVERLAY_OPAQUE_TRANSPARENCY = 0.5
local OVERLAY_TWEEN_INFO = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)


function Container:init()
	self.OverlayRef = Roact.createRef()
end


function Container:didMount()
	local overlay = self.OverlayRef:getValue()
	if overlay then
		overlay.BackgroundTransparency = self.props.Overlay and OVERLAY_OPAQUE_TRANSPARENCY or 1
	end
end


function Container:willUnmount()
	self:cancelOverlayTween()
end


function Container:didUpdate(prevProps)
	if self.props.Overlay ~= prevProps.Overlay then
		self:tweenOverlayTransparency(self.props.Overlay)
	end
end


function Container:tweenOverlayTransparency(showOverlay)
	local overlayFrame = self.OverlayRef:getValue()
	if not overlayFrame then return end
	self:cancelOverlayTween()
	local goalTransparency = showOverlay and OVERLAY_OPAQUE_TRANSPARENCY or 1
	local tween = TweenService:Create(overlayFrame, OVERLAY_TWEEN_INFO, {BackgroundTransparency = goalTransparency})
	self.overlayTween = tween
	tween.Completed:Connect(function(state)
		if state == Enum.PlaybackState.Completed then
			tween:Destroy()
			self.overlayTween = nil
		end
	end)
	tween:Play()
end


function Container:cancelOverlayTween()
	if self.overlayTween then
		self.overlayTween:Cancel()
		self.overlayTween:Destroy()
		self.overlayTween = nil
	end
end


function Container:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			self.props[Roact.Children].Padding = Roact.createElement("UIPadding", {
				PaddingBottom = UDim.new(0, self.props.PaddingBottom or self.props.Padding or 0);
				PaddingLeft = UDim.new(0, self.props.PaddingLeft or self.props.Padding or 0);
				PaddingRight = UDim.new(0, self.props.PaddingRight or self.props.Padding or 0);
				PaddingTop = UDim.new(0, self.props.PaddingTop or self.props.Padding or 0);
			})
			return Roact.createElement("Frame", {
				Size = self.props.Size or UDim2.fromScale(1, 1);
				Position = self.props.Position or UDim2.fromScale(0, 0);
				BackgroundColor3 = theme.MainBackground.Default;
				BackgroundTransparency = self.props.Transparency or 0;
				BorderSizePixel = 0;
				ZIndex = self.props.ZIndex or 1;
				Visible = (self.props.Visible == nil and true or (not not self.props.Visible));
			}, {
				Overlay = Roact.createElement("Frame", {
					Active = self.props.Overlay;
					BackgroundColor3 = Color3.new(0, 0, 0);
					Size = UDim2.fromScale(1, 1);
					ZIndex = 10;
					[Roact.Ref] = self.OverlayRef;
				});
				InnerFrame = Roact.createElement("Frame", {
					BackgroundTransparency = 1;
					Size = UDim2.fromScale(1, 1);
				}, {
					OverlayProvider = Roact.createElement(OverlayContext.Provider, {
						value = self.props.Overlay;
					}, self.props[Roact.Children])
				})
			})
		end;
	})
end


return Container
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXEB0197F9FA8F47E0B28C7A34C0CD9E7F">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ThemeController</string>
					<string name="ScriptGuid">{836CBF7E-7A83-48DF-B27D-4A652EC776D8}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)
local Theme = require(script.Parent.Theme)

local ThemeController = Roact.Component:extend("ThemeController")


function ThemeController:init()
	self.state = {Theme = Theme:Get()}
end


function ThemeController:didMount()
	self._themeChanged = settings().Studio.ThemeChanged:Connect(function()
		self:setState({Theme = Theme:Get()})
	end)
end


function ThemeController:willUnmount()
	self._themeChanged:Disconnect()
end


function ThemeController:render()
	return Roact.createElement(ThemeContext.Provider, {
		value = self.state.Theme;
	}, self.props[Roact.Children])
end


return ThemeController
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXC69713004FB8451BB3E0064321782F78">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ThemeContext</string>
					<string name="ScriptGuid">{54F520A9-DFEA-48A2-BC10-634D21E6A1A3}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local Theme = require(script.Parent.Theme)

local ThemeContext = Roact.createContext(Theme:Get())

return ThemeContext
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXB48CB3DB61EF4EF788B0F20132E5CF75">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Theme</string>
					<string name="ScriptGuid">{22F40A97-56B2-42DA-9207-5793F3877457}</string>
					<ProtectedString name="Source"><![CDATA[local Theme = {}

function Theme:Get()
	local theme = {}
	local colors = Enum.StudioStyleGuideColor:GetEnumItems()
	local modifiers = Enum.StudioStyleGuideModifier:GetEnumItems()
	local studioTheme = settings().Studio.Theme
	for _,color in ipairs(colors) do
		local c = {}
		for _,modifier in ipairs(modifiers) do
			c[modifier.Name] = studioTheme:GetColor(color, modifier)
		end
		theme[color.Name] = c
	end
	return theme
end

return Theme
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX89A528D5C2F34DF28D6D1BF598138314">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">SideMenu</string>
					<string name="ScriptGuid">{CE47CFC6-5B07-446D-9EF2-C37C10DAE0C7}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local Container = require(script.Parent.Container)
local ThemeContext = require(script.Parent.ThemeContext)
local InputBox = require(script.Parent.InputBox)
local CheckBox = require(script.Parent.CheckBox)
local Button = require(script.Parent.Button)
local IconButton = require(script.Parent.IconButton)
local Constants = require(script.Parent.Parent.Plugin.Constants)
local Profiles = require(script.Parent.Parent.Plugin.Profiles)

local SIDE_MENU_WIDTH = Constants.SideMenuWidth
local PADDING = Constants.SideMenuPadding
local MENU_BUTTON_SIZE = Constants.SideMenuButtonSize

local SideMenu = Roact.Component:extend("SideMenu")

local TweenService = game:GetService("TweenService")


local function createElementIf(condition, ...)
	if condition then
		return Roact.createElement(...)
	end
	return nil
end


function SideMenu:init()
	self:setState({
		Position = UDim2.new(0, 0, 0, 0);
		DSNameInput = self.props.DSNameText;
		DSScopeInput = self.props.DSScopeText;
		UseOrdered = self.props.UseOrdered;
		UseV2 = self.props.UseV2;
	})
	self.FrameRef = Roact.createRef()
	self.ListTopRef = Roact.createRef()
	self.ListBottomRef = Roact.createRef()
	self._tweens = {}
end


function SideMenu:tweenPosition(ref, pos)
	if self._tweens[ref] then
		self._tweens[ref]:Cancel()
		self._tweens[ref]:Destroy()
	end
	local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
	local tween = TweenService:Create(ref:getValue(), tweenInfo, {Position = pos})
	tween:Play()
	tween.Completed:Connect(function(state)
		if state == Enum.PlaybackState.Completed then
			self._tweens[ref] = nil
			tween:Destroy()
		end
	end)
	self._tweens[ref] = tween
end


function SideMenu:shouldUpdate(props)
	local shouldUpdate = props.Show == self.props.Show or not next(self._tweens)
	return shouldUpdate
end


function SideMenu:willUpdate(nextProps)
	if nextProps.Show ~= self.props.Show then
		if nextProps.Show then
			self:tweenPosition(self.FrameRef, UDim2.new(0, 0, 0, 0))
			self:tweenPosition(self.ListTopRef, UDim2.new(0, 0, 0, 0))
			self:tweenPosition(self.ListBottomRef, UDim2.new(0, 0, 0, 0))
		else
			self:tweenPosition(self.FrameRef, UDim2.new(0, -(SIDE_MENU_WIDTH - (PADDING * 2) - MENU_BUTTON_SIZE), 0, 0))
			self:tweenPosition(self.ListTopRef, UDim2.new(0, -(PADDING + MENU_BUTTON_SIZE), 0, 0))
			self:tweenPosition(self.ListBottomRef, UDim2.new(0, -(PADDING + MENU_BUTTON_SIZE), 0, 0))
		end
	end
end


function SideMenu:didUpdate(prevProps)
	if prevProps.DSNameText ~= self.props.DSNameText or prevProps.DSScopeText ~= self.props.DSScopeText or prevProps.UseOrdered ~= self.props.UseOrdered or prevProps.UseV2 ~= self.props.UseV2 then
		self:setState({
			DSNameInput = self.props.DSNameText;
			DSScopeInput = self.props.DSScopeText;
			UseOrdered = self.props.UseOrdered;
			UseV2 = self.props.UseV2;
		})
	end
end


function SideMenu:willUnmount()
	for _,tween in pairs(self._tweens) do
		tween:Destroy()
	end
end


function SideMenu:render()
	local hasProfile = Profiles:FindFirstFromProperties(self.state.DSNameInput, self.state.DSScopeInput, self.state.UseOrdered, self.state.UseV2, game.GameId) ~= nil
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			return Roact.createElement("Frame", {
				BackgroundColor3 = theme.MainBackground.Default;
				BackgroundTransparency = 0;
				BorderSizePixel = 0;
				Size = UDim2.new(0, SIDE_MENU_WIDTH, 1, 0);
				Position = self.state.Position;
				ZIndex = 2;
				[Roact.Ref] = self.FrameRef;
			}, {
				Content = Roact.createElement(Container, {Transparency = 1, Padding = PADDING}, {
					MenuButton = Roact.createElement("ImageButton", {
						AnchorPoint = Vector2.new(1, 0);
						AutoButtonColor = false;
						BackgroundTransparency = 1;
						Position = UDim2.new(1, 0, 0, 0);
						Size = UDim2.new(0, MENU_BUTTON_SIZE, 0, MENU_BUTTON_SIZE);
						ImageColor3 = theme.MainText.Default;
						Image = "rbxassetid://5051226242";
						Visible = self.props.Connected;
						[Roact.Event.Activated] = function(rbx)
							rbx.ImageColor3 = theme.MainText.Default
							self.props.SetMenuShown(not self.props.Show)
						end;
						[Roact.Event.MouseEnter] = function(rbx)
							rbx.ImageColor3 = theme.MainText.Hover
						end;
						[Roact.Event.MouseLeave] = function(rbx)
							rbx.ImageColor3 = theme.MainText.Default
						end;
					});
					ListTop = Roact.createElement("Frame", {
						BackgroundTransparency = 1;
						Size = UDim2.new(1, 0, 1, 0);
						[Roact.Ref] = self.ListTopRef;
					}, {
						UIListLayout = Roact.createElement("UIListLayout", {
							Padding = UDim.new(0, 10);
							FillDirection = Enum.FillDirection.Vertical;
							HorizontalAlignment = Enum.HorizontalAlignment.Center;
							SortOrder = Enum.SortOrder.LayoutOrder;
							VerticalAlignment = Enum.VerticalAlignment.Top;
						});
						TopItem = Roact.createElement("Frame", {
							BackgroundTransparency = 1;
							Size = UDim2.new(1, 0, 0, MENU_BUTTON_SIZE);
							LayoutOrder = 0;
						}, {
							Title = Roact.createElement("TextLabel", {
								BackgroundTransparency = 1;
								Size = UDim2.new(1, 0, 1, 0);
								LayoutOrder = 0;
								Font = Enum.Font.SourceSans;
								Text = "Connect to DataStore";
								TextSize = 18;
								TextColor3 = theme.MainText.Default;
								TextXAlignment = Enum.TextXAlignment.Left;
							});
							SaveButton = Roact.createElement(IconButton, {
								Icon = "rbxassetid://5516414743";
								ImageColor = "MainText";
								Tooltip = "Save Connection";
								Size = UDim2.new(0, 16, 0, 16);
								AnchorPoint = Vector2.new(1, 0);
								Position = UDim2.new(1, self.props.Connected and -52 or -26, 0, 0);
								Disabled = (hasProfile or self.state.DSNameInput == "");
								OnActivated = function()
									self.props.SetInputs(self.state.DSNameInput, self.state.DSScopeInput, self.state.UseOrdered, self.state.UseV2)
									self.props.ShowFrame("SaveProfile");
								end;
							});
							LoadButton = Roact.createElement(IconButton, {
								Icon = "rbxassetid://5516414405";
								ImageColor = "MainText";
								Tooltip = "Load Connection";
								Size = UDim2.new(0, 16, 0, 16);
								AnchorPoint = Vector2.new(1, 0);
								Position = UDim2.new(1, self.props.Connected and -26 or 0, 0, 0);
								Disabled = false;
								OnActivated = function()
									self.props.ShowFrame("LoadProfile");
								end;
							});
						});
						DSName = Roact.createElement(InputBox, {
							Placeholder = "Name";
							Text = self.state.DSNameInput;
							LayoutOrder = 1;
							OnInput = function(text)
								self:setState({DSNameInput = text})
							end;
						});
						DSScope = Roact.createElement(InputBox, {
							Placeholder = "Scope";
							Text = self.state.DSScopeInput;
							LayoutOrder = 2;
							OnInput = function(text)
								self:setState({DSScopeInput = text})
							end;
						});
						OrderedDataStore = Roact.createElement(CheckBox, {
							Label = "Use OrderedDataStore";
							LayoutOrder = 3;
							Checked = self.state.UseOrdered;
							OnChecked = function(checked)
								self:setState({UseOrdered = checked})
							end;
						});
						UseV2 = Roact.createElement(CheckBox, {
							Label = "Use DataStore V2";
							LayoutOrder = 4;
							Checked = self.state.UseV2;
							OnChecked = function(checked)
								self:setState({UseV2 = checked})
							end;
						});
						ButtonList = Roact.createElement("Frame", {
							BackgroundTransparency = 1;
							Size = UDim2.new(1, 0, 0, 30);
							LayoutOrder = 5;
						}, {
							UIListLayout = Roact.createElement("UIListLayout", {
								Padding = UDim.new(0, 10);
								FillDirection = Enum.FillDirection.Horizontal;
								HorizontalAlignment = Enum.HorizontalAlignment.Center;
								SortOrder = Enum.SortOrder.LayoutOrder;
								VerticalAlignment = Enum.VerticalAlignment.Center;
							});
							ConnectButton = Roact.createElement(Button, {
								Label = "Connect";
								ImageColor = "DialogMainButton";
								TextColor = "DialogMainButtonText";
								Size = self.state.UseV2 and UDim2.new(0.5, -5, 1, 0) or UDim2.new(1, 0, 1, 0);
								LayoutOrder = 1;
								Disabled = (self.state.DSNameInput == "");
								OnActivated = function()
									self.props.TextChanged("DSName", self.state.DSNameInput)
									self.props.TextChanged("DSScope", self.state.DSScopeInput)
									self.props.OrderedChanged(self.state.UseOrdered)
									self.props.UseV2Changed(self.state.UseV2)
									self.props.SetMenuShown(false)
									self.props.SetConnected(true, "DataContainer")
									self.props.ClearKey()
								end;
							});
							ListKeysButton = createElementIf(self.state.UseV2, Button, {
								Label = "List Keys";
								ImageColor = "DialogMainButton";
								TextColor = "DialogMainButtonText";
								Size = UDim2.new(0.5, -5, 1, 0);
								LayoutOrder = 2;
								Disabled = (self.state.DSNameInput == "" or self.state.UseOrdered);
								OnActivated = function()
									self.props.TextChanged("DSName", self.state.DSNameInput)
									self.props.TextChanged("DSScope", self.state.DSScopeInput)
									self.props.UseV2Changed(self.state.UseV2)
									self.props.SetMenuShown(false)
									self.props.SetConnected(true, "KeyListContainer")
									self.props.Refresh()
								end;
							});
						});
					});
					ListBottom = Roact.createElement("Frame", {
						BackgroundTransparency = 1;
						Size = UDim2.new(1, 0, 1, 0);
						[Roact.Ref] = self.ListBottomRef;
					}, {
						UIListLayout = Roact.createElement("UIListLayout", {
							Padding = UDim.new(0, 10);
							FillDirection = Enum.FillDirection.Vertical;
							HorizontalAlignment = Enum.HorizontalAlignment.Center;
							SortOrder = Enum.SortOrder.LayoutOrder;
							VerticalAlignment = Enum.VerticalAlignment.Bottom;
						});
						ButtonList = Roact.createElement("Frame", {
							BackgroundTransparency = 1;
							Size = UDim2.new(1, 0, 0, 30);
							LayoutOrder = 2;
						}, {
							UIListLayout = Roact.createElement("UIListLayout", {
								Padding = UDim.new(0, 10);
								FillDirection = Enum.FillDirection.Horizontal;
								HorizontalAlignment = Enum.HorizontalAlignment.Center;
								SortOrder = Enum.SortOrder.LayoutOrder;
								VerticalAlignment = Enum.VerticalAlignment.Center;
							});
							ListStoresButton = Roact.createElement(Button, {
								Label = "List Stores";
								ImageColor = "DialogMainButton";
								TextColor = "DialogMainButtonText";
								Size = UDim2.new(0.5, -5, 1, 0);
								LayoutOrder = 1;
								OnActivated = function()
									self.props.SetMenuShown(false)
									self.props.SetConnected(true, "StoreListContainer")
								end;
							});
							SetPlaceId = Roact.createElement(Button, {
								Label = "Set Place ID";
								ImageColor = "CheckedFieldBorder";
								TextColor = "DialogMainButtonText";
								Size = UDim2.new(0.5, -5, 1, 0);
								LayoutOrder = 2;
								OnActivated = function()
									self.props.ShowFrame("PlaceId")
								end;
							});
						});
					});
				});
				Shadow = Roact.createElement("ImageLabel", {
					BackgroundTransparency = 1;
					Position = UDim2.new(1, 0, 0, 0);
					Size = UDim2.new(0, 8, 1, 0);
					Image = "rbxassetid://5051528605";
					ImageTransparency = 0.7;
					ImageColor3 = Color3.new(0, 0, 0);
				});
			})
		end;
	})
end


SideMenu = RoactRodux.connect(
	function(state)
		return {
			Show = state.ShowSideMenu;
			DSNameText = state.DSName;
			DSScopeText = state.DSScope;
			UseOrdered = state.UseOrdered;
			UseV2 = state.UseV2;
			Connected = state.Connected;
			DSNameInputSync = state.DSNameInput;
			DSScopeInputSync = state.DSScopeInput;
			UseOrderedInputSync = state.UseOrderedInput;
		}
	end,
	function(dispatch)
		return {
			TextChanged = function(name, value)
				dispatch({type = name; [name] = value})
			end;
			OrderedChanged = function(isOrdered)
				dispatch({type = "Ordered"; UseOrdered = isOrdered})
			end;
			UseV2Changed = function(useV2)
				dispatch({type = "UseV2"; UseV2 = useV2})
			end;
			SetMenuShown = function(show)
				dispatch({type = "SideMenu"; Show = show})
			end;
			ShowFrame = function(frameName)
				dispatch({type = "ShowFrame"; Frame = frameName})
			end;
			SetConnected = function(isConnected, connectedView)
				dispatch({type = "Connected"; Connected = isConnected; ConnectedView = connectedView})
				if connectedView == "KeyListContainer" then
					dispatch({type = "Keys"; Keys = Constants.DataNil})
				end
			end;
			SetInputs = function(dsName, dsScope, useOrdered, useV2)
				dispatch({type = "SideMenuInputs"; DSName = dsName; DSScope = dsScope; UseOrdered = useOrdered; UseV2 = useV2})
			end;
			ClearKey = function()
				dispatch({type = "Key"; Key = ""})
			end;
			Refresh = function()
				dispatch({type = "Refresh"})
			end;
		}
	end
)(SideMenu)


return SideMenu
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXEA15B7B6DF6A4F4CA0A2FBB5A5871D17">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">InputBox</string>
					<string name="ScriptGuid">{E4A52424-3E34-48A8-BB50-68976D994E3A}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)

local TweenService = game:GetService("TweenService")

local InputBox = Roact.Component:extend("InputBox")


function InputBox:init()
	self.TextBoxRef = Roact.createRef()
	self.UnderlineRef = Roact.createRef()
	self.ClearRef = Roact.createRef()
	self._tweenLine = nil
	self:setState({
		InputText = self.props.Text or "";
	})
end


function InputBox:tweenLine(show)
	local line = self.UnderlineRef:getValue()
	if not line then return end
	line.Visible = true
	if self._tweenLine then
		self._tweenLine:Destroy()
	end
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local tween = TweenService:Create(line, tweenInfo, {
		Size = show and UDim2.new(1, 0, 0, 2) or UDim2.new(0, 0, 0, 0);
	})
	tween:Play()
	tween.Completed:Connect(function(state)
		if state == Enum.PlaybackState.Completed then
			if not show then
				line.Visible = false
			end
			self._tweenLine = false
		end
	end)
	self._tweenLine = tween
end


function InputBox:willUpdate(nextProps)
	if self.props.Active ~= nextProps.Active then
		local textBox = self.TextBoxRef:getValue()
		if (not nextProps.Active) and textBox:IsFocused() then
			textBox:ReleaseFocus()
		end
	end
end


function InputBox:checkForceFocus()
	if self.props.ForceFocus then
		local textBox = self.TextBoxRef:getValue()
		if textBox then
			textBox:CaptureFocus()
		end
	end
end


function InputBox:didMount()
	self:checkForceFocus()
end


function InputBox:didUpdate()
	self:checkForceFocus()
end


function InputBox:render()
	local expandable = (type(self.props.OnExpand) == "function")
	local width = self.props.Width
	return Roact.createElement("Frame", {
		BackgroundTransparency = 1;
		Size = self.props.Size or UDim2.new(width and 0 or 1, width or 0, 0, 30);
		LayoutOrder = self.props.LayoutOrder or 0;
		Visible = (self.props.Visible == nil and true or (not not self.props.Visible));
	}, {
		InputFrameBorder = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("Frame", {
					Size = UDim2.new(1, 0, 1, 0);
					BackgroundColor3 = theme.InputFieldBorder.Default;
					BorderSizePixel = 0;
				}, {
					UICorner = Roact.createElement("UICorner", {
						CornerRadius = UDim.new(0, 8);
					});
					InputFrame = Roact.createElement("Frame", {
						Position = UDim2.new(0, 1, 0, 1);
						Size = UDim2.new(1, -2, 1, -2);
						BackgroundColor3 = theme.InputFieldBackground.Default;
						BorderSizePixel = 0;
					}, {
						UICorner = Roact.createElement("UICorner", {
							CornerRadius = UDim.new(0, 7);
						});
						UIPadding = Roact.createElement("UIPadding", {
							PaddingLeft = UDim.new(0, 10);
							PaddingRight = UDim.new(0, 10);
						});
						TextBox = Roact.createElement("TextBox", {
							BackgroundTransparency = 1;
							ClearTextOnFocus = false;
							Size = UDim2.new(1, (expandable and -40 or -20), 1, 0);
							Font = Enum.Font.SourceSans;
							PlaceholderColor3 = theme.DimmedText.Default;
							PlaceholderText = self.props.Placeholder or "";
							Text = self.props.Text or "";
							TextColor3 = theme.MainText.Default;
							TextSize = 16;
							TextXAlignment = Enum.TextXAlignment.Left;
							ClipsDescendants = true;
							Visible = (self.props.Active == nil and true or (not not self.props.Active));
							[Roact.Ref] = self.TextBoxRef;
							[Roact.Event.Focused] = function()
								self:tweenLine(true)
							end;
							[Roact.Event.FocusLost] = function(rbx, submitted)
								self:tweenLine(false)
								if type(self.props.OnFocusLost) == "function" then
									local clearText = self.props.OnFocusLost(submitted, rbx.Text, rbx)
									if clearText then
										rbx.Text = ""
									end
								end
							end;
							[Roact.Change.Text] = function(rbx)
								local text = rbx.Text
								if text:sub(#text) == "\r" then
									text = text:sub(1, #text - 1)
									rbx.Text = text
									return
								end
								if self.props.MaxCharacters and #text > self.props.MaxCharacters then
									text = text:sub(1, self.props.MaxCharacters)
									rbx.Text = text
									return
								end
								self:setState({InputText = text})
								if self.props.FilterText then
									local newText = self.props.FilterText(text)
									if newText ~= text then
										rbx.Text = newText
										return
									end
								end
								if type(self.props.OnInput) == "function" then
									self.props.OnInput(text)
								end
								local clearBtn = self.ClearRef:getValue()
								if clearBtn then
									if rbx.Text == "" then
										clearBtn.Text = ""
									else
										clearBtn.Text = "X"
									end
								end
							end;
						});
						LabelMirror = Roact.createElement("TextLabel", {
							BackgroundTransparency = 1;
							Size = UDim2.new(1, -20, 1, 0);
							Font = Enum.Font.SourceSans;
							Text = self.state.InputText == "" and (self.props.Placeholder or "") or self.state.InputText;
							TextColor3 = (self.state.InputText == "" and theme.DimmedText.Default or theme.MainText.Default);
							TextSize = 16;
							TextXAlignment = Enum.TextXAlignment.Left;
							Visible = not (self.props.Active == nil and true or (not not self.props.Active));
						});
						Underline = Roact.createElement("Frame", {
							AnchorPoint = Vector2.new(0, 1);
							BackgroundColor3 = theme.LinkText.Default;
							BorderSizePixel = 0;
							Position = UDim2.new(0, 0, 1, -3);
							Size = UDim2.new(0, 0, 0, 0);
							Visible = false;
							[Roact.Ref] = self.UnderlineRef;
						});
						Expand = Roact.createElement("TextButton", {
							AnchorPoint = Vector2.new(1, 0);
							BackgroundTransparency = 1;
							Position = UDim2.new(1, -20, 0, 0);
							Size = UDim2.new(0, 20, 1, 0);
							Font = Enum.Font.Arcade;
							Text = "E";
							TextColor3 = theme.LinkText.Default;
							TextSize = 16;
							TextTransparency = 0.7;
							Visible = expandable and (self.props.Active == nil and true or (not not self.props.Active));
							[Roact.Event.Activated] = function()
								local textBox = self.TextBoxRef:getValue()
								textBox:CaptureFocus()
								self.props.OnExpand()
							end;
							[Roact.Event.MouseEnter] = function(rbx)
								rbx.TextTransparency = 0
							end;
							[Roact.Event.MouseLeave] = function(rbx)
								rbx.TextTransparency = 0.7
							end;
						});
						Clear = Roact.createElement("TextButton", {
							AnchorPoint = Vector2.new(1, 0);
							BackgroundTransparency = 1;
							Position = UDim2.new(1, 0, 0, 0);
							Size = UDim2.new(0, 20, 1, 0);
							Font = Enum.Font.Arcade;
							Text = (self.props.Text and self.props.Text ~= "" and "X" or "");
							TextColor3 = Color3.new(1, 0, 0);
							TextSize = 16;
							TextTransparency = 0.7;
							Visible = (self.props.Active == nil and true or (not not self.props.Active));
							[Roact.Ref] = self.ClearRef;
							[Roact.Event.Activated] = function()
								local textBox = self.TextBoxRef:getValue()
								if textBox.Text ~= "" then
									textBox.Text = ""
									if type(self.props.OnCleared) == "function" then
										self.props.OnCleared()
									end
								end
								textBox:CaptureFocus()
							end;
							[Roact.Event.MouseEnter] = function(rbx)
								rbx.TextTransparency = 0
							end;
							[Roact.Event.MouseLeave] = function(rbx)
								rbx.TextTransparency = 0.7
							end;
						});
					});
				});
			end;
		});
	})
end


return InputBox
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX839328A203FF4351B1682F9E13050E6F">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">CheckBox</string>
					<string name="ScriptGuid">{5AF24877-6AAC-4540-B2EA-AB927F8D9DE6}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)

local CheckBox = Roact.PureComponent:extend("CheckBox")


function CheckBox:init()
	self:setState({
		Checked = self.props.Checked;
	})
	self.FrameRef = Roact.createRef()
end


function CheckBox:didUpdate(prevProps)
	if prevProps.Checked ~= self.props.Checked and self.props.Checked ~= self.state.Checked then
		self:setState({Checked = self.props.Checked})
	end
end


function CheckBox:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			return Roact.createElement("TextButton", {
				BackgroundTransparency = 1;
				LayoutOrder = self.props.LayoutOrder or 0;
				Size = UDim2.new(1, 0, 0, 24);
				Text = "";
				TextTransparency = 1;
				[Roact.Event.Activated] = function()
					self:setState({
						Checked = not self.state.Checked;
					})
					if type(self.props.OnChecked) == "function" then
						self.props.OnChecked(self.state.Checked)
					end
				end;
				[Roact.Event.MouseEnter] = function()
					self.FrameRef:getValue().BackgroundColor3 = theme.InputFieldBackground.Hover
				end;
				[Roact.Event.MouseLeave] = function()
					self.FrameRef:getValue().BackgroundColor3 = theme.InputFieldBackground.Default
				end;
			}, {
				UIListLayout = Roact.createElement("UIListLayout", {
					Padding = UDim.new(0, 10);
					FillDirection = Enum.FillDirection.Horizontal;
					HorizontalAlignment = Enum.HorizontalAlignment.Left;
					SortOrder = Enum.SortOrder.LayoutOrder;
					VerticalAlignment = Enum.VerticalAlignment.Top;
				});
				InputFrameBorder = Roact.createElement("Frame", {
					LayoutOrder = 0;
					Size = UDim2.new(1, 0, 1, 0);
					SizeConstraint = Enum.SizeConstraint.RelativeYY;
					BackgroundColor3 = theme.InputFieldBorder.Default;
					BorderSizePixel = 0;
				}, {
					UICorner = Roact.createElement("UICorner", {
						CornerRadius = UDim.new(0, 8);
					});
					InputFrame = Roact.createElement("ImageLabel", {
						Position = UDim2.new(0, 1, 0, 1);
						Size = UDim2.new(1, -2, 1, -2);
						BackgroundColor3 = theme.InputFieldBackground.Default;
						BorderSizePixel = 0;
						[Roact.Ref] = self.FrameRef;
					}, {
						UICorner = Roact.createElement("UICorner", {
							CornerRadius = UDim.new(0, 7);
						});
						UIPadding = Roact.createElement("UIPadding", {
							PaddingBottom = UDim.new(0, 5);
							PaddingLeft = UDim.new(0, 5);
							PaddingRight = UDim.new(0, 5);
							PaddingTop = UDim.new(0, 5);
						});
						Checkmark = Roact.createElement("ImageLabel", {
							BackgroundTransparency = 1;
							Size = UDim2.new(1, 0, 1, 0);
							Image = "rbxassetid://5051173276";
							ImageColor3 = theme.MainText.Default;
							ScaleType = Enum.ScaleType.Fit;
							Visible = self.state.Checked;
						});
					});
				});
				Label = Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					LayoutOrder = 1;
					Size = UDim2.new(0, 10, 1, 0);
					Font = Enum.Font.SourceSans;
					Text = self.props.Label;
					TextColor3 = theme.MainText.Default;
					TextSize = 18;
					TextXAlignment = Enum.TextXAlignment.Left;
				});
			})
		end;
	});
end


return CheckBox
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXF9EDF77FC9CD4CB7B9F7B6B58F6B0B6B">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Button</string>
					<string name="ScriptGuid">{E237664E-18B1-45FD-9139-2AAD81BDBF0B}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)
local OverlayContext = require(script.Parent.OverlayContext)
local Spinner = require(script.Parent.Spinner)
local Tooltip = require(script.Parent.Tooltip)

local Button = Roact.PureComponent:extend("Button")


function Button:init()
	self:setState({
		Processing = false;
		ShowTooltip = false;
	})
	self.ButtonRef = Roact.createRef()
end


function Button:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			return Roact.createElement(OverlayContext.Consumer, {
				render = function(showOverlay)
					local disabled = self.props.Disabled or showOverlay
					local items = {}
					if not self.props.Icon then
						items.Spinner = Roact.createElement(Spinner, {
							Show = self.state.Processing;
							Color = theme[self.props.TextColor or "MainText"].Default;
						})
					else
						items.Icon = Roact.createElement("ImageLabel", {
							BackgroundTransparency = 1;
							AnchorPoint = Vector2.new(0.5, 0.5);
							Position = UDim2.fromScale(0.5, 0.5);
							Size = self.props.IconSize or UDim2.fromScale(1, 1);
							Image = self.props.Icon;
							ImageColor3 = theme[self.props.TextColor or "MainText"][disabled and "Disabled" or "Default"];
							Visible = (not self.state.Processing);
						})
						items.Spinner = Roact.createElement(Spinner, {
							AnchorPoint = Vector2.new(0.5, 0.5);
							Position = UDim2.fromScale(0.5, 0.5);
							Size = UDim2.fromScale(0.5, 0.5);
							Show = self.state.Processing;
							Color = theme[self.props.TextColor or "MainText"].Default;
						})
					end
					if self.props.Tooltip then
						local pos = UDim2.new()
						local btn = self.ButtonRef:getValue()
						if btn then
							local sz = btn.AbsoluteSize
							pos = btn.AbsolutePosition + Vector2.new(sz.X / 2, sz.Y + 5)
							pos = UDim2.fromOffset(pos.X, pos.Y)
						end
						items.Tooltip = Roact.createElement(Tooltip, {
							AnchorPoint = Vector2.new(0.5, 0);
							Text = self.props.Tooltip;
							Position = pos;
							Visible = self.state.ShowTooltip;
						})
					end
					items.UICorner = Roact.createElement("UICorner", {
						CornerRadius = UDim.new(0, 8);
					})
					return Roact.createElement("TextButton", {
						Active = not disabled;
						AutoButtonColor = false;
						BackgroundColor3 = theme[self.props.ImageColor or "MainButton"][disabled and "Disabled" or "Default"];
						AnchorPoint = self.props.AnchorPoint or Vector2.new();
						LayoutOrder = self.props.LayoutOrder or 0;
						Size = self.props.Size or UDim2.new(1, 0, 0, 30);
						Position = self.props.Position or UDim2.new(0, 0, 0, 0);
						Font = Enum.Font.SourceSansBold;
						Text = (not self.props.Icon) and self.props.Label or "";
						TextColor3 = theme[self.props.TextColor or "MainText"][disabled and "Disabled" or "Default"];
						TextSize = 18;
						[Roact.Event.Activated] = function(rbx)
							if self.state.Processing or not rbx.Active then return end
							self:setState({Processing = true})
							self.props.OnActivated(rbx)
							self:setState({Processing = false})
						end;
						[Roact.Event.MouseButton1Down] = function(rbx)
							self:setState({ShowTooltip = false})
							if disabled then return end
							rbx.BackgroundColor3 = theme[self.props.ImageColor or "MainButton"].Pressed
						end;
						[Roact.Event.MouseButton1Up] = function(rbx)
							if disabled then return end
							rbx.BackgroundColor3 = theme[self.props.ImageColor or "MainButton"].Hover
						end;
						[Roact.Event.MouseEnter] = function(rbx)
							self:setState({ShowTooltip = true})
							if disabled then return end
							rbx.BackgroundColor3 = theme[self.props.ImageColor or "MainButton"].Hover
						end;
						[Roact.Event.MouseLeave] = function(rbx)
							self:setState({ShowTooltip = false})
							if disabled then return end
							rbx.BackgroundColor3 = theme[self.props.ImageColor or "MainButton"].Default
						end;
						[Roact.Ref] = self.ButtonRef;
					}, items)
				end;
			})
		end;
	});
end


return Button
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX8A1DC39688C941B8B6A6D337C7C071E8">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Spinner</string>
					<string name="ScriptGuid">{0ABF366E-6BEA-4AD2-9ECC-6D49082A3A09}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)

local DEG_PER_SEC = 600

local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

local Spinner = Roact.PureComponent:extend("Spinner")


function Spinner:init()
	self._renderName = "Spinner_" .. HttpService:GenerateGUID(false)
	self._renderBound = false
	self.SpinnerRef = Roact.createRef()
end


function Spinner:bind()
	if self._renderBound then return end
	self._renderBound = true
	local spinner = self.SpinnerRef:getValue()
	local rotation = 0
	spinner.Rotation = rotation
	RunService:BindToRenderStep(self._renderName, Enum.RenderPriority.Last.Value, function(dt)
		rotation = ((rotation + (DEG_PER_SEC * dt)) % 360)
		spinner.Rotation = rotation
	end)
end


function Spinner:unbind()
	if not self._renderBound then return end
	self._renderBound = false
	RunService:UnbindFromRenderStep(self._renderName)
end


function Spinner:didMount()
	self:bind()
end


function Spinner:willUnmount()
	self:unbind()
end


function Spinner:didUpdate(prevProps)
	if self.props.Show ~= prevProps.Show then
		if self.props.Show then
			self:bind()
		else
			self:unbind()
		end
	end
end


function Spinner:render()
	return Roact.createElement("ImageLabel", {
		AnchorPoint = self.props.AnchorPoint or Vector2.new(1, 0.5);
		BackgroundTransparency = 1;
		LayoutOrder = self.props.LayoutOrder or 0;
		Position = self.props.Position or UDim2.new(1, -5, 0.5, 0);
		Size = self.props.Size or UDim2.new(0.5, 0, 0.5, 0);
		SizeConstraint = Enum.SizeConstraint.RelativeYY;
		Image = "rbxassetid://5056179278";
		ImageColor3 = self.props.Color;
		Visible = self.props.Show;
		[Roact.Ref] = self.SpinnerRef;
	})
end


return Spinner
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXBBADDC16BFA947CD97BEC77ABE88A1B9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">SetPlaceId</string>
					<string name="ScriptGuid">{46AC5FB1-BD89-45B4-901C-19E7A4809CD9}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local Promise = require(script.Parent.Parent.Vendor.Promise)
local ThemeContext = require(script.Parent.ThemeContext)
local InputBox = require(script.Parent.InputBox)
local Button = require(script.Parent.Button)
local Spinner = require(script.Parent.Spinner)

local SetPlaceId = Roact.Component:extend("SetPlaceId")


function SetPlaceId:init()
	self:setState({
		PlaceName = "";
		InputPlaceId = tostring(game.PlaceId);
		ErrorMessage = "";
	})
end


function SetPlaceId:loadPlaceName()
	local delayTime = (tonumber(self.state.InputPlaceId) and 0.25 or 0)
	if self._loadDelay then
		self._loadDelay:cancel()
	end
	self._loadDelay = Promise.delay(delayTime):andThen(function()
		self:setState({PlaceName = "__load__"})
		local id = tonumber(self.state.InputPlaceId)
		local success, info
		if id then
			success, info = pcall(function()
				return game:GetService("MarketplaceService"):GetProductInfo(id, Enum.InfoType.Asset)
			end)
			if success then
				success = (info.AssetTypeId == 9)
			end
		end
		if success then
			self:setState({PlaceName = info.Name})
		else
			self:setState({PlaceName = ""})
		end
		self._loadDelay = nil
	end)
end


function SetPlaceId:didMount()
	self:loadPlaceName()
end


function SetPlaceId:didUpdate(_prevProps, prevState)
	if self.state.InputPlaceId ~= prevState.InputPlaceId then
		self:loadPlaceName()
	end
end


function SetPlaceId:willUnmount()
	if self._loadDelay then
		self._loadDelay:cancel()
		self._loadDelay = nil
	end
end


function SetPlaceId:render()
	return Roact.createElement("Frame", {
		AnchorPoint = Vector2.new(0.5, 0);
		BackgroundTransparency = 1;
		Position = UDim2.new(0.5, 0, 0, 0);
		Size = UDim2.new(1, 0, 1, 0);
		ZIndex = 9;
	}, {
		UISizeConstraint = Roact.createElement("UISizeConstraint", {
			MinSize = Vector2.new(0, 0);
			MaxSize = Vector2.new(300, math.huge);
		});
		Shadows = Roact.createElement("Frame", {
			BackgroundTransparency = 1;
			Size = UDim2.new(1, 0, 1, 0);
		}, {
			LeftShadow = Roact.createElement("ImageLabel", {
				AnchorPoint = Vector2.new(1, 0);
				BackgroundTransparency = 1;
				Position = UDim2.new(0, 0, 0, 0);
				Size = UDim2.new(0, 8, 1, 0);
				Rotation = 180;
				Image = "rbxassetid://5051528605";
				ImageTransparency = 0.7;
				ImageColor3 = Color3.new(0, 0, 0);
			});
			RightShadow = Roact.createElement("ImageLabel", {
				BackgroundTransparency = 1;
				Position = UDim2.new(1, 0, 0, 0);
				Size = UDim2.new(0, 8, 1, 0);
				Image = "rbxassetid://5051528605";
				ImageTransparency = 0.7;
				ImageColor3 = Color3.new(0, 0, 0);
			});
		});
		Container = Roact.createElement("Frame", {
			BackgroundTransparency = 1;
			Size = UDim2.new(1, 0, 1, 0);
		}, {
			UIListLayout = Roact.createElement("UIListLayout", {
				Padding = UDim.new(0, 10);
				FillDirection = Enum.FillDirection.Vertical;
				HorizontalAlignment = Enum.HorizontalAlignment.Center;
				SortOrder = Enum.SortOrder.LayoutOrder;
				VerticalAlignment = Enum.VerticalAlignment.Top;
			});
			UIPadding = Roact.createElement("UIPadding", {
				PaddingBottom = UDim.new(0, 10);
				PaddingLeft = UDim.new(0, 10);
				PaddingRight = UDim.new(0, 10);
				PaddingTop = UDim.new(0, 10);
			});
			Title = Roact.createElement(ThemeContext.Consumer, {
				render = function(theme)
					return Roact.createElement("TextLabel", {
						BackgroundTransparency = 1;
						Size = UDim2.new(1, 0, 0, 30);
						LayoutOrder = 0;
						Font = Enum.Font.SourceSans;
						Text = "Set Place ID";
						TextSize = 18;
						TextColor3 = theme.MainText.Default;
						TextXAlignment = Enum.TextXAlignment.Left;
					})
				end;
			});
			PlaceId = Roact.createElement(InputBox, {
				Placeholder = "Place ID";
				Text = self.state.InputPlaceId;
				LayoutOrder = 1;
				FilterText = function(text)
					local idFromPlaceUrl = text:match("^https://www%.roblox%.com/games/(%d+)/?")
					return idFromPlaceUrl or text:gsub("%D+", "")
				end;
				OnInput = function(text)
					self:setState({InputPlaceId = text})
				end;
			});
			PlaceName = Roact.createElement(ThemeContext.Consumer, {
				render = function(theme)
					return Roact.createElement("TextLabel", {
						BackgroundTransparency = 1;
						Size = UDim2.new(1, 0, 0, 30);
						LayoutOrder = 2;
						Font = (self.state.PlaceName == "" and Enum.Font.SourceSansItalic or Enum.Font.SourceSans);
						Text = (self.state.PlaceName == "__load__" and "" or self.state.PlaceName == "" and "Invalid Place ID" or self.state.PlaceName);
						TextSize = 18;
						TextColor3 = theme.MainText.Default;
						TextXAlignment = Enum.TextXAlignment.Left;
					}, {
						Spinner = Roact.createElement(Spinner, {
							Color = theme.MainText.Default;
							AnchorPoint = Vector2.new(0, 0.5);
							Position = UDim2.new(0, 5, 0.5, 0);
							Show = (self.state.PlaceName == "__load__");
						});
					})
				end;
			});
			ButtonFrame = Roact.createElement("Frame", {
				BackgroundTransparency = 1;
				Size = UDim2.new(1, 0, 0, 30);
				LayoutOrder = 3;
			}, {
				SetPlaceId = Roact.createElement(Button, {
					Label = "Set Place ID";
					ImageColor = "DialogMainButton";
					TextColor = "DialogMainButtonText";
					Size = UDim2.new(0.5, -5, 1, 0);
					Disabled = (self.state.InputPlaceId == "");
					OnActivated = function(_rbx)
						local text = self.state.InputPlaceId
						local id = tonumber(text)
						if id then
							local success, err = pcall(function()
								game:SetPlaceId(id)
							end)
							if success then
								self.props.ShowFrame("Main")
							else
								self:setState({ErrorMessage = tostring(err)})
							end
						end
					end;
				});
				Cancel = Roact.createElement(Button, {
					Label = "Cancel";
					ImageColor = "CheckedFieldBorder";
					TextColor = "DialogMainButtonText";
					Size = UDim2.new(0.5, -5, 1, 0);
					Position = UDim2.new(0.5, 5, 0, 0);
					OnActivated = function(_rbx)
						self.props.ShowFrame("Main")
					end;
				});
			});
			ErrorMessage = Roact.createElement("TextLabel", {
				BackgroundTransparency = 1;
				Size = UDim2.new(1, 0, 0, 30);
				LayoutOrder = 4;
				Font = Enum.Font.SourceSansItalic;
				Text = self.state.ErrorMessage;
				TextSize = 18;
				TextColor3 = Color3.new(1, 0, 0);
				TextXAlignment = Enum.TextXAlignment.Left;
				Visible = (self.state.ErrorMessage ~= "");
			});
			Warning = Roact.createElement(ThemeContext.Consumer, {
				render = function(theme)
					return Roact.createElement("TextLabel", {
						BackgroundTransparency = 1;
						Size = UDim2.new(1, 0, 1, 0);
						LayoutOrder = 5;
						Font = Enum.Font.SourceSansItalic;
						Text = "Setting the Place ID is not recommended. Whenever possible, open up the specific game from Studio instead.";
						TextSize = 18;
						TextColor3 = theme.WarningText.Default;
						TextWrapped = true;
						TextXAlignment = Enum.TextXAlignment.Left;
						TextYAlignment = Enum.TextYAlignment.Top;
					})
				end;
			});
		});
	})
end


SetPlaceId = RoactRodux.connect(
	function()
		return {}
	end,
	function(dispatch)
		return {
			ShowFrame = function(frameName)
				dispatch({type = "ShowFrame"; Frame = frameName})
			end;
		}
	end
)(SetPlaceId)


return SetPlaceId
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXAA94DE6B6D5F44EBB927BC4316260FEA">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{E5BD9556-089F-479E-9C51-4A1C806A0487}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local ThemeController = require(script.Parent.ThemeController)
local Alert = require(script.Parent.Alert)
local Container = require(script.Parent.Container)
local SideMenu = require(script.Parent.SideMenu)
local DataContainer = require(script.Parent.DataContainer)
local KeyListContainer = require(script.Parent.KeyListContainer)
local StoreListContainer = require(script.Parent.StoreListContainer)
local VersionLabel = require(script.Parent.VersionLabel)
local SetPlaceId = require(script.Parent.SetPlaceId)
local SaveProfile = require(script.Parent.SaveProfile)
local LoadProfile = require(script.Parent.LoadProfile)
local DeleteKey = require(script.Parent.DeleteKey)
local LoadingScreen = require(script.Parent.LoadingScreen)

local Main = Roact.Component:extend("Main")


local function createElementIf(condition, ...)
	if condition then
		return Roact.createElement(...)
	end
	return nil
end


function Main:loadInfo()
	self.props.SetLoaded(true)
end


function Main:didMount()
	self._mounted = true
	self:loadInfo()
end


function Main:willUnmount()
	self._mounted = false
end


function Main:didUpdate(prevProps)
	if prevProps.Loaded ~= self.props.Loaded then
		if not self.props.Loaded then
			self:loadInfo()
		end
	end
end


function Main:render()
	return Roact.createElement(ThemeController, {}, {
		Main = Roact.createElement(Container, {
			Visible = self.props.ShowFrame == "Main" and self.props.Loaded;
		}, {
			SideMenu = Roact.createElement(SideMenu);
			DataContainer = createElementIf(self.props.ConnectedView == "DataContainer", DataContainer);
			KeyListContainer = createElementIf(self.props.ConnectedView == "KeyListContainer", KeyListContainer);
			StoreListContainer = createElementIf(self.props.ConnectedView == "StoreListContainer", StoreListContainer);
			VersionLabel = createElementIf(self.props.ConnectedView == "", VersionLabel);
		});
		PlaceId = Roact.createElement(Container, {
			Visible = self.props.ShowFrame == "PlaceId" and self.props.Loaded;
		}, {
			SetPlaceId = Roact.createElement(SetPlaceId);
		});
		SaveProfile = Roact.createElement(Container, {
			Visible = self.props.ShowFrame == "SaveProfile" and self.props.Loaded;
		}, {
			SaveProfile = Roact.createElement(SaveProfile, {
				IsVisible = self.props.ShowFrame == "SaveProfile" and self.props.Loaded;
			});
		});
		LoadProfile = Roact.createElement(Container, {
			Visible = self.props.ShowFrame == "LoadProfile" and self.props.Loaded;
		}, {
			LoadProfile = Roact.createElement(LoadProfile, {
				IsVisible = self.props.ShowFrame == "LoadProfile" and self.props.Loaded;
			});
		});
		DeleteKey = Roact.createElement(Container, {
			Visible = self.props.ShowFrame == "DeleteKey" and self.props.Loaded;
		}, {
			DeleteKey = Roact.createElement(DeleteKey);
		});
		Loading = Roact.createElement(Container, {
			Visible = (not self.props.Loaded);
			Padding = 10;
		}, {
			LoadingScreen = Roact.createElement(LoadingScreen);
		});
		Alert = Roact.createElement(Alert, {
			Showing = self.props.ShowAlert;
			Title = self.props.AlertTitle;
			Message = self.props.AlertMessage;
			OnHide = function()
				self.props.HideAlert()
			end;
		});
	});
end

Main = RoactRodux.connect(
	function(state)
		return {
			ShowFrame = state.ShowFrame;
			Loaded = state.Loaded;
			ShowAlert = state.ShowAlert;
			AlertTitle = state.AlertTitle;
			AlertMessage = state.AlertMessage;
			ConnectedView = state.ConnectedView;
		}
	end,
	function(dispatch)
		return {
			SetLoaded = function(isLoaded)
				dispatch({type = "Loaded"; IsLoaded = isLoaded})
			end;
			HideAlert = function()
				dispatch({type = "HideAlert"})
			end;
		}
	end
)(Main)


return Main
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX42C689D20502414C87380C8FB39DC99F">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">LoadingScreen</string>
					<string name="ScriptGuid">{3F21F5C7-46BD-4A6A-9B79-B59BCDDD95C0}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)
local Spinner = require(script.Parent.Spinner)

local LoadingScreen = Roact.Component:extend("LoadingScreen")


function LoadingScreen:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			return Roact.createElement("TextLabel", {
				BackgroundTransparency = 1;
				Size = UDim2.new(0, 120, 0, 30);
				LayoutOrder = 0;
				Font = Enum.Font.SourceSans;
				Text = "Loading...";
				TextSize = 24;
				TextColor3 = theme.MainText.Default;
				TextXAlignment = Enum.TextXAlignment.Left;
			}, {
				Spinner = Roact.createElement(Spinner, {
					Show = true;
					Color = theme.MainText.Default;
				});
			})
		end;
	})
end


return LoadingScreen
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX66AEA023D8E7437DB4D49FCB9DD12092">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DataContainer</string>
					<string name="ScriptGuid">{523565C4-2E8C-4A49-8588-DF9D5F86A67B}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local ThemeContext = require(script.Parent.ThemeContext)
local Container = require(script.Parent.Container)
local InputBox = require(script.Parent.InputBox)
local SearchInput = require(script.Parent.SearchInput)
local DataViewer = require(script.Parent.DataViewer)
local Button = require(script.Parent.Button)
local App = require(script.Parent.Parent.Plugin.App)
local Constants = require(script.Parent.Parent.Plugin.Constants)
local DataFetch = require(script.Parent.Parent.Plugin.DataFetch)
local FileIO = require(script.Parent.Parent.Plugin.FileIO)
local DataNil = require(script.Parent.Parent.Plugin.Constants).DataNil
local DataUsage = require(script.Parent.DataUsage)

local HttpService = game:GetService("HttpService")

local DataContainer = Roact.Component:extend("DataContainer")


function DataContainer:init()
	self.ShowOrderedData = (self.props.UseOrdered and self.props.Key == "")
	if self.ShowOrderedData and self.props.Data ~= DataNil then
		self:initOrderedState()
	end
end


function DataContainer:initOrderedState()
	self:setState({
		Pages = {self.props.Data:GetCurrentPage()};
		CurrentPage = 1;
	})
end


function DataContainer:didUpdate(prevProps)
	local showOrdered = (self.props.UseOrdered and self.props.Key == "")
	if (showOrdered ~= self.ShowOrderedData or (showOrdered and prevProps.Data ~= self.props.Data)) and self.props.Data ~= DataNil then
		self.ShowOrderedData = showOrdered
		if showOrdered then
			self:initOrderedState()
		end
	end
end


function DataContainer:nextPage()
	if not self.ShowOrderedData then return end
	if self.state.CurrentPage == #self.state.Pages then
		if self.props.Data.IsFinished then return end
		self.props.Data:AdvanceToNextPageAsync()
		local page = self.props.Data:GetCurrentPage()
		local pages = self.state.Pages
		table.insert(pages, page)
		self:setState({
			Pages = pages;
			CurrentPage = #pages;
		})
	else
		self:setState({
			CurrentPage = (self.state.CurrentPage + 1);
		})
	end
end


function DataContainer:prevPage()
	if not self.ShowOrderedData then return end
	if self.state.CurrentPage == 1 then return end
	self:setState({
		CurrentPage = (self.state.CurrentPage - 1);
	})
end


function DataContainer:validateAndSanitizeData(data)
	return pcall(function()
		return HttpService:JSONDecode(HttpService:JSONEncode(data))
	end)
end


function DataContainer:render()

	local offset = (Constants.SideMenuButtonSize + (Constants.SideMenuPadding * 2))
	local showOrderedData = (self.props.UseOrdered and self.props.Key == "")

	local topbarItems = {}
	if showOrderedData then
		topbarItems.TopRow = Roact.createElement("Frame", {
			BackgroundTransparency = 1;
			Size = UDim2.new(1, 0, 0, 40);
		}, {
			UIListLayout = Roact.createElement("UIListLayout", {
				FillDirection = Enum.FillDirection.Horizontal;
				Padding = UDim.new(0, 10);
				SortOrder = Enum.SortOrder.LayoutOrder;
			});
			Search = Roact.createElement(SearchInput, {
				Active = not self.props.ShowSideMenu;
				Size = UDim2.new(1, 0, 1, 0);
				LayoutOrder = 0;
			});
		})
		topbarItems.BottomRow = Roact.createElement("Frame", {
			BackgroundTransparency = 1;
			Size = UDim2.new(1, 0, 0, 40);
			Position = UDim2.new(0, 0, 0, 40);
		}, {
			UIListLayout = Roact.createElement("UIListLayout", {
				FillDirection = Enum.FillDirection.Horizontal;
				Padding = UDim.new(0, 10);
				SortOrder = Enum.SortOrder.LayoutOrder;
			});
			MinInput = Roact.createElement(InputBox, {
				Placeholder = "Min Value";
				Width = 100;
				LayoutOrder = 0;
				Text = self.props.OrderedMin ~= DataNil and self.props.OrderedMin or "";
				FilterText = function(text)
					if text == "" then return text end
					return text:match("^%-?%d*")
				end;
				OnFocusLost = function(_submitted, text, rbx)
					if text == "" then
						self.props.SetOrderedMin(DataNil)
						return
					end
					local n = tonumber(text)
					if n and text:match("^%-?%d*") then
						if self.props.OrderedMax ~= DataNil and n > self.props.OrderedMax then
							n = self.props.OrderedMax
							rbx.Text = tostring(n)
						end
						self.props.SetOrderedMin(n)
					else
						rbx.Text = self.props.OrderedMin ~= DataNil and self.props.OrderedMin or "";
					end
				end;
			});
			MaxInput = Roact.createElement(InputBox, {
				Placeholder = "Max Value";
				Width = 100;
				LayoutOrder = 1;
				Text = self.props.OrderedMax ~= DataNil and self.props.OrderedMax or "";
				FilterText = function(text)
					if text == "" then return text end
					return text:match("^%-?%d*")
				end;
				OnFocusLost = function(_submitted, text, rbx)
					if text == "" then
						self.props.SetOrderedMax(DataNil)
						return
					end
					local n = tonumber(text)
					if n and text:match("^%-?%d*") then
						if self.props.OrderedMin ~= DataNil and n < self.props.OrderedMin then
							n = self.props.OrderedMin
							rbx.Text = tostring(n)
						end
						self.props.SetOrderedMax(n)
					else
						rbx.Text = self.props.OrderedMax ~= DataNil and self.props.OrderedMax or "";
					end
				end;
			});
			AscendButton = Roact.createElement(Button, {
				Icon = self.props.OrderedAscend and "rbxassetid://5516412893" or "rbxassetid://5516411715";
				IconSize = UDim2.new(0, 16, 0, 16);
				Label = self.props.OrderedAscend and "Ascend" or "Descend";
				Tooltip = "Order";
				ImageColor = "DialogMainButton";
				TextColor = "DialogMainButtonText";
				Size = UDim2.new(0, 30, 0, 30);
				LayoutOrder = 2;
				OnActivated = function()
					self.props.SetOrderedAscend(not self.props.OrderedAscend)
				end;
			});
			PrevButton = Roact.createElement(Button, {
				Icon = "rbxassetid://5516412197";
				IconSize = UDim2.new(0, 16, 0, 16);
				Label = "Prev";
				Tooltip = "Previous";
				ImageColor = "DialogMainButton";
				TextColor = "DialogMainButtonText";
				Size = UDim2.new(0, 30, 0, 30);
				LayoutOrder = 3;
				Disabled = (self.state.CurrentPage == 1);
				OnActivated = function()
					self:prevPage()
				end;
			});
			PageLabel = Roact.createElement(ThemeContext.Consumer, {
				render = function(theme)
					return Roact.createElement("TextLabel", {
						BackgroundTransparency = 1;
						Size = UDim2.new(0, 30, 0, 30);
						Font = Enum.Font.SourceSans;
						Text = tostring(self.state.CurrentPage or 1) .. (self.props.Data ~= DataNil and self.props.Data.IsFinished and self.state.Pages and (" / " .. #self.state.Pages) or "");
						TextSize = 18;
						TextColor3 = theme.MainText.Default;
						TextXAlignment = Enum.TextXAlignment.Center;
						LayoutOrder = 4;
					});
				end;
			});
			NextButton = Roact.createElement(Button, {
				Icon = "rbxassetid://5516412563";
				IconSize = UDim2.new(0, 16, 0, 16);
				Label = "Next";
				Tooltip = "Next";
				ImageColor = "DialogMainButton";
				TextColor = "DialogMainButtonText";
				Size = UDim2.new(0, 30, 0, 30);
				LayoutOrder = 5;
				Disabled = (self.props.Data ~= DataNil and self.props.Data.IsFinished and self.state.CurrentPage and self.state.CurrentPage == #self.state.Pages);
				OnActivated = function()
					self:nextPage()
				end;
			});
		})
	else
		topbarItems.UIListLayout = Roact.createElement("UIListLayout", {
			FillDirection = Enum.FillDirection.Horizontal;
			Padding = UDim.new(0, 10);
			SortOrder = Enum.SortOrder.LayoutOrder;
		})
		topbarItems.Search = Roact.createElement(SearchInput, {
			Active = not self.props.ShowSideMenu;
			Size = UDim2.new(1, -200, 1, 0);
			LayoutOrder = 0;
			Text = self.props.Key;
		})
		topbarItems.ImportButton = Roact.createElement(Button, {
			Icon = "rbxassetid://5516414010";
			IconSize = UDim2.new(0, 16, 0, 16);
			Label = "Import";
			Tooltip = "Import";
			ImageColor = "DialogMainButton";
			TextColor = "DialogMainButtonText";
			Size = UDim2.new(0, 30, 0, 30);
			Disabled = (self.props.Key == "" or self.props.FetchingData or self.props.SavingData);
			LayoutOrder = 1;
			OnActivated = function(_rbx)
				local data = FileIO:PromptLoadFile()
				if data then
					local isValid, newData = self:validateAndSanitizeData(data)
					if isValid then
						self.props.OnImportedData(newData)
					else
						self.props.ShowAlert("Import Error", tostring(newData))
					end
				end
			end;
		})
		topbarItems.ExportButton = Roact.createElement(Button, {
			Icon = "rbxassetid://5516413670";
			IconSize = UDim2.new(0, 16, 0, 16);
			Label = "Export";
			Tooltip = "Export";
			ImageColor = "DialogMainButton";
			TextColor = "DialogMainButtonText";
			Size = UDim2.new(0, 30, 0, 30);
			Disabled = (self.props.Data == Constants.DataNil or self.props.FetchingData or self.props.SavingData);
			LayoutOrder = 2;
			OnActivated = function(_rbx)
				local data = self.props.Data
				local contents = ("return " .. FileIO:ToLuaString(data))
				FileIO:PromptSaveFile(self.props.Key, contents)
			end;
		})
		topbarItems.RefreshButton = Roact.createElement(Button, {
			Icon = "rbxassetid://5950842824";
			IconSize = UDim2.new(0, 16, 0, 16);
			Label = "Refresh";
			Tooltip = "Refresh";
			ImageColor = "DialogMainButton";
			TextColor = "DialogMainButtonText";
			Size = UDim2.new(0, 30, 0, 30);
			Disabled = (self.props.Key == "" or self.props.FetchingData or self.props.SavingData);
			LayoutOrder = 3;
			OnActivated = function(_rbx)
				self.props.Refresh()
			end;
		})
		topbarItems.SaveButton = Roact.createElement(Button, {
			Icon = "rbxassetid://5516414743";
			IconSize = UDim2.new(0, 16, 0, 16);
			Label = "Save";
			Tooltip = "Save";
			ImageColor = "DialogMainButton";
			TextColor = "DialogMainButtonText";
			Size = UDim2.new(0, 30, 0, 30);
			Disabled = (not self.props.DataDirty) or self.props.FetchingData or self.props.SavingData;
			LayoutOrder = 4;
			OnActivated = function(_rbx)
				local success, err = DataFetch:Save(App:GetStore():getState()):await()
				if not success then
					warn(err)
				end
			end;
		})
		topbarItems.DeleteButton = Roact.createElement(Button, {
			Icon = "rbxassetid://5516413280";
			IconSize = UDim2.new(0, 16, 0, 16);
			Label = "Delete";
			Tooltip = "Delete";
			ImageColor = "CheckedFieldBorder";
			TextColor = "DialogMainButtonText";
			Size = UDim2.new(0, 30, 0, 30);
			Disabled = (self.props.DataDirty or self.props.FetchingData or self.props.SavingData or self.props.Key == "" or self.props.Data == Constants.DataNil);
			LayoutOrder = 5;
			OnActivated = function(_rbx)
				self.props.ShowFrame("DeleteKey")
			end;
		})
	end

	return Roact.createElement(Container, {
		BackgroundTransparency = 1;
		Position = UDim2.fromOffset(offset, 0);
		Size = UDim2.new(1, -offset, 1, 0);
		Padding = 10;
		PaddingBottom = self.ShowOrderedData and 10 or 0;
		Visible = self.props.Connected;
		Overlay = self.props.ShowSideMenu;
	}, {
		TopBar = Roact.createElement("Frame", {
			Size = UDim2.new(1, 0, 0, 30);
			BackgroundTransparency = 1;
		}, topbarItems);
		DataViewer = Roact.createElement(DataViewer, {
			Position = UDim2.new(0, 0, 0, showOrderedData and 80 or 40);
			Size = UDim2.new(1, 0, 1, showOrderedData and -80 or -70);
			DataPage = (self.ShowOrderedData and self.state.Pages and self.state.CurrentPage and self.state.Pages[self.state.CurrentPage] or nil);
		});
		DataUsage = Roact.createElement(DataUsage, {
			Visible = not self.ShowOrderedData;
		});
	});

end


DataContainer = RoactRodux.connect(
	function(state)
		return {
			Data = state.Data;
			ShowSideMenu = state.ShowSideMenu;
			Connected = state.Connected;
			DataDirty = state.DataDirty;
			Key = state.Key;
			UseOrdered = state.UseOrdered;
			OrderedMin = state.OrderedMin;
			OrderedMax = state.OrderedMax;
			OrderedAscend = state.OrderedAscend;
			FetchingData = state.FetchingData;
			SavingData = state.SavingData;
		}
	end,
	function(dispatch)
		return {
			OnImportedData = function(importedData)
				dispatch({type = "Data", Data = importedData, WasImported = true})
			end;
			ShowFrame = function(frameName)
				dispatch({type = "ShowFrame"; Frame = frameName})
			end;
			SetOrderedMin = function(min)
				dispatch({type = "OrderedMin"; Min = min})
			end;
			SetOrderedMax = function(max)
				dispatch({type = "OrderedMax"; Max = max})
			end;
			SetOrderedAscend = function(ascend)
				dispatch({type = "OrderedAscend"; Ascend = ascend})
			end;
			ShowAlert = function(title, message)
				dispatch({type = "ShowAlert", Title = title; Message = message})
			end;
			Refresh = function()
				dispatch({type = "Refresh"})
			end;
		}
	end
)(DataContainer)


return DataContainer
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX71C3BB26A76D4E20BEC1704D9427DEC8">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">SearchInput</string>
					<string name="ScriptGuid">{64BBA168-BD9F-457F-B31D-F6A553EA5B9F}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local InputBox = require(script.Parent.InputBox)

local SearchInput = Roact.Component:extend("SearchInput")


function SearchInput:init()
	self:setState({
		KeyInput = self.props.Text or "";
	})
end


function SearchInput:didUpdate(prevProps, _prevState)
	if prevProps.Key ~= self.props.Key then
		self:setState({KeyInput = self.props.Key})
	end
end


function SearchInput:render()
	return Roact.createElement("Frame", {
		BackgroundTransparency = 1;
		Position = self.props.Position;
		Size = self.props.Size;
		LayoutOrder = self.props.LayoutOrder or 0;
	}, {
		Search = Roact.createElement(InputBox, {
			Active = self.props.Active;
			Placeholder = "Key";
			Text = self.state.KeyInput;
			OnInput = function(text)
				self:setState({KeyInput = text})
			end;
			OnFocusLost = function()
				self.props.SetKey(self.state.KeyInput)
			end;
			OnCleared = function()
				self.props.SetKey("")
			end;
		});
	})
end


SearchInput = RoactRodux.connect(
	function(state)
		return {
			Key = state.Key;
		}
	end,
	function(dispatch)
		return {
			SetKey = function(key)
				dispatch({type = "Key"; Key = key})
			end;
		}
	end
)(SearchInput)


return SearchInput
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX1294054A41D044F0AB8F59395009F1F9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DataViewer</string>
					<string name="ScriptGuid">{D16C7895-CF1A-4FB3-B2C3-C05031D02077}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local ThemeContext = require(script.Parent.ThemeContext)
local Spinner = require(script.Parent.Spinner)
local ScrollingFrame = require(script.Parent.ScrollingFrame)
local TableViewer = require(script.Parent.TableViewer)
local DataStorePageViewer = require(script.Parent.DataStorePageViewer)
local ItemViewer = require(script.Parent.ItemViewer)
local DataNil = require(script.Parent.Parent.Plugin.Constants).DataNil
local DataVer = require(script.Parent.Parent.Plugin.DataVer)
local PluginWidget = require(script.Parent.Parent.Plugin.PluginWidget)
local Button = require(script.Parent.Button)
local ContextMenu = require(script.Parent.ContextMenu)

local DataViewer = Roact.Component:extend("DataViewer")


function DataViewer:init()
	self:setState({
		Num = 0;
		NewDataMenu = {
			Showing = false;
			Position = UDim2.new();
			Items = {};
		};
	})
end


function DataViewer:showNewDataMenu(items, position)
	self:setState({
		NewDataMenu = {
			Showing = true;
			Position = position;
			Items = items;
		}
	})
end


function DataViewer:hideNewDataMenu()
	self:setState({
		NewDataMenu = {
			Showing = false;
			Position = self.state.NewDataMenu.Position;
			Items = {};
		}
	})
end


function DataViewer:render()
	local showOrdered = (self.props.UseOrdered and self.props.Key == "")
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			local item
			if self.props.Data ~= nil and self.props.Data ~= DataNil then
				if type(self.props.Data) == "table" then
					-- Show table item:
					item = Roact.createElement(TableViewer, {
						Key = self.props.Key;
						Table = self.props.Data;
						Expanded = (next(self.props.Data) ~= nil);
						Level = 1;
					})
				elseif showOrdered then
					item = Roact.createElement(DataStorePageViewer, {
						DataPage = self.props.DataPage;
					})
				else
					-- Show item:
					item = Roact.createElement("Frame", {
						BackgroundTransparency = 1;
						Size = UDim2.new(1, 0, 0, 30);
					}, {
						UITableLayout = Roact.createElement("UITableLayout", {
							SortOrder = Enum.SortOrder.LayoutOrder;
							Padding = UDim2.new(0, 20, 0, 0);
						});
						Item = Roact.createElement(ItemViewer, {
							Key = self.props.Key;
							Value = self.props.Data;
							Level = 1;
							FilterText = function(text)
								if self.props.UseOrdered then
									return text:match("^%-?%d*")
								else
									return text
								end
							end;
							SubmitChange = function(text)
								if self.props.UseOrdered then
									local n = tonumber(text)
									if n and text:match("^%-?%d*") then
										return n
									else
										return 0
									end
								else
									local newValue = DataVer:Verify(text)
									self.props.SetSingleItemData(newValue)
									return newValue
								end
							end;
						});
					})
				end
			elseif (self.props.Key ~= "" or showOrdered) and not self.props.FetchingData then
				-- Item to show when no data is available for a given key:
				item = Roact.createElement("Frame", {
					BackgroundTransparency = 1;
					Size = UDim2.new(1, 0, 1, 0);
				}, {
					NewDataContextMenu = Roact.createElement(ContextMenu, {
						Showing = self.state.NewDataMenu.Showing;
						Position = self.state.NewDataMenu.Position;
						Items = self.state.NewDataMenu.Items;
						OnHide = function(itemValue)
							if itemValue then
								local newValue = nil
								if itemValue == "string" then
									newValue = "item"
								elseif itemValue == "number" then
									newValue = 0
								elseif itemValue == "boolean_true" then
									newValue = true
								elseif itemValue == "boolean_false" then
									newValue = false
								elseif itemValue == "table" then
									newValue = {}
								end
								if newValue ~= nil then
									self.props.SetSingleItemData(newValue)
									self.props.MarkDirty()
								end
							end
							self:hideNewDataMenu()
						end;
					});
					NoDataLabel = Roact.createElement("TextLabel", {
						BackgroundTransparency = 1;
						Size = UDim2.new(0, 120, 0, 30);
						Font = Enum.Font.SourceSans;
						Text = "No Data";
						TextSize = 20;
						TextColor3 = theme.MainText.Default;
						TextXAlignment = Enum.TextXAlignment.Left;
					});
					CreateDataButton = Roact.createElement(Button, {
						Label = "Create Data";
						ImageColor = "DialogMainButton";
						TextColor = "DialogMainButtonText";
						Size = UDim2.new(0, 90, 0, 30);
						Position = UDim2.new(0, 80, 0, 0);
						Disabled = false;
						OnActivated = function(_rbx)
							if self.props.UseOrdered then
								self.props.SetSingleItemData(0)
								self.props.MarkDirty()
							else
								local items = {
									{Type = "button"; Value = "string", Text = "String"};
									{Type = "button"; Value = "number", Text = "Number"};
									{Type = "button"; Value = "boolean_true", Text = "Boolean (true)"};
									{Type = "button"; Value = "boolean_false", Text = "Boolean (false)"};
									{Type = "button"; Value = "table", Text = "Table"};
								}
								local pos = PluginWidget:GetMousePosition()
								self:showNewDataMenu(items, UDim2.new(0, pos.X, 0, pos.Y))
							end
						end;
					});
				})
			end
			return Roact.createElement(ScrollingFrame, {
				Size = self.props.Size;
				Position = self.props.Position;
			}, {
				LoadingMessage = Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					Size = UDim2.new(0, 140, 0, 30);
					Font = Enum.Font.SourceSans;
					Text = "Fetching data...";
					TextSize = 20;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
					Visible = self.props.FetchingData;
				}, {
					Spinner = Roact.createElement(Spinner, {
						Show = self.props.FetchingData;
						Color = theme.MainText.Default;
					});
				});
				Viewer = item;
			})
		end;
	})
end


DataViewer = RoactRodux.connect(
	function(state)
		return {
			Data = state.Data;
			DataError = state.DataError;
			FetchingData = state.FetchingData;
			Key = state.Key;
			UseOrdered = state.UseOrdered;
		}
	end,
	function(dispatch)
		return {
			SetSingleItemData = function(data)
				dispatch({type = "Data"; Data = data})
			end;
			MarkDirty = function()
				dispatch({type = "MarkDirty"})
			end;
		}
	end
)(DataViewer)


return DataViewer
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX4E8DDB15D64C46C1B8C6880062170DAB">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ScrollingFrame</string>
					<string name="ScriptGuid">{445EEDF8-2B8E-418F-932F-8886E2F27C73}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)

local ScrollingFrame = Roact.Component:extend("ScrollingFrame")

local SCROLLBAR_THICKNESS = 8


function ScrollingFrame:init()
	self:setState({
		CanvasSize = UDim2.new(1, 0, 1, 0);
		CanvasPosition = Vector2.new();
		AbsoluteWindowSize = Vector2.new();
	})
	self.ScrollingFrameRef = Roact.createRef()
end


function ScrollingFrame:didMount()
	self:setState({
		AbsoluteWindowSize = self.ScrollingFrameRef:getValue().AbsoluteWindowSize;
	})
end


function ScrollingFrame:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			if not self.props.IgnoreUIListLayout then
				self.props[Roact.Children].UIListLayout = Roact.createElement("UIListLayout", {
					Padding = UDim.new(0, self.props.Padding or 10);
					HorizontalAlignment = self.props.HorizontalAlignment or Enum.HorizontalAlignment.Left;
					SortOrder = Enum.SortOrder.LayoutOrder;
					[Roact.Change.AbsoluteContentSize] = function(rbx)
						local size = rbx.AbsoluteContentSize
						if self.props.NoScrollX then
							self:setState({CanvasSize = UDim2.new(1, -(SCROLLBAR_THICKNESS + 1), 0, size.Y)})
						else
							self:setState({CanvasSize = UDim2.fromOffset(size.X, size.Y)})
						end
					end;
				})
			end
			return Roact.createElement("Frame", {
				Size = self.props.Size or UDim2.new(1, 0, 1, 0);
				Position = self.props.Position or UDim2.new(0, 0, 0, 0);
				BackgroundTransparency = 1;
				ZIndex = self.props.ZIndex or 1;
				LayoutOrder = self.props.LayoutOrder or 0;
				Visible = (self.props.Visible == nil and true or (not not self.props.Visible));
			}, {
				ScrollingFrame = Roact.createElement("ScrollingFrame", {
					BackgroundTransparency = 1;
					BorderSizePixel = 0;
					Size = UDim2.new(1, 0, 1, 0);
					ScrollBarImageColor3 = theme.InputFieldBorder.Default;
					ScrollBarThickness = SCROLLBAR_THICKNESS;
					VerticalScrollBarInset = self.props.VerticalScrollBarInset or Enum.ScrollBarInset.None;
					HorizontalScrollBarInset = self.props.HorizontalScrollBarInset or Enum.ScrollBarInset.None;
					CanvasSize = self.props.CanvasSize or self.state.CanvasSize;
					CanvasPosition = self.props.CanvasPosition;
					[Roact.Change.CanvasPosition] = function(rbx)
						self:setState({CanvasPosition = rbx.CanvasPosition})
					end;
					[Roact.Change.AbsoluteWindowSize] = function(rbx)
						self:setState({AbsoluteWindowSize = rbx.AbsoluteWindowSize})
					end;
					[Roact.Ref] = self.ScrollingFrameRef;
				}, self.props[Roact.Children]);
				TopShadow = Roact.createElement("ImageLabel", {
					AnchorPoint = Vector2.new(self.props.KeepShadowInBounds and 0 or 0.5, 0);
					BackgroundTransparency = 1;
					Size = UDim2.new(self.props.KeepShadowInBounds and 1 or 2, 0, 0, 8);
					Image = "rbxassetid://5072600298";
					ImageTransparency = 0.7;
					ImageColor3 = Color3.new(0, 0, 0);
					ZIndex = 2;
					Visible = self.state.CanvasPosition.Y > 5;
				});
				BottomShadow = Roact.createElement("ImageLabel", {
					AnchorPoint = Vector2.new(self.props.KeepShadowInBounds and 0 or 0.5, 1);
					BackgroundTransparency = 1;
					Size = UDim2.new(self.props.KeepShadowInBounds and 1 or 2, 0, 0, 8);
					Position = UDim2.new(0, 0, 1, 0);
					Rotation = 180;
					Image = "rbxassetid://5072600298";
					ImageTransparency = 0.7;
					ImageColor3 = Color3.new(0, 0, 0);
					ZIndex = 2;
					Visible = self.state.CanvasPosition.Y < (self.state.CanvasSize.Y.Offset - self.state.AbsoluteWindowSize.Y - 5);
				});
			})
		end;
	})
end


return ScrollingFrame
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX04CE1D4B8BE74AA0B6965766B430830E">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">TableViewer</string>
					<string name="ScriptGuid">{00AF4A57-32F6-4F29-B4FC-440F7728BE0D}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local PluginWidget = require(script.Parent.parent.Plugin.PluginWidget)
local ThemeContext = require(script.Parent.ThemeContext)
local ItemViewer = require(script.Parent.ItemViewer)
local ContextMenu = require(script.Parent.ContextMenu)
local NewKey = require(script.Parent.NewKey)
local DataVer = require(script.Parent.Parent.Plugin.DataVer)

local TableViewer = Roact.Component:extend("TableViewer")


function TableViewer:init()
	self:setState({
		Expanded = self.props.Expanded;
		RenderId = 0;
		Size = UDim2.new(1, 0, 0, 0);
		Num = 0;
		ContextMenu = {
			Showing = false;
			Context = {};
			Position = UDim2.new();
			Items = {};
		};
		NewKey = {
			Showing = false;
			KeyExists = false;
			Key = "";
		};
	})
	self.UITableLayout = Roact.createRef()
	self._labelKey = {}
end


function TableViewer:setContextMenu(showing, context, pos, items)
	self:setState({
		ContextMenu = {
			Showing = showing;
			Context = (context or self.state.ContextMenu.Context);
			Position = (pos or self.state.ContextMenu.Position);
			Items = (items or {});
		}
	})
end


function TableViewer:setNewKeyModal(showing, keyExists, key, position)
	self:setState({
		NewKey = {
			Showing = showing;
			KeyExists = keyExists;
			Key = key;
			Position = (position or self.state.NewKey.Position);
		}
	})
end


function TableViewer:didMount()
	self:calcSize()
	self.widgetSizeChangedListener = PluginWidget:GetWidget():GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		self:calcSize()
	end)
end


function TableViewer:willUnmount()
	self.widgetSizeChangedListener:Disconnect()
end


function TableViewer:toggleExpanded()
	if self.state.Expanded then
		self:setState({
			Expanded = false;
			RenderId = self.state.RenderId + 1;
		})
	else
		self:setState({Expanded = true})
	end
end


function TableViewer:calcSize()
	local contentSize = self.UITableLayout:getValue().AbsoluteContentSize
	self:setState({Size = UDim2.new(0, contentSize.X, 0, contentSize.Y)})
end


function TableViewer:onContextMenuItemSelected(itemValue, _itemText)
	local context = self.state.ContextMenu.Context
	if itemValue == "insert_before" then
		local index = context.Key
		table.insert(context.Table, index, "item")
		self.props.MarkDirty()
	elseif itemValue == "insert_after" then
		local index = context.Key
		table.insert(context.Table, index + 1, "item")
		self.props.MarkDirty()
	elseif itemValue == "insert" or itemValue == "insert_into" then
		local pos = context.Rbx.AbsolutePosition
		local size = context.Rbx.AbsoluteSize
		local modalPos = UDim2.new(0, pos.X, 0, pos.Y + (size.Y / 2))
		if itemValue == "insert_into" then
			context.Table = context.Value
		end
		self:setNewKeyModal(true, false, nil, modalPos)
	elseif itemValue == "delete_array_index" or itemValue == "delete_array" then
		local index = context.Key
		table.remove(context.Table, index)
		self.props.MarkDirty()
	elseif itemValue == "delete_dict_index" or itemValue == "delete_dict" then
		local index = context.Key
		context.Table[index] = nil
		self.props.MarkDirty()
	elseif itemValue == "insert_first" then
		table.insert(context.Value, 1, "item")
		self.props.MarkDirty()
	elseif itemValue == "insert_last" then
		table.insert(context.Value, "item")
		self.props.MarkDirty()
	elseif itemValue == "move_up" then
		if context.Key > 1 then
			local t = context.Table
			local k = context.Key
			t[k - 1], t[k] = t[k], t[k - 1]
			self.props.MarkDirty()
		end
	elseif itemValue == "move_down" then
		if context.Key < #context.Table then
			local t = context.Table
			local k = context.Key
			t[k + 1], t[k] = t[k], t[k + 1]
			self.props.MarkDirty()
		end
	end
end


function TableViewer:incNum()
	self:setState({Num = self.state.Num + 1})
end


function TableViewer:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(_theme)
			local items = {}
			items.ContextMenu = Roact.createElement(ContextMenu, {
				Showing = self.state.ContextMenu.Showing;
				Position = self.state.ContextMenu.Position;
				Items = self.state.ContextMenu.Items;
				OnHide = function(itemValue, itemText)
					if itemValue then
						self:onContextMenuItemSelected(itemValue, itemText)
					end
					self:setContextMenu(false)
				end;
			})
			items.NewKey = Roact.createElement(NewKey, {
				Showing = self.state.NewKey.Showing;
				KeyExists = self.state.NewKey.KeyExists;
				Position = self.state.NewKey.Position;
				Key = self.state.NewKey.Key;
				OnHide = function(newKey)
					if newKey and newKey ~= "" then
						local context = self.state.ContextMenu.Context
						if context.Table[newKey] == nil then
							context.Table[newKey] = "newitem"
							self:setNewKeyModal(false)
							self.props.MarkDirty()
						else
							self:setNewKeyModal(true, true, newKey)
						end
					else
						self:setNewKeyModal(false)
					end
				end;
			})
			items["UITableLayout" .. self.state.RenderId] = Roact.createElement("UITableLayout", {
				SortOrder = Enum.SortOrder.LayoutOrder;
				Padding = UDim2.new(0, 18, 0, 0);
				[Roact.Change.AbsoluteContentSize] = function()
					self:calcSize()
				end;
				[Roact.Ref] = self.UITableLayout;
			})
			items[self._labelKey] = Roact.createElement(ItemViewer, {
				Key = self.props.Key;
				Value = self.props.Table;
				Level = self.props.Level;
				ShowCaret = true;
				CaretRotation = (self.state.Expanded and 90 or 0);
				CaretDisabled = (next(self.props.Table) == nil);
				LayoutOrder = 0;
				OnClicked = function()
					if next(self.props.Table) == nil then return end
					self:toggleExpanded()
				end;
				RightClicked = function(x, y, rbx)
					local tbl = self.props.Table
					local context = {Table = tbl; Key = self.props.Key; Value = tbl; Rbx = rbx}
					local pos = UDim2.new(0, x, 0, y)
					if #tbl > 0 then
						self:setContextMenu(true, context, pos, {
							{Type = "button"; Value = "insert_first", Text = "Insert First"};
							{Type = "button"; Value = "insert_last", Text = "Insert Last"};
						})
					elseif next(tbl) ~= nil then
						self:setContextMenu(true, context, pos, {
							{Type = "button"; Value = "insert_into", Text = "Insert Into"};
						})
					else
						self:setContextMenu(true, context, pos, {
							{Type = "button"; Value = "insert_first", Text = "Insert (Array)"};
							{Type = "button"; Value = "insert_into", Text = "Insert (Dictionary)"};
						})
					end
				end;
			})
			local order = 0
			local function ScanItems(tbl, subLvl)
				local itemsArray = table.create(#tbl)
				for k,v in pairs(tbl) do
					table.insert(itemsArray, {k, v})
				end
				if #tbl > 0 then
					table.sort(itemsArray, function(a, b)
						return a[1] < b[1]
					end)
				else
					table.sort(itemsArray, function(a, b)
						return tostring(a[1]) < tostring(b[1])
					end)
				end
				for _,v in ipairs(itemsArray) do
					order += 1
					if type(v[2]) == "table" then
						local expandedKey = tostring(v[2])
						local initiallyExpanded = self.state[expandedKey]
						items[tostring(v[2])] = Roact.createElement(ItemViewer, {
							Key = v[1];
							Value = v[2];
							Level = subLvl;
							LayoutOrder = order;
							ShowCaret = true;
							CaretRotation = (initiallyExpanded and 90 or 0);
							CaretDisabled = (next(v[2]) == nil);
							Visible = self.state.Expanded;
							OnClicked = function()
								if self.state[expandedKey] then
									self:setState({
										[expandedKey] = false;
										RenderId = self.state.RenderId + 1;
									})
								else
									self:setState({
										[expandedKey] = true;
									})
								end
							end;
							RightClicked = function(x, y, rbx)
								local context = {Table = tbl; Key = v[1]; Value = v[2]; Rbx = rbx}
								local pos = UDim2.new(0, x, 0, y)
								local isInArray = (#tbl > 0)
								if #v[2] > 0 then
									self:setContextMenu(true, context, pos, {
										{Type = "button"; Value = "insert_first", Text = "Insert First"};
										{Type = "button"; Value = "insert_last", Text = "Insert Last"};
										{Type = "divider"};
										{Type = "button"; Value = isInArray and "delete_array" or "delete_dict", Text = "Delete Table"};
									})
								elseif next(v[2]) ~= nil then
									self:setContextMenu(true, context, pos, {
										{Type = "button"; Value = "insert_into", Text = "Insert Into"};
										{Type = "divider"};
										{Type = "button"; Value = isInArray and "delete_array" or "delete_dict", Text = "Delete Table"};
									})
								else
									self:setContextMenu(true, context, pos, {
										{Type = "button"; Value = "insert_first", Text = "Insert (Array)"};
										{Type = "button"; Value = "insert_into", Text = "Insert (Dictionary)"};
										{Type = "divider"};
										{Type = "button"; Value = isInArray and "delete_array" or "delete_dict", Text = "Delete Table"};
									})
								end
							end;
						})
						if initiallyExpanded then
							ScanItems(v[2], subLvl + 1)
						end
					else
						items[tostring(tbl) .. "_" .. v[1]] = Roact.createElement(ItemViewer, {
							Key = v[1];
							Value = v[2];
							Level = subLvl;
							LayoutOrder = order;
							Visible = self.state.Expanded;
							SubmitChange = function(text)
								local newValue = DataVer:Verify(text)
								tbl[v[1]] = newValue
								if type(newValue) ~= type(v[2]) then
									task.defer(function()
										self:incNum()
									end)
								end
								return newValue
							end;
							RightClicked = function(x, y, rbx)
								local context = {Table = tbl; Key = v[1]; Value = v[2]; Rbx = rbx}
								local pos = UDim2.new(0, x, 0, y)
								if #tbl > 0 then
									self:setContextMenu(true, context, pos, {
										{Type = "button"; Value = "insert_before", Text = "Insert Before"};
										{Type = "button"; Value = "insert_after", Text = "Insert After"};
										{Type = "divider"};
										{Type = "button"; Value = "move_up", Text = "Move Up", Disabled = (context.Key == 1)};
										{Type = "button"; Value = "move_down", Text = "Move Down", Disabled = (context.Key == #context.Table)};
										{Type = "divider"};
										{Type = "button"; Value = "delete_array_index", Text = "Delete"};
									})
								else
									self:setContextMenu(true, context, pos, {
										{Type = "button"; Value = "insert", Text = "Insert"};
										{Type = "divider"};
										{Type = "button"; Value = "delete_dict_index", Text = "Delete"};
									})
								end
							end;
						})
					end
				end
			end
			ScanItems(self.props.Table, self.props.Level + 1)
			return Roact.createElement("Frame", {
				BackgroundTransparency = 1;
				LayoutOrder = self.props.LayoutOrder or 0;
				Size = self.state.Size;
				Visible = (self.props.Visible == nil and true or (not not self.props.Visible));
			}, items);
		end;
	})
end


TableViewer = RoactRodux.connect(
	function(_state)
		return {}
	end,
	function(dispatch)
		return {
			MarkDirty = function()
				dispatch({type = "MarkDirty"})
			end;
		}
	end
)(TableViewer)


return TableViewer
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX50728698E2374975BEBF23388DC1015F">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ItemViewer</string>
					<string name="ScriptGuid">{2124985A-8F9B-4B0C-A762-8F78DDDD7D75}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local ThemeContext = require(script.Parent.ThemeContext)
local ExpandableInputBox = require(script.Parent.ExpandableInputBox)
local DataNil = require(script.Parent.Parent.Plugin.Constants).DataNil

local TextService = game:GetService("TextService")
local TweenService = game:GetService("TweenService")

local ItemViewer = Roact.PureComponent:extend("ItemViewer")

local LEVEL_SPACING = 16
local SIZE_Y = 24;
local FONT_KEY = Enum.Font.Code
local FONT_VALUE = Enum.Font.Code
local TEXT_SIZE = 15
local LARGE_VEC = Vector2.new(100000, 100000)

local DOUBLE_CLICK_INTERVAL = 0.5

local TEXT_COLORS = {
	"DialogMainButton";
	"SensitiveText";
	"WarningText";
}


local function GetTextSize(text, font)
	return TextService:GetTextSize(text, TEXT_SIZE, font, LARGE_VEC)
end


local function IsNaN(n)
	return type(n) == "number" and n ~= n
end


local function FormatValue(value, t)
	if t == "string" then
		--return "\"" .. value:gsub("\"", "\\\""):gsub("\r", "\\r"):gsub("\n", "\\n") .. "\""
		return "\"" .. value:gsub("\r", "\\r"):gsub("\n", "\\n") .. "\""
	elseif t == "table" then
		if #value > 0 then
			return "array"
		elseif next(value) ~= nil then
			return "dict"
		else
			return "table"
		end
	elseif IsNaN(value) then
		return "NAN"
	else
		return tostring(value)
	end
end


local function FormatValueForTextBox(value)
	local t = type(value)
	if t == "string" and tonumber(value) then
		value = ("\"" .. value .. "\"")
	end
	return tostring(value)
end


local function FormatKey(key)
	if type(key) == "number" then
		return (tostring(key) .. ")")
	elseif type(key) == "string" then
		if key == "" or key:sub(1, 1) == " " or key:sub(#key) == " " then
			return ("\"" .. key .. "\"")
		end
		return key
	else
		return tostring(key)
	end
end


function ItemViewer:init()
	self:setState({
		LastValueClick = 0;
		ShowEditor = false;
		Value = self.props.Value;
		IsExpanded = false;
	})
	self.CaretRef = Roact.createRef()
end


function ItemViewer:tweenCaret(instant)
	if self._tweenCaret then
		self._tweenCaret:Destroy()
	end
	if instant then
		self.CaretRef:getValue().Rotation = self.props.CaretRotation
		return
	end
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local tween = TweenService:Create(self.CaretRef:getValue(), tweenInfo, {Rotation = self.props.CaretRotation})
	self._tweenCaret = tween
	tween:Play()
	tween.Completed:Connect(function(state)
		if state == Enum.PlaybackState.Completed then
			tween:Destroy()
			self._tweenCaret = nil
		end
	end)
end


function ItemViewer:didMount()
	if self.props.ShowCaret then
		self:tweenCaret(true)
	end
end


function ItemViewer:didUpdate(prevProps)
	if prevProps.CaretRotation ~= self.props.CaretRotation and self.props.ShowCaret then
		self:tweenCaret(false)
	end
	local prevNaN = IsNaN(prevProps.Value)
	local nextNaN = IsNaN(self.props.Value)
	local bothNaN = (prevNaN and nextNaN)
	if prevProps.Value ~= self.props.Value and (not bothNaN) and self.state.Value ~= self.props.Value then
		self:setState({Value = self.props.Value})
	end
end


function ItemViewer:submit(text)
	if type(self.props.SubmitChange) == "function" then
		local newValue = self.props.SubmitChange(text)
		if not self.props.NoSave then
			if newValue ~= self.state.Value then
				self.props.MarkDirty()
			end
		end
		self:setState({Value = newValue})
	end
end


function ItemViewer:render()
	local startExpanded = (type(self.state.Value) == "string" and self.state.Value:find("\n") ~= nil)
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			local padding = ((self.props.Level + 1) * LEVEL_SPACING)
			local valueType = type(self.state.Value)
			local keyDisplay = FormatKey(self.props.Key)
			local valueDisplay = ((self.state.Value == DataNil or self.state.Value == nil) and "No data" or FormatValue(self.state.Value, valueType))
			local keyDisplaySize = GetTextSize(keyDisplay, FONT_KEY)
			local valueDisplaySize = GetTextSize(valueDisplay, FONT_VALUE)
			local typeColor do
				if valueType == "number" then
					typeColor = theme.ChatModeratedMessageColor.Default
				elseif valueType == "string" then
					typeColor = theme.InfoText.Default
				elseif valueType == "boolean" then
					typeColor = theme.LinkText.Default
				elseif valueType == "table" then
					typeColor = theme.SubText.Default
				end
			end
			local caret
			local lines = {}
			if self.props.ShowCaret then
				caret = Roact.createElement("ImageButton", {
					AnchorPoint = Vector2.new(1, 0.5);
					BackgroundTransparency = 1;
					Position = UDim2.new(0, -5, 0.5, 0);
					Size = UDim2.new(0, 6, 0, 6);
					Image = "rbxassetid://5076805718";
					ImageColor3 = theme.MainText.Default;
					ImageTransparency = (self.props.CaretDisabled and 0.7 or 0);
					LayoutOrder = 0;
					[Roact.Event.Activated] = function()
						if self.props.CaretDisabled then return end
						if type(self.props.OnClicked) == "function" then
							self.props.OnClicked()
						end
					end;
					[Roact.Ref] = self.CaretRef;
				});
			end
			if self.props.Level > 1 then
				for l = (self.props.ShowCaret and 2 or 1),self.props.Level - 1 do
					lines[l] = Roact.createElement("Frame", {
						AnchorPoint = Vector2.new(1, 0);
						BackgroundColor3 = theme.Separator.Default;
						BackgroundTransparency = 0.5;
						BorderSizePixel = 0;
						Position = UDim2.new(1, (-LEVEL_SPACING * (l + 0)), 0, 0);
						Size = UDim2.new(0, 2, 1, 0);
					})
				end
			end
			return Roact.createElement("Frame", {
				BackgroundTransparency = 1;
				Size = UDim2.new(0, 0, 0, 0);
				LayoutOrder = self.props.LayoutOrder or 0;
				Visible = (self.props.Visible == nil and true or (not not self.props.Visible));
			}, {
				Key = Roact.createElement("Frame", {
					BackgroundTransparency = 1;
					Size = UDim2.new(0, padding + keyDisplaySize.X, 0, SIZE_Y);
					LayoutOrder = 0;
				}, {
					UIListLayout = Roact.createElement("UIListLayout", {
						SortOrder = Enum.SortOrder.LayoutOrder;
						FillDirection = Enum.FillDirection.Horizontal;
						VerticalAlignment = Enum.VerticalAlignment.Center;
					});
					Spacer = Roact.createElement("Frame", {
						BackgroundTransparency = 1;
						Size = UDim2.new(0, padding, 1, 0);
					}, lines);
					KeyLabel = Roact.createElement("TextButton", {
						AutoButtonColor = false;
						BackgroundTransparency = 1;
						Size = UDim2.new(0, keyDisplaySize.X, 1, 0);
						Font = FONT_KEY;
						TextColor3 = self.props.Level and theme[TEXT_COLORS[((self.props.Level - 1) % #TEXT_COLORS) + 1]].Default or theme.DialogMainButton.Default;
						TextSize = TEXT_SIZE;
						Text = keyDisplay;
						TextXAlignment = Enum.TextXAlignment.Left;
						LayoutOrder = 1;
						[Roact.Event.Activated] = function()
							if self.props.CaretDisabled then return end
							if type(self.props.OnClicked) == "function" then
								self.props.OnClicked()
							end
						end;
						[Roact.Event.MouseButton2Up] = function(rbx, x, y)
							if type(self.props.RightClicked) == "function" then
								self.props.RightClicked(x, y, rbx)
							end
						end;
					}, {
						Caret = caret;
					});
				});
				Value = Roact.createElement("TextButton", {
					AutoButtonColor = false;
					BackgroundTransparency = 1;
					Size = UDim2.new(0, valueDisplaySize.X, 0, SIZE_Y);
					Font = FONT_VALUE;
					TextColor3 = typeColor or theme.MainText.Default;
					TextSize = TEXT_SIZE;
					Text = valueDisplay;
					TextXAlignment = Enum.TextXAlignment.Left;
					LayoutOrder = 2;
					Visible = not self.state.ShowEditor;
					[Roact.Event.Activated] = function()
						if self.props.ShowCaret then return end
						local now = os.clock()
						local sinceLastClick = (now - self.state.LastValueClick)
						local showEditor = (sinceLastClick < DOUBLE_CLICK_INTERVAL)
						self:setState({LastValueClick = now; ShowEditor = showEditor; IsExpanded = (showEditor and startExpanded)})
					end;
				});
				Editor = Roact.createElement(ExpandableInputBox, {
					Key = keyDisplay;
					Placeholder = "Value";
					Width = 200;
					Text = FormatValueForTextBox(self.state.Value);
					LayoutOrder = 2;
					Visible = self.state.ShowEditor;
					ForceFocus = self.state.ShowEditor;
					FilterText = self.props.FilterText;
					ForceExpanded = self.state.IsExpanded;
					OnExpand = function(isExpanded)
						self:setState({IsExpanded = isExpanded})
					end;
					OnSet = function(text)
						self:submit(text)
						self:setState({ShowEditor = false})
					end;
					OnCancel = function()
						if startExpanded then
							self:setState({ShowEditor = false})
						end
					end;
					OnInput = function(_text) end;
					OnFocusLost = function(submitted, text, rbx)
						if submitted then
							self:submit(text)
						else
							task.wait(0.1)
							if self.state.IsExpanded or rbx:IsFocused() then return end
						end
						self:setState({ShowEditor = false})
					end;
				});
			});
		end;
	})
end


ItemViewer = RoactRodux.connect(
	function(_state)
		return {}
	end,
	function(dispatch)
		return {
			MarkDirty = function()
				dispatch({type = "MarkDirty"})
			end;
		}
	end
)(ItemViewer)


return ItemViewer
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX23BAE9AECAAB4DFCBB0F830210CE5B07">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ExpandableInputBox</string>
					<string name="ScriptGuid">{D04A96CB-9668-437B-BFD5-947A3A39988B}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)
local Modal = require(script.Parent.Modal)
local ScrollingFrame = require(script.Parent.ScrollingFrame)
local Button = require(script.Parent.Button)
local InputBox = require(script.Parent.InputBox)
local TextService = game:GetService("TextService")

local ExpandableInputBox = Roact.Component:extend("ExpandableInputBox")


function ExpandableInputBox:init()
	self.TextBoxRef = Roact.createRef()
	self:setState({
		Expanded = (not not self.props.ForceExpanded);
		CanvasSize = UDim2.new();
	})
end


function ExpandableInputBox:calcSize()
	local textBox = self.TextBoxRef:getValue()
	if not textBox then return end
	local textSize = TextService:GetTextSize(textBox.Text, textBox.TextSize, textBox.Font, Vector2.new(100000, 100000))
	self:setState({CanvasSize = UDim2.new(0, textSize.X, 0, textSize.Y)})
end


function ExpandableInputBox:setExpanded(isExpanded)
	self:setState({Expanded = isExpanded})
	self.props.OnExpand(isExpanded)
end


function ExpandableInputBox:didUpdate(prevProps, prevState)
	if self.state.Expanded and not prevState.Expanded then
		self:calcSize()
	end
	if prevProps.ForceExpanded ~= self.props.ForceExpanded then
		self:setExpanded(self.props.ForceExpanded)
	end
end


function ExpandableInputBox:renderNormalInputBox()
	return Roact.createElement(InputBox, {
		OnExpand = function()
			self:setExpanded(true)
		end;
		Width = self.props.Width;
		Size = self.props.Size;
		LayoutOrder = self.props.LayoutOrder;
		Visible = self.props.Visible;
		Placeholder = self.props.Placeholder;
		Text = self.props.Text;
		Active = self.props.Active;
		MaxCharacters = self.props.MaxCharacters;
		ForceFocus = self.props.ForceFocus;
		FilterText = self.props.FilterText;
		OnInput = self.props.OnInput;
		OnCleared = self.props.OnCleared;
		OnFocusLost = self.props.OnFocusLost;
	})
end


function ExpandableInputBox:render()

	if not self.state.Expanded then
		return self:renderNormalInputBox()
	end

	-- Transform text to format properly within the multiline textbox:
	local text = self.props.Text
	if text then
		if text:sub(1, 1) == "\"" and text:sub(#text) == "\"" then
			if not tonumber(text:sub(2, #text - 1)) then
				text = text:sub(2, #text - 1)
			end
		end
		text = text:gsub("\\n", "\n"):gsub("\\r", "\r")
	end

	return Roact.createElement(Modal, {
		Visible = true;
		NoClickDismiss = true;
		Dismiss = function()
			self:setExpanded(false)
		end;
	}, {
		ExpandedEditorView = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("Frame", {
					BackgroundColor3 = theme.MainBackground.Default;
					AnchorPoint = Vector2.new(0.5, 0.5);
					Position = UDim2.new(0.5, 0, 0.5, 0);
					Size = UDim2.new(0.7, 0, 0.7, 0);
				}, {
					UIPadding = Roact.createElement("UIPadding", {
						PaddingBottom = UDim.new(0, 10);
						PaddingLeft = UDim.new(0, 10);
						PaddingRight = UDim.new(0, 10);
						PaddingTop = UDim.new(0, 10);
					});
					UICorner = Roact.createElement("UICorner", {
						CornerRadius = UDim.new(0, 8);
					});
					Buttons = Roact.createElement("Frame", {
						BackgroundTransparency = 1;
						Size = UDim2.new(1, 0, 0, 30);
					}, {
						Title = Roact.createElement("TextLabel", {
							BackgroundTransparency = 1;
							Size = UDim2.new(1, 0, 1, 0);
							Font = Enum.Font.SourceSansBold;
							Text = "Editing \"" .. self.props.Key .. "\"";
							TextSize = 18;
							TextColor3 = theme.MainText.Default;
							TextXAlignment = Enum.TextXAlignment.Left;
						});
						SetButton = Roact.createElement(Button, {
							Label = "Set";
							ImageColor = "DialogMainButton";
							TextColor = "DialogMainButtonText";
							AnchorPoint = Vector2.new(1, 0);
							Size = UDim2.new(0, 80, 1, 0);
							Position = UDim2.new(1, -90, 0, 0);
							Disabled = (self.state.InputProfileName == "");
							OnActivated = function(_rbx)
								local textBox = self.TextBoxRef:getValue()
								if not textBox then return end
								local txt = textBox.Text
								if type(self.props.OnSet) == "function" then
									self.props.OnSet(txt)
								end
								self:setExpanded(false)
							end;
						});
						CancelButton = Roact.createElement(Button, {
							Label = "Cancel";
							ImageColor = "CheckedFieldBorder";
							TextColor = "DialogMainButtonText";
							AnchorPoint = Vector2.new(1, 0);
							Size = UDim2.new(0, 80, 1, 0);
							Position = UDim2.new(1, 0, 0, 0);
							Disabled = (self.state.InputProfileName == "");
							OnActivated = function(_rbx)
								if type(self.props.OnCancel) == "function" then
									self.props.OnCancel()
								end
								self:setExpanded(false)
							end;
						});
					});
					EditArea = Roact.createElement("Frame", {
						BackgroundColor3 = theme.InputFieldBackground.Default;
						Size = UDim2.new(1, 0, 1, -40);
						Position = UDim2.new(0, 0, 0, 40);
					}, {
						UIPadding = Roact.createElement("UIPadding", {
							PaddingBottom = UDim.new(0, 10);
							PaddingLeft = UDim.new(0, 10);
							PaddingRight = UDim.new(0, 10);
							PaddingTop = UDim.new(0, 10);
						});
						UICorner = Roact.createElement("UICorner", {
							CornerRadius = UDim.new(0, 8);
						});
						ScrollingFrame = Roact.createElement(ScrollingFrame, {
							Size = UDim2.new(1, 0, 1, 0);
							CanvasSize = self.state.CanvasSize;
							IgnoreUIListLayout = true;
							KeepShadowInBounds = true;
						}, {
							TextBox = Roact.createElement("TextBox", {
								BackgroundTransparency = 1;
								Size = UDim2.new(1, 0, 1, 0);
								Font = Enum.Font.SourceSans;
								Text = text or "";
								TextXAlignment = Enum.TextXAlignment.Left;
								TextYAlignment = Enum.TextYAlignment.Top;
								TextColor3 = theme.MainText.Default;
								TextSize = 18;
								ClearTextOnFocus = false;
								MultiLine = true;
								[Roact.Ref] = self.TextBoxRef;
								[Roact.Change.Text] = function()
									self:calcSize()
								end;
							});
						})
					});
				})
			end;
		});
	})

end


return ExpandableInputBox
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX2B7DA051FAA8496BBED0A1D85FDA6C62">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Modal</string>
					<string name="ScriptGuid">{0E2FA4D1-3409-40DF-AE82-BACF05FD68BF}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local PluginWidget = require(script.Parent.Parent.Plugin.PluginWidget)

local Modal = Roact.Component:extend("Modal")


function Modal:render()
	local visible = true
	if self.props.Visible ~= nil then
		visible = self.props.Visible
	end
	return Roact.createElement(Roact.Portal, {
		target = PluginWidget:GetWidget();
	}, {
		ModalFrame = Roact.createElement("TextButton", {
			AutoButtonColor = false;
			BackgroundTransparency = self.props.BackgroundTransparency or 0.3;
			BackgroundColor3 = self.props.BackgroundColor3 or Color3.new(0, 0, 0);
			BorderSizePixel = 0;
			Size = UDim2.new(1, 0, 1, 0);
			Text = "";
			TextTransparency = 1;
			Visible = visible;
			ZIndex = 10;
			[Roact.Event.MouseButton1Down] = function()
				if self.props.NoClickDismiss then return end
				self.props.Dismiss()
			end;
			[Roact.Event.MouseButton2Down] = function()
				if self.props.NoClickDismiss then return end
				self.props.Dismiss()
			end;
		}, self.props[Roact.Children])
	})
end


return Modal
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXDF20883DEA4B48BB8F5883920DB7495C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DeleteKey</string>
					<string name="ScriptGuid">{41E42BCF-E44E-4D95-9804-F54384071E23}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local ThemeContext = require(script.Parent.ThemeContext)
local OverlayPage = require(script.Parent.OverlayPage)
local Button = require(script.Parent.Button)
local App = require(script.Parent.Parent.Plugin.App)
local DataFetch = require(script.Parent.Parent.Plugin.DataFetch)

local DeleteKey = Roact.Component:extend("DeleteKey")


function DeleteKey:init()
	self:setState({
		ErrorMessage = "";
	})
end


function DeleteKey:render()
	return Roact.createElement(OverlayPage, {}, {
		Title = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					Size = UDim2.new(1, 0, 0, 30);
					LayoutOrder = 0;
					Font = Enum.Font.SourceSans;
					Text = "Delete Key \"" .. (self.props.Key or "") .. "\"";
					TextSize = 18;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
				})
			end;
		});
		ButtonFrame = Roact.createElement("Frame", {
			BackgroundTransparency = 1;
			Size = UDim2.new(1, 0, 0, 30);
			LayoutOrder = 1;
		}, {
			ConfirmDelete = Roact.createElement(Button, {
				Label = "Delete";
				ImageColor = "DialogMainButton";
				TextColor = "DialogMainButtonText";
				Size = UDim2.new(0.5, -5, 1, 0);
				Disabled = (self.props.Key == "");
				OnActivated = function()
					local success, err = DataFetch:Delete(App:GetStore():getState()):await()
					if not success then
						self:setState({
							ErrorMessage = tostring(err)
						})
					else
						self.props.OnDataDeleted()
						self.props.ShowFrame("Main")
					end
				end;
			});
			Cancel = Roact.createElement(Button, {
				Label = "Cancel";
				ImageColor = "CheckedFieldBorder";
				TextColor = "DialogMainButtonText";
				Size = UDim2.new(0.5, -5, 1, 0);
				Position = UDim2.new(0.5, 5, 0, 0);
				OnActivated = function()
					self.props.ShowFrame("Main")
				end;
			});
		});
		ErrorMessage = Roact.createElement("TextLabel", {
			BackgroundTransparency = 1;
			Size = UDim2.new(1, 0, 0, 30);
			LayoutOrder = 2;
			Font = Enum.Font.SourceSansItalic;
			Text = self.state.ErrorMessage;
			TextSize = 18;
			TextColor3 = Color3.new(1, 0, 0);
			TextXAlignment = Enum.TextXAlignment.Left;
			Visible = (self.state.ErrorMessage ~= "");
		});
		Warning = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					Size = UDim2.new(1, 0, 1, 0);
					LayoutOrder = 3;
					Font = Enum.Font.SourceSansItalic;
					Text = "Note: This action cannot be undone.";
					TextSize = 18;
					TextColor3 = theme.WarningText.Default;
					TextWrapped = true;
					TextXAlignment = Enum.TextXAlignment.Left;
					TextYAlignment = Enum.TextYAlignment.Top;
				})
			end;
		});
	})
end


DeleteKey = RoactRodux.connect(
	function(state)
		return {
			Key = state.Key;
		}
	end,
	function(dispatch)
		return {
			ShowFrame = function(frameName)
				dispatch({type = "ShowFrame"; Frame = frameName})
			end;
			OnDataDeleted = function()
				dispatch({type = "DataDeleted"})
			end;
		}
	end
)(DeleteKey)


return DeleteKey
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX2C62922791AC4A4C89C9FB8187749E98">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ContextMenu</string>
					<string name="ScriptGuid">{0126CC48-E952-4627-9B48-D7BA9EF441E1}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local PluginWidget = require(script.Parent.Parent.Plugin.PluginWidget)
local ThemeContext = require(script.Parent.ThemeContext)
local Modal = require(script.Parent.Modal)
local TextService = game:GetService("TextService")

local PADDING = 10
local TEXTBOX_HEIGHT = 20
local DIVIDER_HEIGHT = 6
local TEXTBOX_MIN_WIDTH = 80
local TEXT_SIZE = 16
local FONT = Enum.Font.SourceSans

local ContextMenu = Roact.Component:extend("ContextMenu")


local function GetTextWidth(text)
	return TextService:GetTextSize(text, TEXT_SIZE, FONT, Vector2.new(10000, 10000)).X
end


local ContextMenuItem = Roact.Component:extend("ContextMenuItem")
function ContextMenuItem:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			if self.props.Type == "divider" then
				return Roact.createElement("Frame", {
					BackgroundTransparency = 1;
					Size = UDim2.new(0, self.props.Width, 0, DIVIDER_HEIGHT);
					LayoutOrder = self.props.LayoutOrder;
				}, {
					Divider = Roact.createElement("Frame", {
						AnchorPoint = Vector2.new(0.5, 0.5);
						Position = UDim2.new(0.5, 0, 0.5, 0);
						Size = UDim2.new(0.9, 0, 0, 1);
						BorderSizePixel = 0;
						BackgroundColor3 = theme.InputFieldBorder.Default;
					});
				})
			elseif self.props.Type == "button" then
				return Roact.createElement("TextButton", {
					Active = not self.props.Disabled;
					AutoButtonColor = not self.props.Disabled;
					Size = UDim2.new(0, self.props.Width - 2, 0, TEXTBOX_HEIGHT);
					BackgroundColor3 = theme.InputFieldBackground.Default;
					BorderSizePixel = 0;
					TextSize = TEXT_SIZE;
					Text = self.props.Text;
					TextColor3 = theme.MainText.Default;
					TextTransparency = (self.props.Disabled and 0.75 or 0);
					Font = FONT;
					LayoutOrder = self.props.LayoutOrder;
					[Roact.Event.Activated] = function()
						self.props.OnActivated(self.props.Value, self.props.Text)
					end;
				})
			end
		end;
	})
end


function ContextMenu:calcAnchorPoint(size)
	local pos = self.props.Position
	local widget = PluginWidget:GetWidget()
	local widgetPos = widget.AbsolutePosition
	local widgetSize = widget.AbsoluteSize
	local anchorX, anchorY = 0, 0
	if (size.X.Offset + pos.X.Offset) > (widgetPos.X + widgetSize.X) then
		anchorX = 1
	end
	if (size.Y.Offset + pos.Y.Offset) > (widgetPos.Y + widgetSize.Y) then
		anchorY = 1
	end
	return Vector2.new(anchorX, anchorY)
end


function ContextMenu:init()
	self.UIListLayoutRef = Roact.createRef()
end


function ContextMenu:render()
	local items = {}
	items.UIPadding = Roact.createElement("UIPadding", {
		PaddingTop = UDim.new(0, PADDING);
		PaddingBottom = UDim.new(0, PADDING);
		PaddingLeft = UDim.new(0, 0);
		PaddingRight = UDim.new(0, 0);
	});
	items.UIListLayout = Roact.createElement("UIListLayout", {
		Padding = UDim.new(0, 0);
		FillDirection = Enum.FillDirection.Vertical;
		HorizontalAlignment = Enum.HorizontalAlignment.Center;
		SortOrder = Enum.SortOrder.LayoutOrder;
	});
	items.UICorner = Roact.createElement("UICorner", {
		CornerRadius = UDim.new(0, 7);
	})
	local textWidth = TEXTBOX_MIN_WIDTH
	local size = UDim2.new(0, textWidth, 0, 32)
	if self.props.Items then
		local height = (PADDING * 2)
		for _,item in ipairs(self.props.Items) do
			if item.Type == "button" then
				local width = GetTextWidth(item.Text) + (PADDING * 2)
				if width > textWidth then
					textWidth = width
				end
				height += TEXTBOX_HEIGHT
			elseif item.Type == "divider" then
				height += DIVIDER_HEIGHT
			end
		end
		for i,item in ipairs(self.props.Items) do
			items["item_" .. tostring(i)] = Roact.createElement(ContextMenuItem, {
				LayoutOrder = i;
				Type = item.Type;
				Text = item.Text;
				Value = item.Value;
				Disabled = item.Disabled;
				Width = textWidth;
				OnActivated = function(value, text)
					self.props.OnHide(value, text)
				end;
			})
		end
		size = UDim2.new(0, textWidth, 0, math.max(32, height))
	end
	return Roact.createElement(Modal, {
		BackgroundTransparency = 1;
		Visible = self.props.Showing;
		Dismiss = self.props.OnHide;
	}, {
		InputFrameBorder = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("Frame", {
					AnchorPoint = self:calcAnchorPoint(size);
					Size = size;
					Position = self.props.Position;
					BackgroundColor3 = theme.InputFieldBorder.Default;
					BorderSizePixel = 0;
					ZIndex = 2;
				}, {
					UICorner = Roact.createElement("UICorner", {
						CornerRadius = UDim.new(0, 8);
					});
					InputFrame = Roact.createElement("Frame", {
						Position = UDim2.new(0, 1, 0, 1);
						Size = UDim2.new(1, -2, 1, -2);
						BackgroundColor3 = theme.InputFieldBackground.Default;
						BorderSizePixel = 0;
					}, items)
				})
			end;
		});
	})
end


return ContextMenu
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX67C6348F867F4FCAA11478BD90834D4C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">NewKey</string>
					<string name="ScriptGuid">{6E6EB143-3F2F-4CF9-8A2B-341821F7DAEB}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)
local Modal = require(script.Parent.Modal)
local InputBox = require(script.Parent.InputBox)

local NewKey = Roact.Component:extend("NewKey")


function NewKey:render()
	local keyExistsLabel
	if self.props.KeyExists then
		keyExistsLabel = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					AnchorPoint = Vector2.new(0, 1);
					Size = UDim2.new(1, 0, 0, 20);
					Position = UDim2.new(0, 0, 1, 0);
					Font = Enum.Font.SourceSansItalic;
					Text = "Key already exists";
					TextSize = 18;
					TextColor3 = theme.WarningText.Default;
					TextWrapped = true;
					TextXAlignment = Enum.TextXAlignment.Left;
					TextYAlignment = Enum.TextYAlignment.Center;
				});
			end;
		})
	end
	local function Dismiss(...)
		self.props.OnHide(...)
	end
	return Roact.createElement(Modal, {
		Visible = self.props.Showing;
		Dismiss = Dismiss;
	}, {
		KeyInputFrame = Roact.createElement("Frame", {
			AnchorPoint = Vector2.new(0, 0.5);
			BackgroundTransparency = 1;
			Position = self.props.Position;
			Size = UDim2.new(0, 150, 0, 50);
			ZIndex = 2;
		}, {
			KeyInputBox = Roact.createElement(InputBox, {
				Active = true;
				Placeholder = "Key";
				Text = self.props.Key;
				ForceFocus = true;
				FilterText = function(text)
					return text:gsub("\r", "")
				end;
				OnFocusLost = function(submitted, text)
					if submitted then
						Dismiss(text)
					end
					return true
				end;
			});
			KeyExistsLabel = keyExistsLabel;
		});
	})
end


return NewKey
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX37FD064683A34E2EBA4B4CB4AE7609E4">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DataStorePageViewer</string>
					<string name="ScriptGuid">{E845FDDA-5646-48D7-A889-1A1FD38FECBD}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local ItemViewer = require(script.Parent.ItemViewer)
local DataFetch = require(script.Parent.Parent.Plugin.DataFetch)

local DataStorePageViewer = Roact.Component:extend("DataStorePageViewer")


function DataStorePageViewer:init()
	self:setState({
		Size = UDim2.new();
		TableLayoutCount = 0;
	})
	self.TableLayoutRef = Roact.createRef()
end


function DataStorePageViewer:didMount()
	self:calcSizeY()
end


function DataStorePageViewer:calcSizeY()
	local uiTableLayout = self.TableLayoutRef:getValue()
	if not uiTableLayout then return end
	local size = uiTableLayout.AbsoluteContentSize
	self:setState({
		Size = UDim2.fromOffset(size.X, size.Y);
	})
end


function DataStorePageViewer:didUpdate(prevProps)
	if self.props.DataPage ~= prevProps.DataPage then
		self:setState({
			TableLayoutCount = self.state.TableLayoutCount + 1;
		})
	end
end


function DataStorePageViewer:render()

	local items = {}
	
	items["UITableLayout" .. self.state.TableLayoutCount] = Roact.createElement("UITableLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder;
		Padding = UDim2.new(0, 20, 0, 0);
		[Roact.Change.AbsoluteContentSize] = function()
			self:calcSizeY()
		end;
		[Roact.Ref] = self.TableLayoutRef;
	})

	local page = self.props.DataPage
	if page then
		for order,data in ipairs(page) do
			items[data.key] = Roact.createElement(ItemViewer, {
				Key = data.key;
				Value = data.value;
				LayoutOrder = order;
				Level = 1;
				NoSave = true;
				FilterText = function(text)
					if text == "" then return text end
					return text:match("^%-?%d*")
				end;
				SubmitChange = function(text)
					local n = tonumber(text)
					if n and text:match("^%-?%d*") then
						local success, err = DataFetch:Save({
							Key = data.key;
							Data = n;
							DSName = self.props.DSName;
							DSScope = self.props.DSScope;
							UseOrdered = true;
						}):await()
						if not success then
							warn(err)
						end
						return n
					else
						return data.value
					end
				end;
			})
		end
	end

	return Roact.createElement("Frame", {
		BackgroundTransparency = 1;
		Size = self.state.Size;
	}, items)

end


DataStorePageViewer = RoactRodux.connect(
	function(state)
		return {
			DSName = state.DSName;
			DSScope = state.DSScope;
		}
	end
)(DataStorePageViewer)


return DataStorePageViewer
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXEA03514AB85C466598798D0FB41753DF">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">IconButton</string>
					<string name="ScriptGuid">{E1CC9697-4363-4061-A5A8-B43B68BEBB75}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)
local Spinner = require(script.Parent.Spinner)
local Tooltip = require(script.Parent.Tooltip)

local IconButton = Roact.PureComponent:extend("IconButton")


function IconButton:init()
	self:setState({
		Processing = false;
		ShowTooltip = false;
	})
	self.ButtonRef = Roact.createRef()
end


function IconButton:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			local children = {}
			children.Spinner = Roact.createElement(Spinner, {
				Show = self.state.Processing;
				Color = theme[self.props.ImageColor or "MainText"].Default;
			})
			if self.props.Tooltip then
				local pos = UDim2.new()
				local btn = self.ButtonRef:getValue()
				if btn then
					local sz = btn.AbsoluteSize
					pos = btn.AbsolutePosition + Vector2.new((sz.X / 2), sz.Y + 5)
					pos = UDim2.new(0, pos.X, 0, pos.Y)
				end
				children.Tooltip = Roact.createElement(Tooltip, {
					AnchorPoint = Vector2.new(0.5, 0);
					Text = self.props.Tooltip;
					Position = pos;
					Visible = self.state.ShowTooltip;
				})
			end
			return Roact.createElement("ImageButton", {
				Active = (not self.props.Disabled);
				AutoButtonColor = (not self.props.Disabled);
				AnchorPoint = self.props.AnchorPoint or Vector2.new();
				BackgroundTransparency = 1;
				Size = self.props.Size or UDim2.new(1, 0, 1, 0);
				Position = self.props.Position or UDim2.new(0, 0, 0, 0);
				Image = self.props.Icon or "";
				ImageColor3 = theme[self.props.ImageColor or "MainButton"][self.props.Disabled and "Disabled" or "Default"];
				[Roact.Event.Activated] = function(rbx)
					if self.state.Processing or not rbx.Active then return end
					self:setState({Processing = true})
					self.props.OnActivated(rbx)
					self:setState({Processing = false})
				end;
				[Roact.Event.MouseButton1Down] = function(rbx)
					self:setState({ShowTooltip = false})
					if self.props.Disabled then return end
					rbx.ImageColor3 = theme[self.props.ImageColor or "MainButton"].Pressed
				end;
				[Roact.Event.MouseButton1Up] = function(rbx)
					if self.props.Disabled then return end
					rbx.ImageColor3 = theme[self.props.ImageColor or "MainButton"].Hover
				end;
				[Roact.Event.MouseEnter] = function(rbx)
					self:setState({ShowTooltip = true})
					if self.props.Disabled then return end
					rbx.ImageColor3 = theme[self.props.ImageColor or "MainButton"].Hover
				end;
				[Roact.Event.MouseLeave] = function(rbx)
					self:setState({ShowTooltip = false})
					if self.props.Disabled then return end
					rbx.ImageColor3 = theme[self.props.ImageColor or "MainButton"].Default
				end;
				[Roact.Ref] = self.ButtonRef
			}, children);
		end;
	})
end


return IconButton
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXA77F7974C8594B349FCB0D74033F9AD9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">SaveProfile</string>
					<string name="ScriptGuid">{AE45BE6D-7456-4EA6-BB8C-77C282DC3B2C}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local ThemeContext = require(script.Parent.ThemeContext)
local OverlayPage = require(script.Parent.OverlayPage)
local InputBox = require(script.Parent.InputBox)
local Button = require(script.Parent.Button)
local KeyValuePair = require(script.Parent.KeyValuePair)
local Profiles = require(script.Parent.Parent.Plugin.Profiles)

local SaveProfile = Roact.Component:extend("SaveProfile")


function SaveProfile:init()
	self:setState({
		InputProfileName = "";
	})
end


function SaveProfile:render()
	local text = nil
	if self.state.InputProfileName ~= "" then
		text = self.state.InputProfileName
	end
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			return Roact.createElement(OverlayPage, {}, {
				UIListLayout = Roact.createElement("UIListLayout", {
					Padding = UDim.new(0, 10);
					FillDirection = Enum.FillDirection.Vertical;
					HorizontalAlignment = Enum.HorizontalAlignment.Center;
					SortOrder = Enum.SortOrder.LayoutOrder;
					VerticalAlignment = Enum.VerticalAlignment.Top;
				});
				UIPadding = Roact.createElement("UIPadding", {
					PaddingBottom = UDim.new(0, 10);
					PaddingLeft = UDim.new(0, 10);
					PaddingRight = UDim.new(0, 10);
					PaddingTop = UDim.new(0, 10);
				});
				Title = Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					Size = UDim2.new(1, 0, 0, 30);
					LayoutOrder = 0;
					Font = Enum.Font.SourceSans;
					Text = "Save Connection";
					TextSize = 18;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
				});
				ProfileName = Roact.createElement(InputBox, {
					Placeholder = "Name";
					LayoutOrder = 1;
					ForceFocus = self.props.IsVisible;
					MaxCharacters = 20;
					Text = text;
					OnInput = function(txt)
						self:setState({InputProfileName = txt})
					end;
				});
				DSName = Roact.createElement(KeyValuePair, {
					Key = "DataStore Name";
					Value = self.props.DSName;
					LayoutOrder = 2;
				});
				DSScope = Roact.createElement(KeyValuePair, {
					Key = "DataStore Scope";
					Value = self.props.DSScope == "" and "global" or self.props.DSScope;
					LayoutOrder = 3;
				});
				DSOrdered = Roact.createElement(KeyValuePair, {
					Key = "OrderedDataStore";
					Value = self.props.UseOrdered and "Yes" or "No";
					LayoutOrder = 4;
				});
				UseV2 = Roact.createElement(KeyValuePair, {
					Key = "Use DataStore V2";
					Value = self.props.UseV2 and "Yes" or "No";
					LayoutOrder = 5;
				});
				GameId = Roact.createElement(KeyValuePair, {
					Key = "Game ID";
					Value = tostring(game.GameId);
					LayoutOrder = 6;
				});
				ButtonFrame = Roact.createElement("Frame", {
					BackgroundTransparency = 1;
					Size = UDim2.new(1, 0, 0, 30);
					LayoutOrder = 7;
				}, {
					SaveButton = Roact.createElement(Button, {
						Label = "Save";
						ImageColor = "DialogMainButton";
						TextColor = "DialogMainButtonText";
						Size = UDim2.new(0.5, -5, 1, 0);
						Disabled = (self.state.InputProfileName == "");
						OnActivated = function(_rbx)
							Profiles:Save(self.state.InputProfileName, game.GameId, self.props.DSName, self.props.DSScope, self.props.UseOrdered, self.props.UseV2)
							self:setState({InputProfileName = ""});
							self.props.ShowFrame("Main")
						end;
					});
					Cancel = Roact.createElement(Button, {
						Label = "Cancel";
						ImageColor = "CheckedFieldBorder";
						TextColor = "DialogMainButtonText";
						Size = UDim2.new(0.5, -5, 1, 0);
						Position = UDim2.new(0.5, 5, 0, 0);
						OnActivated = function(_rbx)
							self:setState({InputProfileName = ""});
							self.props.ShowFrame("Main")
						end;
					});
				});
			});
		end;
	});
end


SaveProfile = RoactRodux.connect(
	function(state)
		return {
			DSName = state.DSNameInput;
			DSScope = state.DSScopeInput;
			UseOrdered = state.UseOrderedInput;
			UseV2 = state.UseV2Input;
		}
	end,
	function(dispatch)
		return {
			ShowFrame = function(frameName)
				dispatch({type = "ShowFrame"; Frame = frameName})
			end;
		}
	end
)(SaveProfile)


return SaveProfile
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX0A061A805E584ADCAF6581F4A9D5C050">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">LoadProfile</string>
					<string name="ScriptGuid">{A88ECB48-3E90-429A-8B39-EC46D4832F16}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local ThemeContext = require(script.Parent.ThemeContext)
local OverlayPage = require(script.Parent.OverlayPage)
local InputBox = require(script.Parent.InputBox)
local Button = require(script.Parent.Button)
local ProfileItem = require(script.Parent.ProfileItem)
local ScrollingFrame = require(script.Parent.ScrollingFrame)
local Profiles = require(script.Parent.Parent.Plugin.Profiles)

local LoadProfile = Roact.Component:extend("LoadProfile")


function LoadProfile:init()
	self:setState({
		InputFilter = "";
		Num = 0;
	})
end


function LoadProfile:getResults()
	local filter = self.state.InputFilter
	if filter == "" then return Profiles:GetAll() end
	return Profiles:Search(nil, filter)
end


function LoadProfile:render()
	local filterText = nil
	if self.state.InputFilter ~= "" then
		filterText = self.state.InputFilter
	end
	local results = self:getResults()
	local resultItems = {}
	if #results == 0 then
		resultItems.NoResults = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					Size = UDim2.new(1, 0, 0, 30);
					LayoutOrder = 0;
					Font = Enum.Font.SourceSans;
					Text = self.state.InputFilter == "" and "No saved connections" or "No results";
					TextSize = 18;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
				});
			end;
		})
	else
		for i,profile in ipairs(results) do
			resultItems[profile.ID] = Roact.createElement(ProfileItem, {
				Profile = profile;
				LayoutOrder = i;
				OnLoad = function()
					self.props.Load(profile)
					self:setState({InputFilter = ""})
					self.props.ShowFrame("Main")
				end;
				OnDelete = function()
					Profiles:Delete(profile.ID)
					self:setState({Num = self.state.Num + 1})
				end;
			});
		end
	end
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			return Roact.createElement(OverlayPage, {}, {
				Title = Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					Size = UDim2.new(1, 0, 0, 30);
					LayoutOrder = 0;
					Font = Enum.Font.SourceSans;
					Text = "Load Connection";
					TextSize = 18;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
				});
				ButtonFrame = Roact.createElement("Frame", {
					BackgroundTransparency = 1;
					Size = UDim2.new(1, 0, 0, 30);
					LayoutOrder = 1;
				}, {
					SearchFilter = Roact.createElement(InputBox, {
						Placeholder = "Filter";
						LayoutOrder = 1;
						Text = filterText;
						Size = UDim2.new(0.7, -5, 1, 0);
						ForceFocus = self.props.IsVisible;
						MaxCharacters = 20;
						OnInput = function(txt)
							self:setState({InputFilter = txt})
						end;
					});
					Cancel = Roact.createElement(Button, {
						Label = "Cancel";
						ImageColor = "CheckedFieldBorder";
						TextColor = "DialogMainButtonText";
						Size = UDim2.new(0.3, -5, 1, 0);
						Position = UDim2.new(1, 0, 0, 0);
						AnchorPoint = Vector2.new(1, 0);
						OnActivated = function(_rbx)
							self:setState({InputFilter = ""})
							self.props.ShowFrame("Main")
						end;
					});
				});
				ResultsScrollingFrame = Roact.createElement(ScrollingFrame, {
					Size = UDim2.new(1, 0, 1, -82);
					LayoutOrder = 7;
					HorizontalAlignment = Enum.HorizontalAlignment.Center;
					KeepShadowInBounds = true;
				}, resultItems);
			});
		end;
	})
end


LoadProfile = RoactRodux.connect(
	function(state)
		return {
			DSName = state.DSNameInput;
			DSScope = state.DSScopeInput;
			UseOrdered = state.UseOrderedInput;
			UseV2 = state.UseV2;
		}
	end,
	function(dispatch)
		return {
			ShowFrame = function(frameName)
				dispatch({type = "ShowFrame"; Frame = frameName})
			end;
			Load = function(profile)
				dispatch({type = "DSName"; DSName = ""})
				dispatch({type = "DSScope"; DSScope = ""})
				dispatch({type = "Ordered"; UseOrdered = ""})
				dispatch({type = "UseV2"; UseV2 = false})
				-- Hack to wait 2 heartbeats:
				task.delay(0, function()
					task.wait()
					dispatch({type = "DSName"; DSName = profile.DSName})
					dispatch({type = "DSScope"; DSScope = profile.DSScope})
					dispatch({type = "Ordered"; UseOrdered = profile.Ordered})
					dispatch({type = "UseV2"; UseV2 = profile.UseV2})
					dispatch({type = "Key"; Key = ""})
				end)
			end;
		}
	end
)(LoadProfile)


return LoadProfile
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX798B7E2F8B1A43FFAF496E3164ACD2F5">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">KeyValuePair</string>
					<string name="ScriptGuid">{E2259757-A88C-4182-BEC9-47DB044A9C69}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)

local KeyValuePair = Roact.PureComponent:extend("KeyValuePair")


function KeyValuePair:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			return Roact.createElement("Frame", {
				BackgroundTransparency = 1;
				Size = self.props.Size or UDim2.new(1, 0, 0, 16);
				LayoutOrder = self.props.LayoutOrder or 0;
			}, {
				Key = Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					Size = UDim2.new(1, 0, 1, 0);
					LayoutOrder = 0;
					Font = Enum.Font.SourceSans;
					Text = (self.props.Key .. ":");
					TextSize = self.props.TextSize or 18;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
				});
				Value = Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					Size = UDim2.new(1, 0, 1, 0);
					LayoutOrder = 0;
					Font = Enum.Font.SourceSansBold;
					Text = self.props.Value;
					TextSize = self.props.TextSize or 18;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Right;
				});
			});
		end;
	});
end


return KeyValuePair
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXA392059AFB3A46BE982F8438D82A5CB7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">OverlayPage</string>
					<string name="ScriptGuid">{74962B5F-4442-459E-B24E-B4290D5C5C5C}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)

local OverlayPage = Roact.Component:extend("OverlayPage")


function OverlayPage:render()
	self.props[Roact.Children].UIListLayout = Roact.createElement("UIListLayout", {
		Padding = UDim.new(0, 10);
		FillDirection = Enum.FillDirection.Vertical;
		HorizontalAlignment = Enum.HorizontalAlignment.Center;
		SortOrder = Enum.SortOrder.LayoutOrder;
		VerticalAlignment = Enum.VerticalAlignment.Top;
	})
	self.props[Roact.Children].UIPadding = Roact.createElement("UIPadding", {
		PaddingBottom = UDim.new(0, 10);
		PaddingLeft = UDim.new(0, 10);
		PaddingRight = UDim.new(0, 10);
		PaddingTop = UDim.new(0, 10);
	})
	return Roact.createElement("Frame", {
		AnchorPoint = Vector2.new(0.5, 0);
		BackgroundTransparency = 1;
		Position = UDim2.new(0.5, 0, 0, 0);
		Size = UDim2.new(1, 0, 1, 0);
		ZIndex = 9;
	}, {
		UISizeConstraint = Roact.createElement("UISizeConstraint", {
			MinSize = Vector2.new(0, 0);
			MaxSize = Vector2.new(300, math.huge);
		});
		Shadows = Roact.createElement("Frame", {
			BackgroundTransparency = 1;
			Size = UDim2.new(1, 0, 1, 0);
		}, {
			LeftShadow = Roact.createElement("ImageLabel", {
				AnchorPoint = Vector2.new(1, 0);
				BackgroundTransparency = 1;
				Position = UDim2.new(0, 0, 0, 0);
				Size = UDim2.new(0, 8, 1, 0);
				Rotation = 180;
				Image = "rbxassetid://5051528605";
				ImageTransparency = 0.7;
				ImageColor3 = Color3.new(0, 0, 0);
			});
			RightShadow = Roact.createElement("ImageLabel", {
				BackgroundTransparency = 1;
				Position = UDim2.new(1, 0, 0, 0);
				Size = UDim2.new(0, 8, 1, 0);
				Image = "rbxassetid://5051528605";
				ImageTransparency = 0.7;
				ImageColor3 = Color3.new(0, 0, 0);
			});
		});
		Container = Roact.createElement("Frame", {
			BackgroundTransparency = 1;
			Size = UDim2.new(1, 0, 1, 0);
		}, self.props[Roact.Children]);
	})
end


return OverlayPage
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX86D0E22837C04547AF8339B6B2316DBC">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ProfileItem</string>
					<string name="ScriptGuid">{882EA757-19DC-4353-BD7F-0BB6A524D9C8}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)
local IconButton = require(script.Parent.IconButton)
local KeyValuePair = require(script.Parent.KeyValuePair)

local ProfileItem = Roact.PureComponent:extend("ProfileItem")


function ProfileItem:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			return Roact.createElement("Frame", {
				BackgroundColor3 = theme.CheckedFieldBackground.Default;
				Size = UDim2.new(0.9, 0, 0, 100);
				AnchorPoint = Vector2.new(0.5, 0);
				LayoutOrder = self.props.LayoutOrder;
			}, {
				UIListLayout = Roact.createElement("UIListLayout", {
					Padding = UDim.new(0, 2);
					FillDirection = Enum.FillDirection.Vertical;
					HorizontalAlignment = Enum.HorizontalAlignment.Center;
					SortOrder = Enum.SortOrder.LayoutOrder;
					VerticalAlignment = Enum.VerticalAlignment.Top;
				});
				UIPadding = Roact.createElement("UIPadding", {
					PaddingBottom = UDim.new(0, 5);
					PaddingLeft = UDim.new(0, 5);
					PaddingRight = UDim.new(0, 5);
					PaddingTop = UDim.new(0, 5);
				});
				UICorner = Roact.createElement("UICorner", {
					CornerRadius = UDim.new(0, 8);
				});
				TopBar = Roact.createElement("Frame", {
					BackgroundTransparency = 1;
					Size = UDim2.new(1, 0, 0, 20);
					LayoutOrder = 0;
				}, {
					Title = Roact.createElement("TextLabel", {
						BackgroundTransparency = 1;
						Size = UDim2.new(1, -52, 1, 0);
						Font = Enum.Font.SourceSansBold;
						Text = self.props.Profile.Name;
						TextSize = 18;
						TextColor3 = theme.MainText.Default;
						TextXAlignment = Enum.TextXAlignment.Left;
						ClipsDescendants = true;
					});
					DeleteButton = Roact.createElement(IconButton, {
						Icon = "rbxassetid://5516413280";
						ImageColor = "MainText";
						Tooltip = "Delete";
						Size = UDim2.new(0, 16, 0, 16);
						AnchorPoint = Vector2.new(1, 0);
						Position = UDim2.new(1, -26, 0, 0);
						Disabled = false;
						OnActivated = function()
							self.props.OnDelete()
						end;
					});
					LoadButton = Roact.createElement(IconButton, {
						Icon = "rbxassetid://5516414405";
						ImageColor = "MainText";
						Tooltip = "Load";
						Size = UDim2.new(0, 16, 0, 16);
						AnchorPoint = Vector2.new(1, 0);
						Position = UDim2.new(1, 0, 0, 0);
						Disabled = false;
						OnActivated = function()
							self.props.OnLoad()
						end;
					});
				});
				DSName = Roact.createElement(KeyValuePair, {
					Key = "DataStore Name";
					Value = self.props.Profile.DSName;
					LayoutOrder = 1;
					TextSize = 14;
				});
				DSScope = Roact.createElement(KeyValuePair, {
					Key = "DataStore Scope";
					Value = self.props.Profile.DSScope;
					LayoutOrder = 2;
					TextSize = 14;
				});
				Ordered = Roact.createElement(KeyValuePair, {
					Key = "OrderedDataStore";
					Value = self.props.Profile.Ordered and "Yes" or "No";
					LayoutOrder = 3;
					TextSize = 14;
				});
				UseV2 = Roact.createElement(KeyValuePair, {
					Key = "Use DataStore V2";
					Value = self.props.Profile.UseV2 and "Yes" or "No";
					LayoutOrder = 4;
					TextSize = 14;
				});
			});
		end;
	});
end


return ProfileItem
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXCF030032A1E84041A8F37777CF21F111">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Alert</string>
					<string name="ScriptGuid">{6BE1AB7D-5BE8-4182-A63C-91443579BFED}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)
local Modal = require(script.Parent.Modal)
local Button = require(script.Parent.Button)

local Alert = Roact.Component:extend("Alert")


function Alert:render()
	return Roact.createElement(Modal, {
		Visible = self.props.Showing;
		Dismiss = self.props.OnHide;
		NoClickDismiss = true;
	}, {
		Alert = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("Frame", {
					BackgroundColor3 = theme.MainBackground.Default;
					AnchorPoint = Vector2.new(0.5, 0.5);
					Position = UDim2.new(0.5, 0, 0.5, 0);
					Size = UDim2.new(0, 250, 0, 150);
				}, {
					UIPadding = Roact.createElement("UIPadding", {
						PaddingBottom = UDim.new(0, 10);
						PaddingLeft = UDim.new(0, 10);
						PaddingRight = UDim.new(0, 10);
						PaddingTop = UDim.new(0, 10);
					});
					UICorner = Roact.createElement("UICorner", {
						CornerRadius = UDim.new(0, 8);
					});
					Title = Roact.createElement("TextLabel", {
						BackgroundTransparency = 1;
						Size = UDim2.new(1, 0, 0, 20);
						Font = Enum.Font.SourceSansBold;
						Text = self.props.Title or "Alert";
						TextSize = 18;
						TextColor3 = theme.MainText.Default;
						TextXAlignment = Enum.TextXAlignment.Center;
					});
					Message = Roact.createElement("TextLabel", {
						BackgroundTransparency = 1;
						Size = UDim2.new(1, 0, 0, 50);
						Position = UDim2.new(0, 0, 0, 30);
						Font = Enum.Font.SourceSans;
						Text = self.props.Message or "";
						TextSize = 16;
						TextColor3 = theme.MainText.Default;
						TextWrapped = true;
						TextXAlignment = Enum.TextXAlignment.Left;
						TextYAlignment = Enum.TextYAlignment.Top;
					});
					DismissButton = Roact.createElement(Button, {
						AnchorPoint = Vector2.new(0.5, 1);
						Position = UDim2.new(0.5, 0, 1, 0);
						Label = self.props.DismissLabel or "OK";
						ImageColor = "DialogMainButton";
						TextColor = "DialogMainButtonText";
						Size = UDim2.new(0.5, -5, 0, 30);
						Disabled = false;
						OnActivated = function()
							self.props.OnHide()
						end;
					});
				});
			end;
		});
	})
end


return Alert
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX6408C9FA3F8B4B369439AC3C071430BC">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Tooltip</string>
					<string name="ScriptGuid">{768DA480-D3A8-4472-A10E-CF5681BEF499}</string>
					<ProtectedString name="Source"><![CDATA[local DEFAULT_TEXT_SIZE = 16
local DEFAULT_FONT = Enum.Font.SourceSans
local FRAME_SIZE = Vector2.new(10000, 10000)
local PADDING_X = 10
local SIZE_Y = 30
local INTERVAL_BEFORE_SHOW = 0.5

local Roact = require(script.Parent.Parent.Vendor.Roact)
local Promise = require(script.Parent.Parent.Vendor.Promise)
local ThemeContext = require(script.Parent.ThemeContext)
local PluginWidget = require(script.Parent.Parent.Plugin.PluginWidget)

local TextService = game:GetService("TextService")
local TweenService = game:GetService("TweenService")

local Tooltip = Roact.PureComponent:extend("Tooltip")


function Tooltip:init()
	self:setState({
		Width = self:_calcWidth();
		Visible = false;
	})
	self.UIScaleRef = Roact.createRef();
end


function Tooltip:_calcWidth()
	local text = self.props.Text
	if not text then return 0 end
	local size = TextService:GetTextSize(
		text,
		self.props.TextSize or DEFAULT_TEXT_SIZE,
		self.props.Font or DEFAULT_FONT,
		FRAME_SIZE
	)
	local sizeX = (size.X + PADDING_X)
	return sizeX
end


function Tooltip:didUpdate(prevProps)
	if prevProps.Text ~= self.props.Text then
		self:setState({Width = self:_calcWidth()})
	end
	if prevProps.Visible ~= self.props.Visible then
		if self.props.Visible then
			self:_delayBeforeShow()
		else
			self:_clearDelay()
			self:_tween()
		end
	end
end


function Tooltip:_clearDelay()
	if self._delayer then
		self._delayer:cancel()
		self._delayer = nil
	end
end


function Tooltip:_delayBeforeShow()
	self:_clearDelay()
	self._delayer = Promise.delay(INTERVAL_BEFORE_SHOW):andThen(function()
		self:_tween()
	end)
end


function Tooltip:_tween()
	local uiScale = self.UIScaleRef:getValue()
	if not uiScale then return end
	if self._currentTween then
		self._currentTween:Cancel()
		self._currentTween:Destroy()
	end
	local show = self.props.Visible
	local tweenInfo
	if show then
		tweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
		self:setState({Visible = true})
	else
		tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	end
	local tween = TweenService:Create(uiScale, tweenInfo, {Scale = (show and 1 or 0)})
	self._currentTween = tween
	tween.Completed:Connect(function(playbackState)
		if playbackState == Enum.PlaybackState.Completed then
			tween:Destroy()
			if not show then
				self:setState({Visible = false})
			end
		end
	end)
	tween:Play()
end


function Tooltip:willUnmount()
	self:_clearDelay()
	if self._currentTween then
		self._currentTween:Cancel()
		self._currentTween:Destroy()
		self._currentTween = nil
	end
end


function Tooltip:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(_theme)
			return Roact.createElement(Roact.Portal, {
				target = PluginWidget:GetWidget();
			}, {
				TooltipLabel = Roact.createElement("TextLabel", {
					AnchorPoint = self.props.AnchorPoint or Vector2.new(0.5, 0);
					BackgroundTransparency = 0.3;
					BackgroundColor3 = Color3.new(0, 0, 0);
					BorderSizePixel = 0;
					Size = UDim2.new(0, self.state.Width, 0, SIZE_Y);
					Position = self.props.Position;
					Text = self.props.Text or "";
					TextColor3 = Color3.new(1, 1, 1);
					Visible = self.state.Visible;
					ZIndex = 10;
				}, {
					UICorner = Roact.createElement("UICorner", {
						CornerRadius = UDim.new(0, 8);
					});
					UIScale = Roact.createElement("UIScale", {
						Scale = 0;
						[Roact.Ref] = self.UIScaleRef;
					});
				})
			})
		end;
	})
end


return Tooltip
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX348AC6B8CF2D4A7AA917F46370B1141B">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">KeyListContainer</string>
					<string name="ScriptGuid">{102EA546-61E2-411F-8595-F4E55D95FEF3}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local ThemeContext = require(script.Parent.ThemeContext)
local Spinner = require(script.Parent.Spinner)
local Container = require(script.Parent.Container)
local Button = require(script.Parent.Button)
local ScrollingFrame = require(script.Parent.ScrollingFrame)
local InputBox = require(script.Parent.InputBox)
local Constants = require(script.Parent.Parent.Plugin.Constants)
local Promise = require(script.Parent.Parent.Vendor.Promise)

local DataNil = Constants.DataNil
local LoadMoreButtonKey = {}
local LoadingMoreLabelKey = {}
local ErrorKey = {}

local KeyListContainer = Roact.Component:extend("KeyListContainer")


function KeyListContainer:init()
	self:setState({
		LoadedKeys = DataNil;
		FetchingPage = self.props.DataError == "";
		KeyPrefixInput = self.props.KeyPrefixInput or "";
		KeyPrefix = self.props.KeyPrefixInput or "";
	})
	if self.props.Keys ~= DataNil then
		self:fetchNextPage(true)
	end
end


function KeyListContainer:didUpdate(prevProps, _prevState)
	if self.props.Keys ~= prevProps.Keys or self.props.DataError ~= prevProps.DataError then
		if self.props.Keys == DataNil then
			self:setState({
				LoadedKeys = DataNil;
				FetchingPage = self.props.DataError == "";
			})
		else
			self:fetchNextPage(true)
		end
	end
end


function KeyListContainer:cancelCurrentPageFetch()
	if self.pageFetchPromise then
		self.pageFetchPromise:cancel()
		self.pageFetchPromise = nil
	end
end


function KeyListContainer:fetchNextPage(initial)
	if self.props.Keys ~= DataNil then
		self:cancelCurrentPageFetch()
		if initial then
			self:setState({
				LoadedKeys = self.props.Keys:GetCurrentPage();
				FetchingPage = false;
			})
		elseif not self.props.Keys.IsFinished then
			self:setState({
				FetchingPage = true;
			})
			self.pageFetchPromise = Promise.new(function(resolve, reject, onCancel)
				local cancelled = false
				onCancel(function()
					cancelled = true
				end)
				local success, err  = pcall(function()
					self.props.Keys:AdvanceToNextPageAsync()
				end)
				if cancelled then return end
				self.pageFetchPromise = nil
				if success then
					resolve(self.props.Keys:GetCurrentPage())
				else
					reject(err)
				end
			end)
			self.pageFetchPromise:andThen(function(page)
				local keys = table.create(#self.state.LoadedKeys + #page)
				table.move(self.state.LoadedKeys, 1, #self.state.LoadedKeys, 1, keys)
				table.move(page, 1, #page, #self.state.LoadedKeys + 1, keys)
				self:setState({
					LoadedKeys = keys;
					FetchingPage = false;
				})
			end):finally(function()
				self:setState({
					FetchingPage = false;
				})
			end)
		end
	end
end


function KeyListContainer:willUnmount()
	self:cancelCurrentPageFetch()
end


function KeyListContainer:render()

	local offset = (Constants.SideMenuButtonSize + (Constants.SideMenuPadding * 2))

	local keys = self.state.LoadedKeys
	local keysChildren = {}

	if keys == DataNil then
		keys = {}
	end

	for i,dataStoreKey in ipairs(keys) do
		local keyName = dataStoreKey.KeyName
		keysChildren[keyName] = Roact.createElement(Button, {
			LayoutOrder = i;
			ImageColor = "CheckedFieldBorder";
			TextColor = "DialogMainButtonText";
			Label = keyName;
			Size = UDim2.new(1, 0, 0, 30);
			OnActivated = function()
				self.props.DisplayKey(keyName)
			end;
		})
	end

	if self.props.DataError ~= "" then
		keysChildren[ErrorKey] = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					Size = UDim2.new(0, 140, 0, 30);
					Font = Enum.Font.SourceSans;
					Text = "Error fetching keys";
					TextSize = 20;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
				})
			end;
		})
	elseif (not self.props.Keys.IsFinished) and (not self.state.FetchingPage) then
		keysChildren[LoadMoreButtonKey] = Roact.createElement(Button, {
			LayoutOrder = #keys + 1;
			ImageColor = "DialogMainButton";
			TextColor = "DialogMainButtonText";
			Label = "Load More";
			Size = UDim2.new(1, 0, 0, 30);
			OnActivated = function()
				if self.pageFetchPromise then return end
				self:fetchNextPage()
			end;
		})
	elseif (not self.props.Keys.IsFinished) and self.state.FetchingPage then
		keysChildren[LoadingMoreLabelKey] = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("TextLabel", {
					LayoutOrder = #keys + 1;
					BackgroundTransparency = 1;
					Size = UDim2.new(0, 140, 0, 30);
					Font = Enum.Font.SourceSans;
					Text = "Fetching keys...";
					TextSize = 20;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
					Visible = self.props.FetchingData;
				}, {
					Spinner = Roact.createElement(Spinner, {
						Show = self.props.FetchingData;
						Color = theme.MainText.Default;
					});
				})
			end;
		})
	elseif self.props.Keys.IsFinished and (not self.state.FetchingPage) and #keys == 0 then
		keysChildren[LoadingMoreLabelKey] = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("TextLabel", {
					LayoutOrder = #keys + 1;
					BackgroundTransparency = 1;
					Size = UDim2.new(0, 140, 0, 30);
					Font = Enum.Font.SourceSans;
					Text = "No keys found" .. (self.state.KeyPrefix == "" and "" or " using prefix \"" .. self.state.KeyPrefix .. "\"");
					TextSize = 20;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
					Visible = self.props.FetchingData;
				})
			end;
		})
	end

	return Roact.createElement(Container, {
		BackgroundTransparency = 1;
		Position = UDim2.new(0, offset, 0, 0);
		Size = UDim2.new(1, -offset, 1, 0);
		Padding = 10;
		Overlay = self.props.ShowSideMenu;
	}, {
		TopBar = Roact.createElement("Frame", {
			Size = UDim2.new(1, 0, 0, 30);
			BackgroundTransparency = 1;
		}, {
			KeyPrefixSearch = Roact.createElement(InputBox, {
				Active = not self.props.ShowSideMenu;
				Placeholder = "Key Prefix";
				Text = self.state.KeyPrefixInput;
				OnInput = function(text)
					self:setState({KeyPrefixInput = text})
				end;
				OnFocusLost = function()
					if self.state.KeyPrefix == self.state.KeyPrefixInput then return end
					self.props.SetKeyPrefix(self.state.KeyPrefixInput)
					self.props.Refresh()
					self:setState({KeyPrefix = self.state.KeyPrefixInput})
				end;
				OnCleared = function()
					self.props.SetKeyPrefix("")
					self.props.Refresh()
					self:setState({KeyPrefix = ""})
				end;
			});
		});
		KeyListViewer = Roact.createElement(ScrollingFrame, {
			NoScrollX = true;
			VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar;
			Position = UDim2.new(0, 0, 0, 40);
			Size = UDim2.new(1, 0, 1, -40);
			BackgroundTransparency = 1;
		}, keysChildren);
	})

end


KeyListContainer = RoactRodux.connect(
	function(state)
		return {
			Keys = state.Keys;
			KeyPrefixInput = state.KeyPrefix;
			ShowSideMenu = state.ShowSideMenu;
			DSName = state.DSName;
			DSScope = state.DSScope;
			DataError = state.DataError;
		}
	end,
	function(dispatch)
		return {
			SetKeyPrefix = function(keyPrefix)
				dispatch({type = "KeyPrefix"; KeyPrefix = keyPrefix})
				dispatch({type = "Keys"; Keys = DataNil})
			end;
			DisplayKey = function(key)
				dispatch({type = "Connected"; Connected = true; ConnectedView = "DataContainer"})
				dispatch({type = "Key"; Key = key})
			end;
			Refresh = function()
				dispatch({type = "Refresh"})
			end;
		}
	end
)(KeyListContainer)


return KeyListContainer
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX13B4616A059E44C187DC88009568E32D">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">StoreListContainer</string>
					<string name="ScriptGuid">{DC3DB63C-C97F-4F27-9039-09B199564792}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local ThemeContext = require(script.Parent.ThemeContext)
local Spinner = require(script.Parent.Spinner)
local Container = require(script.Parent.Container)
local Button = require(script.Parent.Button)
local ScrollingFrame = require(script.Parent.ScrollingFrame)
local InputBox = require(script.Parent.InputBox)
local Constants = require(script.Parent.Parent.Plugin.Constants)
local Promise = require(script.Parent.Parent.Vendor.Promise)

local DataNil = Constants.DataNil
local LoadMoreButtonKey = {}
local LoadingMoreLabelKey = {}
local ErrorKey = {}

local StoreListContainer = Roact.Component:extend("StoreListContainer")


function StoreListContainer:init()
	self:setState({
		LoadedStores = DataNil;
		FetchingPage = self.props.DataError == "";
		StorePrefixInput = self.props.StorePrefixInput or "";
		StorePrefix = self.props.StorePrefixInput or "";
	})
	if self.props.Stores ~= DataNil then
		self:fetchNextPage(true)
	end
end


function StoreListContainer:didUpdate(prevProps, _prevState)
	if self.props.Stores ~= prevProps.Stores or self.props.DataError ~= prevProps.DataError then
		if self.props.Stores == DataNil then
			self:setState({
				LoadedStores = DataNil;
				FetchingPage = self.props.DataError == "";
			})
		else
			self:fetchNextPage(true)
		end
	end
end


function StoreListContainer:cancelCurrentPageFetch()
	if self.pageFetchPromise then
		self.pageFetchPromise:cancel()
		self.pageFetchPromise = nil
	end
end


function StoreListContainer:fetchNextPage(initial)
	if self.props.Stores ~= DataNil then
		self:cancelCurrentPageFetch()
		if initial then
			self:setState({
				LoadedStores = self.props.Stores:GetCurrentPage();
				FetchingPage = false;
			})
		elseif not self.props.Stores.IsFinished then
			self:setState({
				FetchingPage = true;
			})
			self.pageFetchPromise = Promise.new(function(resolve, reject, onCancel)
				local cancelled = false
				onCancel(function()
					cancelled = true
				end)
				local success, err  = pcall(function()
					self.props.Stores:AdvanceToNextPageAsync()
				end)
				if cancelled then return end
				self.pageFetchPromise = nil
				if success then
					resolve(self.props.Stores:GetCurrentPage())
				else
					reject(err)
				end
			end)
			self.pageFetchPromise:andThen(function(page)
				local stores = table.create(#self.state.LoadedStores + #page)
				table.move(self.state.LoadedStores, 1, #self.state.LoadedStores, 1, stores)
				table.move(page, 1, #page, #self.state.LoadedStores + 1, stores)
				self:setState({
					LoadedStores = stores;
					FetchingPage = false;
				})
			end):finally(function()
				self:setState({
					FetchingPage = false;
				})
			end)
		end
	end
end


function StoreListContainer:willUnmount()
	self:cancelCurrentPageFetch()
end


function StoreListContainer:render()

	local offset = (Constants.SideMenuButtonSize + (Constants.SideMenuPadding * 2))

	local stores = self.state.LoadedStores
	local storesChildren = {}

	if stores == DataNil then
		stores = {}
	end

	for i,dataStoreInfo in ipairs(stores) do
		local dataStoreName = dataStoreInfo.DataStoreName
		storesChildren[dataStoreName] = Roact.createElement(Button, {
			LayoutOrder = i;
			ImageColor = "CheckedFieldBorder";
			TextColor = "DialogMainButtonText";
			Label = dataStoreName;
			Size = UDim2.new(1, 0, 0, 30);
			OnActivated = function()
				self.props.SelectStore(dataStoreName)
			end;
		})
	end


	if self.props.DataError ~= "" then
		storesChildren[ErrorKey] = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					Size = UDim2.new(0, 140, 0, 30);
					Font = Enum.Font.SourceSans;
					Text = "Error fetching DataStores";
					TextSize = 20;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
				})
			end;
		})
	elseif (not self.props.Stores.IsFinished) and (not self.state.FetchingPage) then
		storesChildren[LoadMoreButtonKey] = Roact.createElement(Button, {
			LayoutOrder = #stores + 1;
			ImageColor = "DialogMainButton";
			TextColor = "DialogMainButtonText";
			Label = "Load More";
			Size = UDim2.new(1, 0, 0, 30);
			OnActivated = function()
				if self.pageFetchPromise then return end
				self:fetchNextPage()
			end;
		})
	elseif (not self.props.Stores.IsFinished) and self.state.FetchingPage then
		storesChildren[LoadingMoreLabelKey] = Roact.createElement(ThemeContext.Consumer, {
			render = function(theme)
				return Roact.createElement("TextLabel", {
					LayoutOrder = #stores + 1;
					BackgroundTransparency = 1;
					Size = UDim2.new(0, 140, 0, 30);
					Font = Enum.Font.SourceSans;
					Text = "Fetching stores...";
					TextSize = 20;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
					Visible = self.props.FetchingData;
				}, {
					Spinner = Roact.createElement(Spinner, {
						Show = self.props.FetchingData;
						Color = theme.MainText.Default;
					});
				})
			end;
		})
	end

	return Roact.createElement(Container, {
		BackgroundTransparency = 1;
		Position = UDim2.new(0, offset, 0, 0);
		Size = UDim2.new(1, -offset, 1, 0);
		Padding = 10;
		Overlay = self.props.ShowSideMenu;
	}, {
		TopBar = Roact.createElement("Frame", {
			Size = UDim2.new(1, 0, 0, 30);
			BackgroundTransparency = 1;
		}, {
			StorePrefixSearch = Roact.createElement(InputBox, {
				Active = not self.props.ShowSideMenu;
				Placeholder = "DataStore Name Prefix";
				Text = self.state.StorePrefixInput;
				OnInput = function(text)
					self:setState({StorePrefixInput = text})
				end;
				OnFocusLost = function()
					if self.state.StorePrefix == self.state.StorePrefixInput then return end
					self.props.SetStorePrefix(self.state.StorePrefixInput)
					self.props.Refresh()
					self:setState({StorePrefix = self.state.StorePrefixInput})
				end;
				OnCleared = function()
					self.props.SetStorePrefix("")
					self.props.Refresh()
					self:setState({StorePrefix = ""})
				end;
			});
		});
		StoreListViewer = Roact.createElement(ScrollingFrame, {
			NoScrollX = true;
			VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar;
			Position = UDim2.new(0, 0, 0, 40);
			Size = UDim2.new(1, 0, 1, -40);
			BackgroundTransparency = 1;
		}, storesChildren);
	})

end


StoreListContainer = RoactRodux.connect(
	function(state)
		return {
			Stores = state.Stores;
			StorePrefixInput = state.StorePrefix;
			ShowSideMenu = state.ShowSideMenu;
			DataError = state.DataError;
		}
	end,
	function(dispatch)
		return {
			SetStorePrefix = function(storePrefix)
				dispatch({type = "StorePrefix"; StorePrefix = storePrefix})
				dispatch({type = "Stores"; Stores = DataNil})
			end;
			SelectStore = function(storeName)
				dispatch({type = "Connected"; Connected = false; ConnectedView = ""})
				dispatch({type = "DSName"; DSName = storeName})
				dispatch({type = "DSScope"; DSScope = ""})
				dispatch({type = "SideMenu"; Show = true})
			end;
			Refresh = function()
				dispatch({type = "Refresh"})
			end;
		}
	end
)(StoreListContainer)


return StoreListContainer
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX6927E37CEADD4D1DB6DD63B90BF6CDE3">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">OverlayContext</string>
					<string name="ScriptGuid">{8D6B0FB0-53E1-431F-BA7B-C5CEF8D215DF}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)

local OverlayContext = Roact.createContext(false)

return OverlayContext
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXB71966847CCD433F9D5AC16EEDA0BCEE">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DataUsage</string>
					<string name="ScriptGuid">{36441F41-10D6-4D76-853D-86000E6A5834}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local RoactRodux = require(script.Parent.Parent.Vendor.RoactRodux)
local ThemeContext = require(script.Parent.ThemeContext)
local Tooltip = require(script.Parent.Tooltip)
local DataNil = require(script.Parent.Parent.Plugin.Constants).DataNil
local HumanBytes = require(script.Parent.Parent.Plugin.HumanBytes)

local HttpService = game:GetService("HttpService")
local TextService = game:GetService("TextService")

-- Data limit is 1 byte less than 4MB
-- See: https://devforum.roblox.com/t/datastore-editor-v3/716915/68
local MAX_DATA_SIZE = 4194303
local TEXT_SIZE = 16
local FONT = Enum.Font.SourceSans

local DataUsage = Roact.Component:extend("DataUsage")


local function GetTextWidth(text)
	return TextService:GetTextSize(text, TEXT_SIZE, FONT, Vector2.new(10000, 10000)).X
end


function DataUsage:init()
	self:setState({ShowTooltip = false})
	self.LabelRef = Roact.createRef()
end


function DataUsage:calcDataSize()
	if self.props.Data == DataNil or self.props.DataError ~= "" then return 0 end
	local size = 0
	local success, dataStr = pcall(function()
		return HttpService:JSONEncode(self.props.Data)
	end)
	if success then
		size = string.len(dataStr)
	end
	return size
end


function DataUsage:render()
	local dataSize = self:calcDataSize()
	local dataFormatted = HumanBytes.Format(dataSize, false, 1)
	local dataSizeText = ("Data Usage: %s (%.2f%%)"):format(dataFormatted, (dataSize / MAX_DATA_SIZE) * 100)
	local tooltipText = ("%i / %i bytes"):format(dataSize, MAX_DATA_SIZE)
	local tooltipPos = UDim2.new()
	local lbl = self.LabelRef:getValue()
	if lbl then
		local sz = lbl.AbsoluteSize
		tooltipPos = lbl.AbsolutePosition + Vector2.new((sz.X / 2), 0)
		tooltipPos = UDim2.new(0, tooltipPos.X, 0, tooltipPos.Y)
	end
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			return Roact.createElement("Frame", {
				Size = UDim2.new(1, 0, 0, 30);
				Position = UDim2.fromScale(0, 1);
				AnchorPoint = Vector2.new(0, 1);
				BackgroundTransparency = 1;
				Visible = self.props.Visible;
			}, {
				Label = self.props.Data ~= DataNil and Roact.createElement("TextLabel", {
					BackgroundTransparency = 1;
					Size = UDim2.new(0, GetTextWidth(dataSizeText), 0, 30);
					Font = FONT;
					Text = dataSizeText;
					TextSize = TEXT_SIZE;
					TextColor3 = theme.MainText.Default;
					TextXAlignment = Enum.TextXAlignment.Left;
					[Roact.Event.MouseEnter] = function()
						self:setState({ShowTooltip = true})
					end;
					[Roact.Event.MouseLeave] = function()
						self:setState({ShowTooltip = false})
					end;
					[Roact.Ref] = self.LabelRef;
				}, {
					Roact.createElement(Tooltip, {
						AnchorPoint = Vector2.new(0.5, 1);
						Text = tooltipText;
						Position = tooltipPos;
						Visible = self.state.ShowTooltip;
					})
				}) or nil;
			})
		end;
	})
end


DataUsage = RoactRodux.connect(
	function(state)
		return {
			Data = state.Data;
			DataError = state.DataError;
		}
	end
)(DataUsage)


return DataUsage
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXA29C33270C1542919E2E86AE3D07F058">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">VersionLabel</string>
					<string name="ScriptGuid">{6790E2D5-CB96-41E2-B1B3-A5CD66F609D1}</string>
					<ProtectedString name="Source"><![CDATA[local Roact = require(script.Parent.Parent.Vendor.Roact)
local ThemeContext = require(script.Parent.ThemeContext)

local version = script.Parent.Parent.Version.Value

local VersionLabel = Roact.PureComponent:extend("VersionLabel")


function VersionLabel:render()
	return Roact.createElement(ThemeContext.Consumer, {
		render = function(theme)
			return Roact.createElement("TextLabel", {
				BackgroundTransparency = 1;
				AnchorPoint = Vector2.new(1, 1);
				Size = UDim2.new(1, 0, 0, 14);
				Position = UDim2.new(1, -10, 1, -10);
				LayoutOrder = 0;
				Font = Enum.Font.SourceSans;
				Text = version;
				TextSize = 14;
				TextColor3 = theme.MainText.Default;
				TextXAlignment = Enum.TextXAlignment.Right;
				TextTransparency = 0.75;
			})
		end;
	})
end


return VersionLabel
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="StringValue" referent="RBX324787706EE24E8E8CE03739E23F2585">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Version</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<string name="Value">v3.2.6</string>
			</Properties>
		</Item>
	</Item>
</roblox>